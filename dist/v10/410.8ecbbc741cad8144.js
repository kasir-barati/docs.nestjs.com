"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[410],{6410:(u,i,s)=>{s.r(i),s.d(i,{DevtoolsModule:()=>d});var c=s(177),a=s(2647),F=s(3887),l=s(8050),e=s(4438),p=s(4819);const h=[{path:"overview",component:(()=>{class t extends l.y{static \u0275fac=(()=>{let o;return function(r){return(o||(o=e.xGo(t)))(r||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["devtools-overview"]],features:[e.Vt3],decls:334,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/devtools/overview.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","overview"],[1,"info"],["rel","nofollow","target","_blank","href","https://devtools.nestjs.com"],[1,"language-typescript"],[1,"language-bash"],[1,"warning"],["src","/assets/devtools/modules-graph.png"],["src","/assets/devtools/classes-graph.png"],["src","/assets/devtools/node-popup.png"],["src","/assets/devtools/subtree-view.png"],["width","1000","height","565","src",e.wXG`https://www.youtube.com/embed/bW8V-ssfnvM`,"title","YouTube video player","frameBorder","0","allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share","allowFullScreen",""],["appAnchor","","id","investigating-the-cannot-resolve-dependency-error"],["src","/assets/devtools/drag-and-drop.png"],["src","/assets/devtools/partial-graph-modules-view.png"],["src","/assets/devtools/partial-graph-classes-view.png"],["appAnchor","","id","routes-explorer"],["src","/assets/devtools/routes.png"],["appAnchor","","id","sandbox"],["src","/assets/devtools/sandbox.png"],["src","/assets/devtools/sandbox-table.png"],["width","1000","height","565","src",e.wXG`https://www.youtube.com/embed/liSxEN_VXKM`,"title","YouTube video player","frameBorder","0","allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share","allowFullScreen",""],["appAnchor","","id","bootstrap-performance-analyzer"],["src","/assets/devtools/bootstrap-performance.png"],["appAnchor","","id","audit"],["src","/assets/devtools/audit.png"],["appAnchor","","id","preview-static-files"]],template:function(n,r){1&n&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Overview"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Hint"),e.k0s(),e.EFF(10," This chapter covers the Nest Devtools integration with the Nest framework. If you are looking for the Devtools application, please visit the "),e.j41(11,"a",7),e.EFF(12,"Devtools"),e.k0s(),e.EFF(13," website.\n"),e.k0s(),e.j41(14,"p"),e.EFF(15,"To start debugging your local application, open up the "),e.j41(16,"code"),e.EFF(17,"main.ts"),e.k0s(),e.EFF(18," file and make sure to set the "),e.j41(19,"code"),e.EFF(20,"snapshot"),e.k0s(),e.EFF(21," attribute to "),e.j41(22,"code"),e.EFF(23,"true"),e.k0s(),e.EFF(24," in the application options object, as follows:"),e.k0s(),e.j41(25,"pre")(26,"code",8),e.EFF(27,"\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    snapshot: true,\n  });\n  await app.listen(process.env.PORT ?? 3000);\n}\n"),e.k0s()(),e.j41(28,"p"),e.EFF(29,"This will instruct the framework to collect necessary metadata that will let Nest Devtools visualize your application's graph."),e.k0s(),e.j41(30,"p"),e.EFF(31,"Next up, let's install the required dependency:"),e.k0s(),e.j41(32,"pre")(33,"code",9),e.EFF(34,"\n$ npm i @nestjs/devtools-integration\n"),e.k0s()(),e.j41(35,"blockquote",10)(36,"strong"),e.EFF(37,"Warning"),e.k0s(),e.EFF(38," If you're using "),e.j41(39,"code"),e.EFF(40,"@nestjs/graphql"),e.k0s(),e.EFF(41," package in your application, make sure to install the latest version ("),e.j41(42,"code"),e.EFF(43,"npm i @nestjs/graphql@11"),e.k0s(),e.EFF(44,").\n"),e.k0s(),e.j41(45,"p"),e.EFF(46,"With this dependency in place, let's open up the "),e.j41(47,"code"),e.EFF(48,"app.module.ts"),e.k0s(),e.EFF(49," file and import the "),e.j41(50,"code"),e.EFF(51,"DevtoolsModule"),e.k0s(),e.EFF(52," that we just installed:"),e.k0s(),e.j41(53,"pre")(54,"code",8),e.EFF(55,"\n@Module({\n  imports: [\n    DevtoolsModule.register({\n      http: process.env.NODE_ENV !== 'production',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(56,"blockquote",10)(57,"strong"),e.EFF(58,"Warning"),e.k0s(),e.EFF(59," The reason we are checking the "),e.j41(60,"code"),e.EFF(61,"NODE_ENV"),e.k0s(),e.EFF(62," environment variable here is that you should never use this module in production!\n"),e.k0s(),e.j41(63,"p"),e.EFF(64,"Once the "),e.j41(65,"code"),e.EFF(66,"DevtoolsModule"),e.k0s(),e.EFF(67," is imported and your application is up and running ("),e.j41(68,"code"),e.EFF(69,"npm run start:dev"),e.k0s(),e.EFF(70,"), you should be able to navigate to "),e.j41(71,"a",7),e.EFF(72,"Devtools"),e.k0s(),e.EFF(73," URL and see the instrospected graph."),e.k0s(),e.j41(74,"figure"),e.nrm(75,"img",11),e.k0s(),e.j41(76,"blockquote",6)(77,"strong"),e.EFF(78,"Hint"),e.k0s(),e.EFF(79," As you can see on the screenshot above, every module connects to the "),e.j41(80,"code"),e.EFF(81,"InternalCoreModule"),e.k0s(),e.EFF(82,". "),e.j41(83,"code"),e.EFF(84,"InternalCoreModule"),e.k0s(),e.EFF(85," is a global module that is always imported into the root module. Since it's registered as a global node, Nest automatically creates edges between all of the modules and the "),e.j41(86,"code"),e.EFF(87,"InternalCoreModule"),e.k0s(),e.EFF(88,' node. Now, if you want to hide global modules from the graph, you can use the "'),e.j41(89,"strong"),e.EFF(90,"Hide global modules"),e.k0s(),e.EFF(91,'" checkbox (in the sidebar).\n'),e.k0s(),e.j41(92,"p"),e.EFF(93,"So as we can see, "),e.j41(94,"code"),e.EFF(95,"DevtoolsModule"),e.k0s(),e.EFF(96," makes your application expose an additional HTTP server (on port 8000) that the Devtools application will use to introspect your app."),e.k0s(),e.j41(97,"p"),e.EFF(98,'Just to double-check that everything works as expected, change the graph view to "Classes". You should see the following screen:'),e.k0s(),e.j41(99,"figure"),e.nrm(100,"img",12),e.k0s(),e.j41(101,"p"),e.EFF(102,"To focus on a specific node, click on the rectangle and the graph will show a popup window with the "),e.j41(103,"strong"),e.EFF(104,'"Focus"'),e.k0s(),e.EFF(105," button. You can also use the search bar (located in the sidebar) to find a specific node."),e.k0s(),e.j41(106,"blockquote",6)(107,"strong"),e.EFF(108,"Hint"),e.k0s(),e.EFF(109," If you click on the "),e.j41(110,"strong"),e.EFF(111,"Inspect"),e.k0s(),e.EFF(112," button, application will take you to the "),e.j41(113,"code"),e.EFF(114,"/debug"),e.k0s(),e.EFF(115," page with that specific node selected.\n"),e.k0s(),e.j41(116,"figure"),e.nrm(117,"img",13),e.k0s(),e.j41(118,"blockquote",6)(119,"strong"),e.EFF(120,"Hint"),e.k0s(),e.EFF(121," To export a graph as an image, click on the "),e.j41(122,"strong"),e.EFF(123,"Export as PNG"),e.k0s(),e.EFF(124," button in the right corner of the graph.\n"),e.k0s(),e.j41(125,"p"),e.EFF(126,"Using the form controls located in the sidebar (on the left), you can control edges proximity to, for example, visualize a specific application sub-tree:"),e.k0s(),e.j41(127,"figure"),e.nrm(128,"img",14),e.k0s(),e.j41(129,"p"),e.EFF(130,"This can be particularly useful when you have "),e.j41(131,"strong"),e.EFF(132,"new developers"),e.k0s(),e.EFF(133," on your team and you want to show them how your application is structured. You can also use this feature to visualize a specific module (e.g. "),e.j41(134,"code"),e.EFF(135,"TasksModule"),e.k0s(),e.EFF(136,") and all of its dependencies, which can come in handy when you're breaking down a large application into smaller modules (for example, individual micro-services)."),e.k0s(),e.j41(137,"p"),e.EFF(138,"You can watch this video to see the "),e.j41(139,"strong"),e.EFF(140,"Graph Explorer"),e.k0s(),e.EFF(141," feature in action:"),e.k0s(),e.j41(142,"figure"),e.nrm(143,"iframe",15),e.k0s(),e.j41(144,"h4",16)(145,"span"),e.EFF(146,'Investigating the "Cannot resolve dependency" error'),e.k0s()(),e.j41(147,"blockquote",6)(148,"strong"),e.EFF(149,"Note"),e.k0s(),e.EFF(150," This feature is supported for "),e.j41(151,"code"),e.EFF(152,"@nestjs/core"),e.k0s(),e.EFF(153," >= "),e.j41(154,"code"),e.EFF(155,"v9.3.10"),e.k0s(),e.EFF(156,".\n"),e.k0s(),e.j41(157,"p"),e.EFF(158,"Probably the most common error message you might have seen is about Nest not being able to resolve dependencies of a provider. Using Nest Devtools, you can effortlessly identify the issue and learn how to resolve it."),e.k0s(),e.j41(159,"p"),e.EFF(160,"First, open up the "),e.j41(161,"code"),e.EFF(162,"main.ts"),e.k0s(),e.EFF(163," file and update the "),e.j41(164,"code"),e.EFF(165,"bootstrap()"),e.k0s(),e.EFF(166," call, as follows:"),e.k0s(),e.j41(167,"pre")(168,"code",8),e.EFF(169,"\nbootstrap().catch((err) => {\n  fs.writeFileSync('graph.json', PartialGraphHost.toString() ?? '');\n  process.exit(1);\n});\n"),e.k0s()(),e.j41(170,"p"),e.EFF(171,"Also, make sure to set the "),e.j41(172,"code"),e.EFF(173,"abortOnError"),e.k0s(),e.EFF(174," to "),e.j41(175,"code"),e.EFF(176,"false"),e.k0s(),e.EFF(177,":"),e.k0s(),e.j41(178,"pre")(179,"code",8),e.EFF(180,"\nconst app = await NestFactory.create(AppModule, {\n  snapshot: true,\n  abortOnError: false, // <--- THIS\n});\n"),e.k0s()(),e.j41(181,"p"),e.EFF(182,"Now every time your application fails to bootstrap due to the "),e.j41(183,"strong"),e.EFF(184,'"Cannot resolve dependency"'),e.k0s(),e.EFF(185," error, you'll find the "),e.j41(186,"code"),e.EFF(187,"graph.json"),e.k0s(),e.EFF(188,' (that represents a partial graph) file in the root directory. You can then drag & drop this file into Devtools (make sure to switch the current mode from "Interactive" to "Preview"):'),e.k0s(),e.j41(189,"figure"),e.nrm(190,"img",17),e.k0s(),e.j41(191,"p"),e.EFF(192,"Upon successful upload, you should see the following graph & dialog window:"),e.k0s(),e.j41(193,"figure"),e.nrm(194,"img",18),e.k0s(),e.j41(195,"p"),e.EFF(196,"As you can see, the highlighted "),e.j41(197,"code"),e.EFF(198,"TasksModule"),e.k0s(),e.EFF(199," is the one we should look into. Also, in the dialog window you can already see some instructions on how to fix this issue."),e.k0s(),e.j41(200,"p"),e.EFF(201,"If we switch to the \"Classes\" view instead, that's what we'll see:"),e.k0s(),e.j41(202,"figure"),e.nrm(203,"img",19),e.k0s(),e.j41(204,"p"),e.EFF(205,"This graph illustrates that the "),e.j41(206,"code"),e.EFF(207,"DiagnosticsService"),e.k0s(),e.EFF(208," which we want to inject into the "),e.j41(209,"code"),e.EFF(210,"TasksService"),e.k0s(),e.EFF(211," was not found in the context of the "),e.j41(212,"code"),e.EFF(213,"TasksModule"),e.k0s(),e.EFF(214," module, and we should likely just import the "),e.j41(215,"code"),e.EFF(216,"DiagnosticsModule"),e.k0s(),e.EFF(217," into the "),e.j41(218,"code"),e.EFF(219,"TasksModule"),e.k0s(),e.EFF(220," module to fix this up!"),e.k0s(),e.j41(221,"h4",20)(222,"span"),e.EFF(223,"Routes explorer"),e.k0s()(),e.j41(224,"p"),e.EFF(225,"When you navigate to the "),e.j41(226,"strong"),e.EFF(227,"Routes explorer"),e.k0s(),e.EFF(228," page, you should see all of the registered entrypoints:"),e.k0s(),e.j41(229,"figure"),e.nrm(230,"img",21),e.k0s(),e.j41(231,"blockquote",6)(232,"strong"),e.EFF(233,"Hint"),e.k0s(),e.EFF(234," This page shows not only HTTP routes, but also all of the other entrypoints (e.g. WebSockets, gRPC, GraphQL resolvers etc.).\n"),e.k0s(),e.j41(235,"p"),e.EFF(236,"Entrypoints are grouped by their host controllers. You can also use the search bar to find a specific entrypoint."),e.k0s(),e.j41(237,"p"),e.EFF(238,"If you click on a specific entrypoint, "),e.j41(239,"strong"),e.EFF(240,"a flow graph"),e.k0s(),e.EFF(241," will be displayed. This graph shows the execution flow of the entrypoint (e.g. guards, interceptors, pipes, etc. bound to this route). This is particularly useful when you want to understand how the request/response cycle looks for a specific route, or when troubleshooting why a specific guard/interceptor/pipe is not being executed."),e.k0s(),e.j41(242,"h4",22)(243,"span"),e.EFF(244,"Sandbox"),e.k0s()(),e.j41(245,"p"),e.EFF(246,"To execute JavaScript code on the fly & interact with your application in real-time, navigate to the "),e.j41(247,"strong"),e.EFF(248,"Sandbox"),e.k0s(),e.EFF(249," page:"),e.k0s(),e.j41(250,"figure"),e.nrm(251,"img",23),e.k0s(),e.j41(252,"p"),e.EFF(253,"The playground can be used to test and debug API endpoints in "),e.j41(254,"strong"),e.EFF(255,"real-time"),e.k0s(),e.EFF(256,", allowing developers to quickly identify and fix issues without using, for example, an HTTP client. We can also bypass the authentication layer, and so we no longer need that extra step of logging in, or even a special user account for testing purposes. For event-driven applications, we can also trigger events directly from the playground, and see how the application reacts to them."),e.k0s(),e.j41(257,"p"),e.EFF(258,"Anything that gets logged down is streamlined to the playground's console, so we can easily see what's going on."),e.k0s(),e.j41(259,"p"),e.EFF(260,"Just execute the code "),e.j41(261,"strong"),e.EFF(262,"on the fly"),e.k0s(),e.EFF(263," and see the results instantly, without having to rebuild the application and restart the server."),e.k0s(),e.j41(264,"figure"),e.nrm(265,"img",24),e.k0s(),e.j41(266,"blockquote",6)(267,"strong"),e.EFF(268,"Hint"),e.k0s(),e.EFF(269," To pretty display an array of objects, use the "),e.j41(270,"code"),e.EFF(271,"console.table()"),e.k0s(),e.EFF(272," (or just "),e.j41(273,"code"),e.EFF(274,"table()"),e.k0s(),e.EFF(275,") function.\n"),e.k0s(),e.j41(276,"p"),e.EFF(277,"You can watch this video to see the "),e.j41(278,"strong"),e.EFF(279,"Interactive Playground"),e.k0s(),e.EFF(280," feature in action:"),e.k0s(),e.j41(281,"figure"),e.nrm(282,"iframe",25),e.k0s(),e.j41(283,"h4",26)(284,"span"),e.EFF(285,"Bootstrap performance analyzer"),e.k0s()(),e.j41(286,"p"),e.EFF(287,"To see a list of all class nodes (controllers, providers, enhancers, etc.) and their corresponding instantiation times, navigate to the "),e.j41(288,"strong"),e.EFF(289,"Bootstrap performance"),e.k0s(),e.EFF(290," page:"),e.k0s(),e.j41(291,"figure"),e.nrm(292,"img",27),e.k0s(),e.j41(293,"p"),e.EFF(294,"This page is particularly useful when you want to identify the slowest parts of your application's bootstrap process (e.g. when you want to optimize the application's startup time which is crucial for, for example, serverless environments)."),e.k0s(),e.j41(295,"h4",28)(296,"span"),e.EFF(297,"Audit"),e.k0s()(),e.j41(298,"p"),e.EFF(299,"To see the auto-generated audit - errors/warnings/hints that the application came up with while analyzing your serialized graph, navigate to the "),e.j41(300,"strong"),e.EFF(301,"Audit"),e.k0s(),e.EFF(302," page:"),e.k0s(),e.j41(303,"figure"),e.nrm(304,"img",29),e.k0s(),e.j41(305,"blockquote",6)(306,"strong"),e.EFF(307,"Hint"),e.k0s(),e.EFF(308," The screenshot above doesn't show all of the available audit rules.\n"),e.k0s(),e.j41(309,"p"),e.EFF(310,"This page comes in handy when you want to identify potential issues in your application."),e.k0s(),e.j41(311,"h4",30)(312,"span"),e.EFF(313,"Preview static files"),e.k0s()(),e.j41(314,"p"),e.EFF(315,"To save a serialized graph to a file, use the following code:"),e.k0s(),e.j41(316,"pre")(317,"code",8),e.EFF(318,"\nawait app.listen(process.env.PORT ?? 3000); // OR await app.init()\nfs.writeFileSync('./graph.json', app.get(SerializedGraph).toString());\n"),e.k0s()(),e.j41(319,"blockquote",6)(320,"strong"),e.EFF(321,"Hint"),e.k0s(),e.j41(322,"code"),e.EFF(323,"SerializedGraph"),e.k0s(),e.EFF(324," is exported from the "),e.j41(325,"code"),e.EFF(326,"@nestjs/core"),e.k0s(),e.EFF(327," package.\n"),e.k0s(),e.j41(328,"p"),e.EFF(329,"Then you can drag and drop/upload this file:"),e.k0s(),e.j41(330,"figure"),e.nrm(331,"img",17),e.k0s(),e.j41(332,"p"),e.EFF(333,"This is helpful when you want to share your graph with someone else (e.g., co-worker), or when you want to analyze it offline."),e.k0s()())},dependencies:[p.a],encapsulation:2,changeDetection:0})}return t})(),data:{title:"Devtools - Overview"}},{path:"ci-cd-integration",component:(()=>{class t extends l.y{static \u0275fac=(()=>{let o;return function(r){return(o||(o=e.xGo(t)))(r||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["devtools-ci-cd"]],features:[e.Vt3],decls:284,vars:12,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/devtools/ci-cd.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","cicd-integration"],[1,"info"],["rel","nofollow","target","_blank","href","https://devtools.nestjs.com"],["routerLink","/settings"],["width","1000","height","565","src",e.wXG`https://www.youtube.com/embed/r5RXcBrnEQ8`,"title","YouTube video player","frameBorder","0","allow","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share","allowFullScreen",""],["appAnchor","","id","publishing-graphs"],[1,"language-typescript"],["src","/assets/devtools/graph-published-terminal.png"],["src","/assets/devtools/project.png"],["appAnchor","","id","reports"],["src","/assets/devtools/report.png"],["appAnchor","","id","build-preview"],["src","/assets/devtools/nodes-selection.png"],["appAnchor","","id","integrations-github-actions"],[1,"language-yaml"],["rel","nofollow","target","_blank","href","https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository"],["rel","nofollow","target","_blank","href","https://devtools.nestjs.com/settings/manage-api-keys"],["src","/assets/devtools/integrate-github-app.png"],["src","/assets/devtools/actions-preview.png"],["appAnchor","","id","integrations-gitlab-pipelines"],["appAnchor","","id","other-cicd-tools"],["rel","nofollow","target","_blank","href","https://bitbucket.org/product/features/pipelines"],["rel","nofollow","target","_blank","href","https://circleci.com/"],["rel","nofollow","target","_blank","href","https://circleci.com/docs/variables/#built-in-environment-variables"],["rel","nofollow","target","_blank","href","https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/"]],template:function(n,r){1&n&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"CI/CD integration"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Hint"),e.k0s(),e.EFF(10," This chapter covers the Nest Devtools integration with the Nest framework. If you are looking for the Devtools application, please visit the "),e.j41(11,"a",7),e.EFF(12,"Devtools"),e.k0s(),e.EFF(13," website.\n"),e.k0s(),e.j41(14,"p"),e.EFF(15,"CI/CD integration is available for users with the "),e.j41(16,"strong")(17,"a",8),e.EFF(18,"Enterprise"),e.k0s()(),e.EFF(19," plan."),e.k0s(),e.j41(20,"p"),e.EFF(21,"You can watch this video to learn why & how CI/CD integration can help you:"),e.k0s(),e.j41(22,"figure"),e.nrm(23,"iframe",9),e.k0s(),e.j41(24,"h4",10)(25,"span"),e.EFF(26,"Publishing graphs"),e.k0s()(),e.j41(27,"p"),e.EFF(28,"Let's first configure the application bootstrap file ("),e.j41(29,"code"),e.EFF(30,"main.ts"),e.k0s(),e.EFF(31,") to use the "),e.j41(32,"code"),e.EFF(33,"GraphPublisher"),e.k0s(),e.EFF(34," class (exported from the "),e.j41(35,"code"),e.EFF(36,"@nestjs/devtools-integration"),e.k0s(),e.EFF(37," - see previous chapter for more details), as follows:"),e.k0s(),e.j41(38,"pre")(39,"code",11),e.EFF(40,'\nasync function bootstrap() {\n  const shouldPublishGraph = process.env.PUBLISH_GRAPH === "true";\n\n  const app = await NestFactory.create(AppModule, {\n    snapshot: true,\n    preview: shouldPublishGraph,\n  });\n\n  if (shouldPublishGraph) {\n    await app.init();\n\n    const publishOptions = { ... } // NOTE: this options object will vary depending on the CI/CD provider you\'re using\n    const graphPublisher = new GraphPublisher(app);\n    await graphPublisher.publish(publishOptions);\n\n    await app.close();\n  } else {\n    await app.listen(process.env.PORT ?? 3000);\n  }\n}\n'),e.k0s()(),e.j41(41,"p"),e.EFF(42,"As we can see, we're using the "),e.j41(43,"code"),e.EFF(44,"GraphPublisher"),e.k0s(),e.EFF(45," here to publish our serialized graph to the centralized registry. The "),e.j41(46,"code"),e.EFF(47,"PUBLISH_GRAPH"),e.k0s(),e.EFF(48," is a custom environment variable that will let us control whether the graph should be published (CI/CD workflow), or not (regular application bootstrap). Also, we set the "),e.j41(49,"code"),e.EFF(50,"preview"),e.k0s(),e.EFF(51," attribute here to "),e.j41(52,"code"),e.EFF(53,"true"),e.k0s(),e.EFF(54,". With this flag enabled, our application will bootstrap in the preview mode - which basically means that constructors (and lifecycle hooks) of all controllers, enhancers, and providers in our application will not be executed. Note - this isn't "),e.j41(55,"strong"),e.EFF(56,"required"),e.k0s(),e.EFF(57,", but makes things simpler for us since in this case we won't really have to connect to the database etc. when running our application in the CI/CD pipeline."),e.k0s(),e.j41(58,"p"),e.EFF(59,"The "),e.j41(60,"code"),e.EFF(61,"publishOptions"),e.k0s(),e.EFF(62," object will vary depending on the CI/CD provider you're using. We will provide you with instructions for the most popular CI/CD providers below, in later sections."),e.k0s(),e.j41(63,"p"),e.EFF(64,"Once the graph is successfully published, you'll see the following output in your workflow view:"),e.k0s(),e.j41(65,"figure"),e.nrm(66,"img",12),e.k0s(),e.j41(67,"p"),e.EFF(68,"Every time our graph is published, we should see a new entry in the project's corresponding page:"),e.k0s(),e.j41(69,"figure"),e.nrm(70,"img",13),e.k0s(),e.j41(71,"h4",14)(72,"span"),e.EFF(73,"Reports"),e.k0s()(),e.j41(74,"p"),e.EFF(75,"Devtools generate a report for every build "),e.j41(76,"strong"),e.EFF(77,"IF"),e.k0s(),e.EFF(78," there's a corresponding snapshot already stored in the centralized registry. So for example, if you create a PR against the "),e.j41(79,"code"),e.EFF(80,"master"),e.k0s(),e.EFF(81," branch for which the graph was already published - then the application will be able to detect differences and generate a report. Otherwise, the report will not be generated."),e.k0s(),e.j41(82,"p"),e.EFF(83,"To see reports, navigate to the project's corresponding page (see organizations)."),e.k0s(),e.j41(84,"figure"),e.nrm(85,"img",15),e.k0s(),e.j41(86,"p"),e.EFF(87,"This is particularly helpful in identifying changes that may have gone unnoticed during code reviews. For instance, let's say someone has changed the scope of a "),e.j41(88,"strong"),e.EFF(89,"deeply nested provider"),e.k0s(),e.EFF(90,". This change might not be immediately obvious to the reviewer, but with Devtools, we can easily spot such changes and make sure that they're intentional. Or if we remove a guard from a specific endpoint, it will show up as affected in the report. Now if we didn't have integration or e2e tests for that route, we might not notice that it's no longer protected, and by the time we do, it could be too late."),e.k0s(),e.j41(91,"p"),e.EFF(92,"Similarly, if we're working on a "),e.j41(93,"strong"),e.EFF(94,"large codebase"),e.k0s(),e.EFF(95," and we modify a module to be global, we'll see how many edges were added to the graph, and this - in most cases - is a sign that we're doing something wrong."),e.k0s(),e.j41(96,"h4",16)(97,"span"),e.EFF(98,"Build preview"),e.k0s()(),e.j41(99,"p"),e.EFF(100,"For every published graph we can go back in time and preview how it looked before by clicking at the "),e.j41(101,"strong"),e.EFF(102,"Preview"),e.k0s(),e.EFF(103," button. Furthermore, if the report was generated, we should see the differences highlighted on our graph:"),e.k0s(),e.j41(104,"ul")(105,"li"),e.EFF(106,"green nodes represent added elements"),e.k0s(),e.j41(107,"li"),e.EFF(108,"light white nodes represent updated elements"),e.k0s(),e.j41(109,"li"),e.EFF(110,"red nodes represent deleted elements"),e.k0s()(),e.j41(111,"p"),e.EFF(112,"See screenshot below:"),e.k0s(),e.j41(113,"figure"),e.nrm(114,"img",17),e.k0s(),e.j41(115,"p"),e.EFF(116,"The ability to go back in time lets you investigate and troubleshoot the issue by comparing the current graph with the previous one. Depending on how you set things up, every pull request (or even every commit) will have a corresponding snapshot in the registry, so you can easily go back in time and see what changed. Think of Devtools as a Git but with an understanding of how Nest constructs your application graph, and with the ability to "),e.j41(117,"strong"),e.EFF(118,"visualize"),e.k0s(),e.EFF(119," it."),e.k0s(),e.j41(120,"h4",18)(121,"span"),e.EFF(122,"Integrations: GitHub Actions"),e.k0s()(),e.j41(123,"p"),e.EFF(124,"First let's start from creating a new GitHub workflow in the "),e.j41(125,"code"),e.EFF(126,".github/workflows"),e.k0s(),e.EFF(127," directory in our project and call it, for example, "),e.j41(128,"code"),e.EFF(129,"publish-graph.yml"),e.k0s(),e.EFF(130,". Inside this file, let's use the following definition:"),e.k0s(),e.j41(131,"pre")(132,"code",19),e.EFF(133),e.k0s()(),e.j41(134,"p"),e.EFF(135,"Ideally, "),e.j41(136,"code"),e.EFF(137,"DEVTOOLS_API_KEY"),e.k0s(),e.EFF(138," environment variable should be retrieved from GitHub Secrets, read more "),e.j41(139,"a",20),e.EFF(140,"here"),e.k0s(),e.EFF(141," ."),e.k0s(),e.j41(142,"p"),e.EFF(143,"This workflow will run per each pull request that's targeting the "),e.j41(144,"code"),e.EFF(145,"master"),e.k0s(),e.EFF(146," branch OR in case there's a direct commit to the "),e.j41(147,"code"),e.EFF(148,"master"),e.k0s(),e.EFF(149," branch. Feel free to align this configuration to whatever your project needs. What's essential here is that we provide necessary environment variables for our "),e.j41(150,"code"),e.EFF(151,"GraphPublisher"),e.k0s(),e.EFF(152," class (to run)."),e.k0s(),e.j41(153,"p"),e.EFF(154,"However, there's one variable that needs to be updated before we can start using this workflow - "),e.j41(155,"code"),e.EFF(156,"DEVTOOLS_API_KEY"),e.k0s(),e.EFF(157,". We can generate an API key dedicated for our project on this "),e.j41(158,"a",21),e.EFF(159,"page"),e.k0s(),e.EFF(160,"."),e.k0s(),e.j41(161,"p"),e.EFF(162,"Lastly, let's navigate to the "),e.j41(163,"code"),e.EFF(164,"main.ts"),e.k0s(),e.EFF(165," file again and update the "),e.j41(166,"code"),e.EFF(167,"publishOptions"),e.k0s(),e.EFF(168," object we previously left empty."),e.k0s(),e.j41(169,"pre")(170,"code",11),e.EFF(171,"\nconst publishOptions = {\n  apiKey: process.env.DEVTOOLS_API_KEY,\n  repository: process.env.REPOSITORY_NAME,\n  owner: process.env.GITHUB_REPOSITORY_OWNER,\n  sha: process.env.COMMIT_SHA,\n  target: process.env.TARGET_SHA,\n  trigger: process.env.GITHUB_BASE_REF ? 'pull' : 'push',\n  branch: process.env.BRANCH_NAME,\n};\n"),e.k0s()(),e.j41(172,"p"),e.EFF(173,"For the best developer experience, make sure to integrate the "),e.j41(174,"strong"),e.EFF(175,"GitHub application"),e.k0s(),e.EFF(176,' for your project by clicking on the "Integrate GitHub app" button (see screenshot below). Note - this isn\'t required.'),e.k0s(),e.j41(177,"figure"),e.nrm(178,"img",22),e.k0s(),e.j41(179,"p"),e.EFF(180,"With this integration, you'll be able to see the status of the preview/report generation process right in your pull request:"),e.k0s(),e.j41(181,"figure"),e.nrm(182,"img",23),e.k0s(),e.j41(183,"h4",24)(184,"span"),e.EFF(185,"Integrations: Gitlab Pipelines"),e.k0s()(),e.j41(186,"p"),e.EFF(187,"First let's start from creating a new Gitlab CI configuration file in the root directory of our project and call it, for example, "),e.j41(188,"code"),e.EFF(189,".gitlab-ci.yml"),e.k0s(),e.EFF(190,". Inside this file, let's use the following definition:"),e.k0s(),e.j41(191,"pre")(192,"code",11),e.EFF(193,"\nconst publishOptions = {\n  apiKey: process.env.DEVTOOLS_API_KEY,\n  repository: process.env.REPOSITORY_NAME,\n  owner: process.env.GITHUB_REPOSITORY_OWNER,\n  sha: process.env.COMMIT_SHA,\n  target: process.env.TARGET_SHA,\n  trigger: process.env.GITHUB_BASE_REF ? 'pull' : 'push',\n  branch: process.env.BRANCH_NAME,\n};\n"),e.k0s()(),e.j41(194,"blockquote",6)(195,"strong"),e.EFF(196,"Hint"),e.k0s(),e.EFF(197," Ideally, "),e.j41(198,"code"),e.EFF(199,"DEVTOOLS_API_KEY"),e.k0s(),e.EFF(200," environment variable should be retrieved from secrets.\n"),e.k0s(),e.j41(201,"p"),e.EFF(202,"This workflow will run per each pull request that's targeting the "),e.j41(203,"code"),e.EFF(204,"master"),e.k0s(),e.EFF(205," branch OR in case there's a direct commit to the "),e.j41(206,"code"),e.EFF(207,"master"),e.k0s(),e.EFF(208," branch. Feel free to align this configuration to whatever your project needs. What's essential here is that we provide necessary environment variables for our "),e.j41(209,"code"),e.EFF(210,"GraphPublisher"),e.k0s(),e.EFF(211," class (to run)."),e.k0s(),e.j41(212,"p"),e.EFF(213,"However, there's one variable (in this workflow definition) that needs to be updated before we can start using this workflow - "),e.j41(214,"code"),e.EFF(215,"DEVTOOLS_API_KEY"),e.k0s(),e.EFF(216,". We can generate an API key dedicated for our project on this "),e.j41(217,"strong"),e.EFF(218,"page"),e.k0s(),e.EFF(219," ."),e.k0s(),e.j41(220,"p"),e.EFF(221,"Lastly, let's navigate to the "),e.j41(222,"code"),e.EFF(223,"main.ts"),e.k0s(),e.EFF(224," file again and update the "),e.j41(225,"code"),e.EFF(226,"publishOptions"),e.k0s(),e.EFF(227," object we previously left empty."),e.k0s(),e.j41(228,"pre")(229,"code",19),e.EFF(230,'\nimage: node:16\n\nstages:\n  - build\n\ncache:\n  key:\n    files:\n      - package-lock.json\n  paths:\n    - node_modules/\n\nworkflow:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == "merge_request_event"\n      when: always\n    - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "push"\n      when: always\n    - when: never\n\ninstall_dependencies:\n  stage: build\n  script:\n    - npm ci\n\npublish_graph:\n  stage: build\n  needs:\n    - install_dependencies\n  script: npm run start\n  variables:\n    PUBLISH_GRAPH: \'true\'\n    DEVTOOLS_API_KEY: \'CHANGE_THIS_TO_YOUR_API_KEY\'\n'),e.k0s()(),e.j41(231,"h4",25)(232,"span"),e.EFF(233,"Other CI/CD tools"),e.k0s()(),e.j41(234,"p"),e.EFF(235,"Nest Devtools CI/CD integration can be used with any CI/CD tool of your choice (e.g., "),e.j41(236,"a",26),e.EFF(237,"Bitbucket Pipelines"),e.k0s(),e.EFF(238," , "),e.j41(239,"a",27),e.EFF(240,"CircleCI"),e.k0s(),e.EFF(241,", etc) so don't feel limited to providers we described here."),e.k0s(),e.j41(242,"p"),e.EFF(243,"Look at the following "),e.j41(244,"code"),e.EFF(245,"publishOptions"),e.k0s(),e.EFF(246," object configuration to understand what information is required to publish the graph for a given commit/build/PR."),e.k0s(),e.j41(247,"pre")(248,"code",11),e.EFF(249,"\nconst publishOptions = {\n  apiKey: process.env.DEVTOOLS_API_KEY,\n  repository: process.env.CI_PROJECT_NAME,\n  owner: process.env.CI_PROJECT_ROOT_NAMESPACE,\n  sha: process.env.CI_COMMIT_SHA,\n  target: process.env.CI_MERGE_REQUEST_DIFF_BASE_SHA,\n  trigger: process.env.CI_MERGE_REQUEST_DIFF_BASE_SHA ? 'pull' : 'push',\n  branch: process.env.CI_COMMIT_BRANCH ?? process.env.CI_MERGE_REQUEST_SOURCE_BRANCH_NAME,\n};\n"),e.k0s()(),e.j41(250,"p"),e.EFF(251,"Most of this information is provided through CI/CD built-in environment variables (see "),e.j41(252,"a",28),e.EFF(253,"CircleCI built-in environment list"),e.k0s(),e.EFF(254," and "),e.j41(255,"a",29),e.EFF(256,"Bitbucket variables"),e.k0s(),e.EFF(257," )."),e.k0s(),e.j41(258,"p"),e.EFF(259,"When it comes to the pipeline configuration for publishing graphs, we recommend using the following triggers:"),e.k0s(),e.j41(260,"ul")(261,"li")(262,"code"),e.EFF(263,"push"),e.k0s(),e.EFF(264," event - only if the current branch represents a deployment environment, for example "),e.j41(265,"code"),e.EFF(266,"master"),e.k0s(),e.EFF(267,", "),e.j41(268,"code"),e.EFF(269,"main"),e.k0s(),e.EFF(270,", "),e.j41(271,"code"),e.EFF(272,"staging"),e.k0s(),e.EFF(273,", "),e.j41(274,"code"),e.EFF(275,"production"),e.k0s(),e.EFF(276,", etc."),e.k0s(),e.j41(277,"li")(278,"code"),e.EFF(279,"pull request"),e.k0s(),e.EFF(280," event - always, or when the "),e.j41(281,"strong"),e.EFF(282,"target branch"),e.k0s(),e.EFF(283," represents a deployment environment (see above)"),e.k0s()()()),2&n&&(e.R7$(133),e.xRd(["\nname: Devtools\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  publish:\n    if: github.actor!= 'dependabot[bot]'\n    name: Publish graph\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Setup Environment (PR)\n        if: ","${{"," github.event_name == 'pull_request' ","}}",'\n        shell: bash\n        run: |\n          echo "COMMIT_SHA=',"${{"," github.event.pull_request.head.sha ","}}",'" >>\\${GITHUB_ENV}\n      - name: Setup Environment (Push)\n        if: ',"${{"," github.event_name == 'push' ","}}",'\n        shell: bash\n        run: |\n          echo "COMMIT_SHA=\\${GITHUB_SHA}" >> \\${GITHUB_ENV}\n      - name: Publish\n        run: PUBLISH_GRAPH=true npm run start\n        env:\n          DEVTOOLS_API_KEY: CHANGE_THIS_TO_YOUR_API_KEY\n          REPOSITORY_NAME: ',"${{"," github.event.repository.name ","}}","\n          BRANCH_NAME: ","${{"," github.head_ref || github.ref_name ","}}","\n          TARGET_SHA: ","${{"," github.event.pull_request.base.sha ","}}","\n"]))},dependencies:[p.a,a.Wk],encapsulation:2,changeDetection:0})}return t})(),data:{title:"Devtools - CI/CD integration"}}];let d=(()=>{class t{static \u0275fac=function(n){return new(n||t)};static \u0275mod=e.$C({type:t});static \u0275inj=e.G2t({imports:[c.MD,F.G,a.iI.forChild(h)]})}return t})()}}]);