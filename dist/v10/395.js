"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[395],{395:(T,F,r)=>{r.r(F),r.d(F,{FaqModule:()=>A});var u=r(177),l=r(685),h=r(445),a=r(8050),e=r(4438),i=r(4819),m=r(7077);let E=(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-errors"]],features:[e.Vt3],decls:220,vars:2,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/errors.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","common-errors"],["appAnchor","","id","cannot-resolve-dependency-error"],[1,"info"],["href","/devtools/overview#investigating-the-cannot-resolve-dependency-error"],[1,"language-bash"],["href","/fundamentals/custom-providers#di-fundamentals"],["href","/faq/common-errors#circular-dependency-error"],["routerLink","/fundamentals/custom-providers"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export"],[1,"language-text"],["rel","nofollow","target","_blank","href","https://classic.yarnpkg.com/blog/2018/02/15/nohoist"],["rel","nofollow","target","_blank","href","https://pnpm.io/package_json#dependenciesmetainjected"],["appAnchor","","id","circular-dependency-error"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/circular-dependency"],["appAnchor","","id","debugging-dependency-errors"],["src","/assets/injector_logs.png"],["appAnchor","","id","file-change-detected-loops-endlessly"],["rel","nofollow","target","_blank","href","https://devblogs.microsoft.com/typescript/announcing-typescript-4-9/#file-watching-now-uses-file-system-events"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/tsconfig#watch-watchDirectory"]],template:function(n,s){1&n&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Common errors"),e.k0s(),e.j41(7,"p"),e.EFF(8,"During your development with NestJS, you may encounter various errors as you learn the framework."),e.k0s(),e.j41(9,"h4",6)(10,"span"),e.EFF(11,'"Cannot resolve dependency" error'),e.k0s()(),e.j41(12,"blockquote",7)(13,"strong"),e.EFF(14,"Hint"),e.k0s(),e.EFF(15," Check out the "),e.j41(16,"a",8),e.EFF(17,"NestJS Devtools"),e.k0s(),e.EFF(18,' which can help you resolve the "Cannot resolve dependency" error effortlessly.\n'),e.k0s(),e.j41(19,"p"),e.EFF(20,"Probably the most common error message is about Nest not being able to resolve dependencies of a provider. The error message usually looks something like this:"),e.k0s(),e.j41(21,"pre")(22,"code",9),e.EFF(23,"\nNest can't resolve dependencies of the <provider> (?). Please make sure that the argument <unknown_token> at index [<index>] is available in the <module> context.\n\nPotential solutions:\n- Is <module> a valid NestJS module?\n- If <unknown_token> is a provider, is it part of the current <module>?\n- If <unknown_token> is exported from a separate @Module, is that module imported within <module>?\n  @Module({\n    imports: [ /* the Module containing <unknown_token> */ ]\n  })\n"),e.k0s()(),e.j41(24,"p"),e.EFF(25,"The most common culprit of the error, is not having the "),e.j41(26,"code"),e.EFF(27,"<provider>"),e.k0s(),e.EFF(28," in the module's "),e.j41(29,"code"),e.EFF(30,"providers"),e.k0s(),e.EFF(31," array. Please make sure that the provider is indeed in the "),e.j41(32,"code"),e.EFF(33,"providers"),e.k0s(),e.EFF(34," array and following "),e.j41(35,"a",10),e.EFF(36,"standard NestJS provider practices"),e.k0s(),e.EFF(37,"."),e.k0s(),e.j41(38,"p"),e.EFF(39,"There are a few gotchas, that are common. One is putting a provider in an "),e.j41(40,"code"),e.EFF(41,"imports"),e.k0s(),e.EFF(42," array. If this is the case, the error will have the provider's name where "),e.j41(43,"code"),e.EFF(44,"<module>"),e.k0s(),e.EFF(45," should be."),e.k0s(),e.j41(46,"p"),e.EFF(47,"If you run across this error while developing, take a look at the module mentioned in the error message and look at its "),e.j41(48,"code"),e.EFF(49,"providers"),e.k0s(),e.EFF(50,". For each provider in the "),e.j41(51,"code"),e.EFF(52,"providers"),e.k0s(),e.EFF(53," array, make sure the module has access to all of the dependencies. Often times, "),e.j41(54,"code"),e.EFF(55,"providers"),e.k0s(),e.EFF(56,' are duplicated in a "Feature Module" and a "Root Module" which means Nest will try to instantiate the provider twice. More than likely, the module containing the '),e.j41(57,"code"),e.EFF(58,"<provider>"),e.k0s(),e.EFF(59,' being duplicated should be added in the "Root Module"\'s '),e.j41(60,"code"),e.EFF(61,"imports"),e.k0s(),e.EFF(62," array instead."),e.k0s(),e.j41(63,"p"),e.EFF(64,"If the "),e.j41(65,"code"),e.EFF(66,"<unknown_token>"),e.k0s(),e.EFF(67," above is "),e.j41(68,"code"),e.EFF(69,"dependency"),e.k0s(),e.EFF(70,", you might have a circular file import. This is different from the "),e.j41(71,"a",11),e.EFF(72,"circular dependency"),e.k0s(),e.EFF(73," below because instead of having providers depend on each other in their constructors, it just means that two files end up importing each other. A common case would be a module file declaring a token and importing a provider, and the provider import the token constant from the module file. If you are using barrel files, ensure that your barrel imports do not end up creating these circular imports as well."),e.k0s(),e.j41(74,"p"),e.EFF(75,"If the "),e.j41(76,"code"),e.EFF(77,"<unknown_token>"),e.k0s(),e.EFF(78," above is "),e.j41(79,"code"),e.EFF(80,"Object"),e.k0s(),e.EFF(81,", it means that you're injecting using an type/interface without a proper provider's token. To fix that, make sure that:"),e.k0s(),e.j41(82,"ol")(83,"li"),e.EFF(84,"you're importing the class reference or use a custom token with "),e.j41(85,"code"),e.EFF(86,"@Inject()"),e.k0s(),e.EFF(87," decorator. Read the "),e.j41(88,"a",12),e.EFF(89,"custom providers page"),e.k0s(),e.EFF(90,", and"),e.k0s(),e.j41(91,"li"),e.EFF(92,"for class-based providers, you're importing the concrete classes instead of only the type via "),e.j41(93,"a",13)(94,"code"),e.EFF(95,"import type ..."),e.k0s()(),e.EFF(96," syntax."),e.k0s()(),e.j41(97,"p"),e.EFF(98,"Also, make sure you didn't end up injecting the provider on itself because self-injections are not allowed in NestJS. When this happens, "),e.j41(99,"code"),e.EFF(100,"<unknown_token>"),e.k0s(),e.EFF(101," will likely be equal to "),e.j41(102,"code"),e.EFF(103,"<provider>"),e.k0s(),e.EFF(104,"."),e.k0s(),e.j41(105,"p"),e.nrm(106,"app-banner-devtools"),e.k0s(),e.j41(107,"p"),e.EFF(108,"If you are in a "),e.j41(109,"strong"),e.EFF(110,"monorepo setup"),e.k0s(),e.EFF(111,", you may face the same error as above but for core provider called "),e.j41(112,"code"),e.EFF(113,"ModuleRef"),e.k0s(),e.EFF(114," as a "),e.j41(115,"code"),e.EFF(116,"<unknown_token>"),e.k0s(),e.EFF(117,":"),e.k0s(),e.j41(118,"pre")(119,"code",9),e.EFF(120,"\nNest can't resolve dependencies of the <provider> (?).\nPlease make sure that the argument ModuleRef at index [<index>] is available in the <module> context.\n...\n"),e.k0s()(),e.j41(121,"p"),e.EFF(122,"This likely happens when your project end up loading two Node modules of the package "),e.j41(123,"code"),e.EFF(124,"@nestjs/core"),e.k0s(),e.EFF(125,", like this:"),e.k0s(),e.j41(126,"pre")(127,"code",14),e.EFF(128,"\n.\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 apps\n\u2502   \u2514\u2500\u2500 api\n\u2502       \u2514\u2500\u2500 node_modules\n\u2502           \u2514\u2500\u2500 @nestjs/bull\n\u2502               \u2514\u2500\u2500 node_modules\n\u2502                   \u2514\u2500\u2500 @nestjs/core\n\u2514\u2500\u2500 node_modules\n    \u251c\u2500\u2500 (other packages)\n    \u2514\u2500\u2500 @nestjs/core\n"),e.k0s()(),e.j41(129,"p"),e.EFF(130,"Solutions:"),e.k0s(),e.j41(131,"ul")(132,"li"),e.EFF(133,"For "),e.j41(134,"strong"),e.EFF(135,"Yarn"),e.k0s(),e.EFF(136," Workspaces, use the "),e.j41(137,"a",15),e.EFF(138,"nohoist feature"),e.k0s(),e.EFF(139," to prevent hoisting the package "),e.j41(140,"code"),e.EFF(141,"@nestjs/core"),e.k0s(),e.EFF(142,"."),e.k0s(),e.j41(143,"li"),e.EFF(144,"For "),e.j41(145,"strong"),e.EFF(146,"pnpm"),e.k0s(),e.EFF(147," Workspaces, set "),e.j41(148,"code"),e.EFF(149,"@nestjs/core"),e.k0s(),e.EFF(150," as a peerDependencies in your other module and "),e.j41(151,"code"),e.EFF(152),e.k0s(),e.EFF(153," in the app package.json where the module is imported. see: "),e.j41(154,"a",16),e.EFF(155,"dependenciesmetainjected"),e.k0s()()(),e.j41(156,"h4",17)(157,"span"),e.EFF(158,'"Circular dependency" error'),e.k0s()(),e.j41(159,"p"),e.EFF(160,"Occasionally you'll find it difficult to avoid "),e.j41(161,"a",18),e.EFF(162,"circular dependencies"),e.k0s(),e.EFF(163," in your application. You'll need to take some steps to help Nest resolve these. Errors that arise from circular dependencies look like this:"),e.k0s(),e.j41(164,"pre")(165,"code",9),e.EFF(166,'\nNest cannot create the <module> instance.\nThe module at index [<index>] of the <module> "imports" array is undefined.\n\nPotential causes:\n- A circular dependency between modules. Use forwardRef() to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency\n- The module at index [<index>] is of type "undefined". Check your import statements and the type of the module.\n\nScope [<module_import_chain>]\n# example chain AppModule -> FooModule\n'),e.k0s()(),e.j41(167,"p"),e.EFF(168,"Circular dependencies can arise from both providers depending on each other, or typescript files depending on each other for constants, such as exporting constants from a module file and importing them in a service file. In the latter case, it is advised to create a separate file for your constants. In the former case, please follow the guide on circular dependencies and make sure that both the modules "),e.j41(169,"strong"),e.EFF(170,"and"),e.k0s(),e.EFF(171," the providers are marked with "),e.j41(172,"code"),e.EFF(173,"forwardRef"),e.k0s(),e.EFF(174,"."),e.k0s(),e.j41(175,"h4",19)(176,"span"),e.EFF(177,"Debugging dependency errors"),e.k0s()(),e.j41(178,"p"),e.EFF(179,"Along with just manually verifying your dependencies are correct, as of Nest 8.1.0 you can set the "),e.j41(180,"code"),e.EFF(181,"NEST_DEBUG"),e.k0s(),e.EFF(182," environment variable to a string that resolves as truthy, and get extra logging information while Nest is resolving all of the dependencies for the application."),e.k0s(),e.j41(183,"figure"),e.nrm(184,"img",20),e.k0s(),e.j41(185,"p"),e.EFF(186,"In the above image, the string in yellow is the host class of the dependency being injected, the string in blue is the name of the injected dependency, or its injection token, and the string in purple is the module in which the dependency is being searched for. Using this, you can usually trace back the dependency resolution for what's happening and why you're getting dependency injection problems."),e.k0s(),e.j41(187,"h4",21)(188,"span"),e.EFF(189,'"File change detected" loops endlessly'),e.k0s()(),e.j41(190,"p"),e.EFF(191,"Windows users who are using TypeScript version 4.9 and up may encounter this problem.\nThis happens when you're trying to run your application in watch mode, e.g "),e.j41(192,"code"),e.EFF(193,"npm run start:dev"),e.k0s(),e.EFF(194," and see an endless loop of the log messages:"),e.k0s(),e.j41(195,"pre")(196,"code",9),e.EFF(197,"\nXX:XX:XX AM - File change detected. Starting incremental compilation...\nXX:XX:XX AM - Found 0 errors. Watching for file changes.\n"),e.k0s()(),e.j41(198,"p"),e.EFF(199,"When you're using the NestJS CLI to start your application in watch mode it is done by calling "),e.j41(200,"code"),e.EFF(201,"tsc --watch"),e.k0s(),e.EFF(202,", and as of version 4.9 of TypeScript, a "),e.j41(203,"a",22),e.EFF(204,"new strategy"),e.k0s(),e.EFF(205," for detecting file changes is used which is likely to be the cause of this problem.\nIn order to fix this problem, you need to add a setting to your tsconfig.json file after the "),e.j41(206,"code"),e.EFF(207,'"compilerOptions"'),e.k0s(),e.EFF(208," option as follows:"),e.k0s(),e.j41(209,"pre")(210,"code",9),e.EFF(211,'\n  "watchOptions": {\n    "watchFile": "fixedPollingInterval"\n  }\n'),e.k0s()(),e.j41(212,"p"),e.EFF(213,"This tells TypeScript to use the polling method for checking for file changes instead of file system events (the new default method), which can cause issues on some machines.\nYou can read more about the "),e.j41(214,"code"),e.EFF(215,'"watchFile"'),e.k0s(),e.EFF(216," option in "),e.j41(217,"a",23),e.EFF(218,"TypeScript documentation"),e.k0s(),e.EFF(219,"."),e.k0s()()),2&n&&(e.R7$(152),e.Lme('"dependenciesMeta": ',"{",'"other-module-name": ',"{",'"injected": true }}'))},dependencies:[i.a,m._,l.Wk],encapsulation:2,changeDetection:0})}return t})();var c=r(2469);let f=(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-global-prefix"]],features:[e.Vt3],decls:53,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/global-prefix.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","global-prefix"],[1,"language-typescript"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/pillarjs/path-to-regexp#parameters"]],template:function(n,s){1&n&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Global prefix"),e.k0s(),e.j41(7,"p"),e.EFF(8,"To set a prefix for "),e.j41(9,"strong"),e.EFF(10,"every route"),e.k0s(),e.EFF(11," registered in an HTTP application, use the "),e.j41(12,"code"),e.EFF(13,"setGlobalPrefix()"),e.k0s(),e.EFF(14," method of the "),e.j41(15,"code"),e.EFF(16,"INestApplication"),e.k0s(),e.EFF(17," instance."),e.k0s(),e.j41(18,"app-copy-button")(19,"pre")(20,"code",6),e.EFF(21,"\nconst app = await NestFactory.create(AppModule);\napp.setGlobalPrefix('v1');\n"),e.k0s()()(),e.j41(22,"p"),e.EFF(23,"You can exclude routes from the global prefix using the following construction:"),e.k0s(),e.j41(24,"app-copy-button")(25,"pre")(26,"code",6),e.EFF(27,"\napp.setGlobalPrefix('v1', {\n  exclude: [{ path: 'health', method: RequestMethod.GET }],\n});\n"),e.k0s()()(),e.j41(28,"p"),e.EFF(29,"Alternatively, you can specify route as a string (it will apply to every request method):"),e.k0s(),e.j41(30,"app-copy-button")(31,"pre")(32,"code",6),e.EFF(33,"\napp.setGlobalPrefix('v1', { exclude: ['cats'] });\n"),e.k0s()()(),e.j41(34,"blockquote",7)(35,"strong"),e.EFF(36,"Hint"),e.k0s(),e.EFF(37," The "),e.j41(38,"code"),e.EFF(39,"path"),e.k0s(),e.EFF(40," property supports wildcard parameters using the "),e.j41(41,"a",8),e.EFF(42,"path-to-regexp"),e.k0s(),e.EFF(43," package. Note: this does not accept wildcard asterisks "),e.j41(44,"code"),e.EFF(45,"*"),e.k0s(),e.EFF(46,". Instead, you must use parameters (e.g., "),e.j41(47,"code"),e.EFF(48,"(.*)"),e.k0s(),e.EFF(49,", "),e.j41(50,"code"),e.EFF(51,":splat*"),e.k0s(),e.EFF(52,").\n"),e.k0s()())},dependencies:[c.z],encapsulation:2,changeDetection:0})}return t})();var d=r(5119);let k=(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-http-adapter"]],features:[e.Vt3],decls:128,vars:4,consts:[["contentReference",""],["app8e9368b927a20490bd1f4bf3e12194a54a409846",""],["appde795aed756161fbff47db3f523256deb5d1c8e7",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/http-adapter.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","http-adapter"],["appAnchor","","id","outside-application-context-strategy"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],["appAnchor","","id","as-injectable"],[1,"info"],["appAnchor","","id","listening-event"]],template:function(n,s){if(1&n&&(e.j41(0,"div",3,0)(2,"div",4)(3,"a",5),e.nrm(4,"i",6),e.k0s()(),e.j41(5,"h3",7),e.EFF(6,"HTTP adapter"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Occasionally, you may want to access the underlying HTTP server, either within the Nest application context or from the outside."),e.k0s(),e.j41(9,"p"),e.EFF(10,"Every native (platform-specific) HTTP server/library (e.g., Express and Fastify) instance is wrapped in an "),e.j41(11,"strong"),e.EFF(12,"adapter"),e.k0s(),e.EFF(13,". The adapter is registered as a globally available provider that can be retrieved from the application context, as well as injected into other providers."),e.k0s(),e.j41(14,"h4",8)(15,"span"),e.EFF(16,"Outside application context strategy"),e.k0s()(),e.j41(17,"p"),e.EFF(18,"To get a reference to the "),e.j41(19,"code"),e.EFF(20,"HttpAdapter"),e.k0s(),e.EFF(21," from outside of the application context, call the "),e.j41(22,"code"),e.EFF(23,"getHttpAdapter()"),e.k0s(),e.EFF(24," method."),e.k0s(),e.j41(25,"app-copy-button",9)(26,"span",10),e.nrm(27,"app-tabs",null,1),e.k0s(),e.j41(29,"pre")(30,"code",11),e.EFF(31,"\nconst app = await NestFactory.create(AppModule);\nconst httpAdapter = app.getHttpAdapter();\n"),e.k0s()()(),e.j41(32,"h4",12)(33,"span"),e.EFF(34,"As injectable"),e.k0s()(),e.j41(35,"p"),e.EFF(36,"To get a reference to the "),e.j41(37,"code"),e.EFF(38,"HttpAdapterHost"),e.k0s(),e.EFF(39," from within the application context, inject it using the same technique as any other existing provider (e.g., using constructor injection)."),e.k0s(),e.j41(40,"app-copy-button",9)(41,"span",10),e.nrm(42,"app-tabs",null,2),e.k0s(),e.j41(44,"pre")(45,"code",11),e.EFF(46,"\nexport class CatsService {\n  constructor(private adapterHost: HttpAdapterHost) {}\n}\n"),e.k0s()(),e.j41(47,"pre")(48,"code",11),e.EFF(49,"\n@Dependencies(HttpAdapterHost)\nexport class CatsService {\n  constructor(adapterHost) {\n    this.adapterHost = adapterHost;\n  }\n}\n"),e.k0s()()(),e.j41(50,"blockquote",13)(51,"strong"),e.EFF(52,"Hint"),e.k0s(),e.EFF(53," The "),e.j41(54,"code"),e.EFF(55,"HttpAdapterHost"),e.k0s(),e.EFF(56," is imported from the "),e.j41(57,"code"),e.EFF(58,"@nestjs/core"),e.k0s(),e.EFF(59," package.\n"),e.k0s(),e.j41(60,"p"),e.EFF(61,"The "),e.j41(62,"code"),e.EFF(63,"HttpAdapterHost"),e.k0s(),e.EFF(64," is "),e.j41(65,"strong"),e.EFF(66,"not"),e.k0s(),e.EFF(67," an actual "),e.j41(68,"code"),e.EFF(69,"HttpAdapter"),e.k0s(),e.EFF(70,". To get the actual "),e.j41(71,"code"),e.EFF(72,"HttpAdapter"),e.k0s(),e.EFF(73," instance, simply access the "),e.j41(74,"code"),e.EFF(75,"httpAdapter"),e.k0s(),e.EFF(76," property."),e.k0s(),e.j41(77,"app-copy-button")(78,"pre")(79,"code",11),e.EFF(80,"\nconst adapterHost = app.get(HttpAdapterHost);\nconst httpAdapter = adapterHost.httpAdapter;\n"),e.k0s()()(),e.j41(81,"p"),e.EFF(82,"The "),e.j41(83,"code"),e.EFF(84,"httpAdapter"),e.k0s(),e.EFF(85," is the actual instance of the HTTP adapter used by the underlying framework. It is an instance of either "),e.j41(86,"code"),e.EFF(87,"ExpressAdapter"),e.k0s(),e.EFF(88," or "),e.j41(89,"code"),e.EFF(90,"FastifyAdapter"),e.k0s(),e.EFF(91," (both classes extend "),e.j41(92,"code"),e.EFF(93,"AbstractHttpAdapter"),e.k0s(),e.EFF(94,")."),e.k0s(),e.j41(95,"p"),e.EFF(96,"The adapter object exposes several useful methods to interact with the HTTP server. However, if you want to access the library instance (e.g., the Express instance) directly, call the "),e.j41(97,"code"),e.EFF(98,"getInstance()"),e.k0s(),e.EFF(99," method."),e.k0s(),e.j41(100,"app-copy-button")(101,"pre")(102,"code",11),e.EFF(103,"\nconst instance = httpAdapter.getInstance();\n"),e.k0s()()(),e.j41(104,"h4",14)(105,"span"),e.EFF(106,"Listening event"),e.k0s()(),e.j41(107,"p"),e.EFF(108,"To execute an action when the server begins listening for incoming requests, you can subscribe to the "),e.j41(109,"code"),e.EFF(110,"listen$"),e.k0s(),e.EFF(111," stream, as demonstrated below:"),e.k0s(),e.j41(112,"app-copy-button")(113,"pre")(114,"code",11),e.EFF(115,"\nthis.httpAdapterHost.listen$.subscribe(() =>\n  console.log('HTTP server is listening'),\n);\n"),e.k0s()()(),e.j41(116,"p"),e.EFF(117,"Additionally, the "),e.j41(118,"code"),e.EFF(119,"HttpAdapterHost"),e.k0s(),e.EFF(120," provides a "),e.j41(121,"code"),e.EFF(122,"listening"),e.k0s(),e.EFF(123," boolean property that indicates whether the server is currently active and listening:"),e.k0s(),e.j41(124,"app-copy-button")(125,"pre")(126,"code",11),e.EFF(127,"\nif (this.httpAdapterHost.listening) {\n  console.log('HTTP server is listening');\n}\n"),e.k0s()()()()),2&n){const p=e.sdS(43);e.R7$(44),e.AVh("hide",p.isJsActive),e.R7$(3),e.AVh("hide",!p.isJsActive)}},dependencies:[d.O,i.a,c.z],encapsulation:2,changeDetection:0})}return t})(),g=(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-hybrid-application"]],features:[e.Vt3],decls:95,vars:4,consts:[["contentReference",""],["appc18379c7dcd443fcf50789e62f6795daa018a2ec",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/hybrid-application.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","hybrid-application"],[1,"language-typescript"],[1,"info"],[1,"with-heading"],[1,"filename"],["appAnchor","","id","sharing-configuration"]],template:function(n,s){if(1&n&&(e.j41(0,"div",2,0)(2,"div",3)(3,"a",4),e.nrm(4,"i",5),e.k0s()(),e.j41(5,"h3",6),e.EFF(6,"Hybrid application"),e.k0s(),e.j41(7,"p"),e.EFF(8,"A hybrid application is one that listens for requests from two or more different sources. This can combine an HTTP server with a microservice listener or even just multiple different microservice listeners. The default "),e.j41(9,"code"),e.EFF(10,"createMicroservice"),e.k0s(),e.EFF(11," method does not allow for multiple servers so in this case each microservice must be created and started manually. In order to do this, the "),e.j41(12,"code"),e.EFF(13,"INestApplication"),e.k0s(),e.EFF(14," instance can be connected with "),e.j41(15,"code"),e.EFF(16,"INestMicroservice"),e.k0s(),e.EFF(17," instances through the "),e.j41(18,"code"),e.EFF(19,"connectMicroservice()"),e.k0s(),e.EFF(20," method."),e.k0s(),e.j41(21,"app-copy-button")(22,"pre")(23,"code",7),e.EFF(24,"\nconst app = await NestFactory.create(AppModule);\nconst microservice = app.connectMicroservice<MicroserviceOptions>({\n  transport: Transport.TCP,\n});\n\nawait app.startAllMicroservices();\nawait app.listen(3001);\n"),e.k0s()()(),e.j41(25,"blockquote",8)(26,"strong"),e.EFF(27,"Hint"),e.k0s(),e.EFF(28," the "),e.j41(29,"code"),e.EFF(30,"app.listen(port)"),e.k0s(),e.EFF(31," method starts an HTTP server on the specified address. If your application does not handle HTTP requests then you should use the "),e.j41(32,"code"),e.EFF(33,"app.init()"),e.k0s(),e.EFF(34," method instead.\n"),e.k0s(),e.j41(35,"p"),e.EFF(36,"To connect multiple microservice instances, issue the call to "),e.j41(37,"code"),e.EFF(38,"connectMicroservice()"),e.k0s(),e.EFF(39," for each microservice:"),e.k0s(),e.j41(40,"app-copy-button")(41,"pre")(42,"code",7),e.EFF(43,"\nconst app = await NestFactory.create(AppModule);\n// microservice #1\nconst microserviceTcp = app.connectMicroservice<MicroserviceOptions>({\n  transport: Transport.TCP,\n  options: {\n    port: 3001,\n  },\n});\n// microservice #2\nconst microserviceRedis = app.connectMicroservice<MicroserviceOptions>({\n  transport: Transport.REDIS,\n  options: {\n    host: 'localhost',\n    port: 6379,\n  },\n});\n\nawait app.startAllMicroservices();\nawait app.listen(3001);\n"),e.k0s()()(),e.j41(44,"p"),e.EFF(45,"To bind "),e.j41(46,"code"),e.EFF(47,"@MessagePattern()"),e.k0s(),e.EFF(48," to only one transport strategy (for example, MQTT) in a hybrid application with multiple microservices, we can pass the second argument of type "),e.j41(49,"code"),e.EFF(50,"Transport"),e.k0s(),e.EFF(51," which is an enum with all the built-in transport strategies defined."),e.k0s(),e.j41(52,"app-copy-button",9)(53,"span",10),e.nrm(54,"app-tabs",null,1),e.k0s(),e.j41(56,"pre")(57,"code",7),e.EFF(58,"\n@MessagePattern('time.us.*', Transport.NATS)\ngetDate(@Payload() data: number[], @Ctx() context: NatsContext) {\n  console.log(`Subject: ${context.getSubject()}`); // e.g. \"time.us.east\"\n  return new Date().toLocaleTimeString(...);\n}\n@MessagePattern({ cmd: 'time.us' }, Transport.TCP)\ngetTCPDate(@Payload() data: number[]) {\n  return new Date().toLocaleTimeString(...);\n}\n"),e.k0s()(),e.j41(59,"pre")(60,"code",7),e.EFF(61,"\n@Bind(Payload(), Ctx())\n@MessagePattern('time.us.*', Transport.NATS)\ngetDate(data, context) {\n  console.log(`Subject: ${context.getSubject()}`); // e.g. \"time.us.east\"\n  return new Date().toLocaleTimeString(...);\n}\n@Bind(Payload(), Ctx())\n@MessagePattern({ cmd: 'time.us' }, Transport.TCP)\ngetTCPDate(data, context) {\n  return new Date().toLocaleTimeString(...);\n}\n"),e.k0s()()(),e.j41(62,"blockquote",8)(63,"strong"),e.EFF(64,"Hint"),e.k0s(),e.j41(65,"code"),e.EFF(66,"@Payload()"),e.k0s(),e.EFF(67,", "),e.j41(68,"code"),e.EFF(69,"@Ctx()"),e.k0s(),e.EFF(70,", "),e.j41(71,"code"),e.EFF(72,"Transport"),e.k0s(),e.EFF(73," and "),e.j41(74,"code"),e.EFF(75,"NatsContext"),e.k0s(),e.EFF(76," are imported from "),e.j41(77,"code"),e.EFF(78,"@nestjs/microservices"),e.k0s(),e.EFF(79,".\n"),e.k0s(),e.j41(80,"h4",11)(81,"span"),e.EFF(82,"Sharing configuration"),e.k0s()(),e.j41(83,"p"),e.EFF(84,"By default a hybrid application will not inherit global pipes, interceptors, guards and filters configured for the main (HTTP-based) application.\nTo inherit these configuration properties from the main application, set the "),e.j41(85,"code"),e.EFF(86,"inheritAppConfig"),e.k0s(),e.EFF(87," property in the second argument (an optional options object) of the "),e.j41(88,"code"),e.EFF(89,"connectMicroservice()"),e.k0s(),e.EFF(90," call, as follow:"),e.k0s(),e.j41(91,"app-copy-button")(92,"pre")(93,"code",7),e.EFF(94,"\nconst microservice = app.connectMicroservice<MicroserviceOptions>(\n  {\n    transport: Transport.TCP,\n  },\n  { inheritAppConfig: true },\n);\n"),e.k0s()()()()),2&n){const p=e.sdS(55);e.R7$(56),e.AVh("hide",p.isJsActive),e.R7$(3),e.AVh("hide",!p.isJsActive)}},dependencies:[d.O,i.a,c.z],encapsulation:2,changeDetection:0})}return t})(),y=(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-keep-alive-connections"]],features:[e.Vt3],decls:39,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/keep-alive-connections.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","keep-alive-connections"],[1,"warning"],["appAnchor","","id","usage"],[1,"language-typescript"]],template:function(n,s){1&n&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Keep alive connections"),e.k0s(),e.j41(7,"p"),e.EFF(8,"By default, the HTTP adapters of NestJS will wait until the response is finished before closing the application. But sometimes, this behavior is not desired, or unexpected. There might be some requests that use "),e.j41(9,"code"),e.EFF(10,"Connection: Keep-Alive"),e.k0s(),e.EFF(11," headers that live for a long time."),e.k0s(),e.j41(12,"p"),e.EFF(13,"For these scenarios where you always want your application to exit without waiting for requests to end, you can enable the "),e.j41(14,"code"),e.EFF(15,"forceCloseConnections"),e.k0s(),e.EFF(16," option when creating your NestJS application."),e.k0s(),e.j41(17,"blockquote",6)(18,"strong"),e.EFF(19,"Tip"),e.k0s(),e.EFF(20," Most users will not need to enable this option. But the symptom of needing this option is that your application will not exit when you expect it to. Usually when "),e.j41(21,"code"),e.EFF(22,"app.enableShutdownHooks()"),e.k0s(),e.EFF(23," is enabled and you notice that the application is not restarting/exiting. Most likely while running the NestJS application during development with "),e.j41(24,"code"),e.EFF(25,"--watch"),e.k0s(),e.EFF(26,".\n"),e.k0s(),e.j41(27,"h4",7)(28,"span"),e.EFF(29,"Usage"),e.k0s()(),e.j41(30,"p"),e.EFF(31,"In your "),e.j41(32,"code"),e.EFF(33,"main.ts"),e.k0s(),e.EFF(34," file, enable the option when creating your NestJS application:"),e.k0s(),e.j41(35,"app-copy-button")(36,"pre")(37,"code",8),e.EFF(38,"\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    forceCloseConnections: true,\n  });\n  await app.listen(process.env.PORT ?? 3000);\n}\n\nbootstrap();\n"),e.k0s()()()())},dependencies:[i.a,c.z],encapsulation:2,changeDetection:0})}return t})(),j=(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-multiple-servers"]],features:[e.Vt3],decls:78,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/multiple-servers.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","https"],[1,"language-typescript"],["appAnchor","","id","multiple-simultaneous-servers"],[1,"info"],[1,""],["routerLink","/graphql/subscriptions"]],template:function(n,s){1&n&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"HTTPS"),e.k0s(),e.j41(7,"p"),e.EFF(8,"To create an application that uses the HTTPS protocol, set the "),e.j41(9,"code"),e.EFF(10,"httpsOptions"),e.k0s(),e.EFF(11," property in the options object passed to the "),e.j41(12,"code"),e.EFF(13,"create()"),e.k0s(),e.EFF(14," method of the "),e.j41(15,"code"),e.EFF(16,"NestFactory"),e.k0s(),e.EFF(17," class:"),e.k0s(),e.j41(18,"app-copy-button")(19,"pre")(20,"code",6),e.EFF(21,"\nconst httpsOptions = {\n  key: fs.readFileSync('./secrets/private-key.pem'),\n  cert: fs.readFileSync('./secrets/public-certificate.pem'),\n};\nconst app = await NestFactory.create(AppModule, {\n  httpsOptions,\n});\nawait app.listen(process.env.PORT ?? 3000);\n"),e.k0s()()(),e.j41(22,"p"),e.EFF(23,"If you use the "),e.j41(24,"code"),e.EFF(25,"FastifyAdapter"),e.k0s(),e.EFF(26,", create the application as follows:"),e.k0s(),e.j41(27,"app-copy-button")(28,"pre")(29,"code",6),e.EFF(30,"\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter({ https: httpsOptions }),\n);\n"),e.k0s()()(),e.j41(31,"h4",7)(32,"span"),e.EFF(33,"Multiple simultaneous servers"),e.k0s()(),e.j41(34,"p"),e.EFF(35,"The following recipe shows how to instantiate a Nest application that listens on multiple ports (for example, on a non-HTTPS port and an HTTPS port) simultaneously."),e.k0s(),e.j41(36,"app-copy-button")(37,"pre")(38,"code",6),e.EFF(39,"\nconst httpsOptions = {\n  key: fs.readFileSync('./secrets/private-key.pem'),\n  cert: fs.readFileSync('./secrets/public-certificate.pem'),\n};\n\nconst server = express();\nconst app = await NestFactory.create(AppModule, new ExpressAdapter(server));\nawait app.init();\n\nconst httpServer = http.createServer(server).listen(3000);\nconst httpsServer = https.createServer(httpsOptions, server).listen(443);\n"),e.k0s()()(),e.j41(40,"p"),e.EFF(41,"Because we called "),e.j41(42,"code"),e.EFF(43,"http.createServer"),e.k0s(),e.EFF(44," / "),e.j41(45,"code"),e.EFF(46,"https.createServer"),e.k0s(),e.EFF(47," ourselves, NestJS doesn't close them when calling "),e.j41(48,"code"),e.EFF(49,"app.close"),e.k0s(),e.EFF(50," / on termination signal. We need to do this ourselves:"),e.k0s(),e.j41(51,"app-copy-button")(52,"pre")(53,"code",6),e.EFF(54,"\n@Injectable()\nexport class ShutdownObserver implements OnApplicationShutdown {\n  private httpServers: http.Server[] = [];\n\n  public addHttpServer(server: http.Server): void {\n    this.httpServers.push(server);\n  }\n\n  public async onApplicationShutdown(): Promise<void> {\n    await Promise.all(\n      this.httpServers.map(\n        (server) =>\n          new Promise((resolve, reject) => {\n            server.close((error) => {\n              if (error) {\n                reject(error);\n              } else {\n                resolve(null);\n              }\n            });\n          }),\n      ),\n    );\n  }\n}\n\nconst shutdownObserver = app.get(ShutdownObserver);\nshutdownObserver.addHttpServer(httpServer);\nshutdownObserver.addHttpServer(httpsServer);\n"),e.k0s()()(),e.j41(55,"blockquote",8)(56,"strong"),e.EFF(57,"Hint"),e.k0s(),e.EFF(58," The "),e.j41(59,"code"),e.EFF(60,"ExpressAdapter"),e.k0s(),e.EFF(61," is imported from the "),e.j41(62,"code"),e.EFF(63,"@nestjs/platform-express"),e.k0s(),e.EFF(64," package. The "),e.j41(65,"code"),e.EFF(66,"http"),e.k0s(),e.EFF(67," and "),e.j41(68,"code"),e.EFF(69,"https"),e.k0s(),e.EFF(70," packages are native Node.js packages.\n"),e.k0s(),e.j41(71,"blockquote",9)(72,"strong"),e.EFF(73,"Warning"),e.k0s(),e.EFF(74," This recipe does not work with "),e.j41(75,"a",10),e.EFF(76,"GraphQL Subscriptions"),e.k0s(),e.EFF(77,".\n"),e.k0s()())},dependencies:[i.a,c.z,l.Wk],encapsulation:2,changeDetection:0})}return t})(),w=(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-raw-body"]],features:[e.Vt3],decls:167,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/raw-body.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","raw-body"],[1,"warning"],["appAnchor","","id","use-with-express"],[1,"language-typescript"],["appAnchor","","id","registering-a-different-parser"],["appAnchor","","id","body-parser-size-limit"],["appAnchor","","id","use-with-fastify"],["appAnchor","","id","registering-a-different-parser-1"],["appAnchor","","id","body-parser-size-limit-1"]],template:function(n,s){1&n&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Raw body"),e.k0s(),e.j41(7,"p"),e.EFF(8,"One of the most common use-case for having access to the raw request body is performing webhook signature verifications. Usually to perform webhook signature validations the unserialized request body is required to calculate an HMAC hash."),e.k0s(),e.j41(9,"blockquote",6)(10,"strong"),e.EFF(11,"Warning"),e.k0s(),e.EFF(12," This feature can be used only if the built-in global body parser middleware is enabled, ie., you must not pass "),e.j41(13,"code"),e.EFF(14,"bodyParser: false"),e.k0s(),e.EFF(15," when creating the app.\n"),e.k0s(),e.j41(16,"h4",7)(17,"span"),e.EFF(18,"Use with Express"),e.k0s()(),e.j41(19,"p"),e.EFF(20,"First enable the option when creating your Nest Express application:"),e.k0s(),e.j41(21,"app-copy-button")(22,"pre")(23,"code",8),e.EFF(24,"\nimport { NestFactory } from '@nestjs/core';\nimport type { NestExpressApplication } from '@nestjs/platform-express';\nimport { AppModule } from './app.module';\n\n// in the \"bootstrap\" function\nconst app = await NestFactory.create<NestExpressApplication>(AppModule, {\n  rawBody: true,\n});\nawait app.listen(process.env.PORT ?? 3000);\n"),e.k0s()()(),e.j41(25,"p"),e.EFF(26,"To access the raw request body in a controller, a convenience interface "),e.j41(27,"code"),e.EFF(28,"RawBodyRequest"),e.k0s(),e.EFF(29," is provided to expose a "),e.j41(30,"code"),e.EFF(31,"rawBody"),e.k0s(),e.EFF(32," field on the request: use the interface "),e.j41(33,"code"),e.EFF(34,"RawBodyRequest"),e.k0s(),e.EFF(35," type:"),e.k0s(),e.j41(36,"app-copy-button")(37,"pre")(38,"code",8),e.EFF(39,"\nimport { Controller, Post, RawBodyRequest, Req } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Controller('cats')\nclass CatsController {\n  @Post()\n  create(@Req() req: RawBodyRequest<Request>) {\n    const raw = req.rawBody; // returns a `Buffer`.\n  }\n}\n"),e.k0s()()(),e.j41(40,"h4",9)(41,"span"),e.EFF(42,"Registering a different parser"),e.k0s()(),e.j41(43,"p"),e.EFF(44,"By default, only "),e.j41(45,"code"),e.EFF(46,"json"),e.k0s(),e.EFF(47," and "),e.j41(48,"code"),e.EFF(49,"urlencoded"),e.k0s(),e.EFF(50," parsers are registered. If you want to register a different parser on the fly, you will need to do so explicitly."),e.k0s(),e.j41(51,"p"),e.EFF(52,"For example, to register a "),e.j41(53,"code"),e.EFF(54,"text"),e.k0s(),e.EFF(55," parser, you can use the following code:"),e.k0s(),e.j41(56,"app-copy-button")(57,"pre")(58,"code",8),e.EFF(59,"\napp.useBodyParser('text');\n"),e.k0s()()(),e.j41(60,"blockquote",6)(61,"strong"),e.EFF(62,"Warning"),e.k0s(),e.EFF(63," Ensure that you are providing the correct application type to the "),e.j41(64,"code"),e.EFF(65,"NestFactory.create"),e.k0s(),e.EFF(66," call. For Express applications, the correct type is "),e.j41(67,"code"),e.EFF(68,"NestExpressApplication"),e.k0s(),e.EFF(69,". Otherwise the "),e.j41(70,"code"),e.EFF(71,".useBodyParser"),e.k0s(),e.EFF(72," method will not be found.\n"),e.k0s(),e.j41(73,"h4",10)(74,"span"),e.EFF(75,"Body parser size limit"),e.k0s()(),e.j41(76,"p"),e.EFF(77,"If your application needs to parse a body larger than the default "),e.j41(78,"code"),e.EFF(79,"100kb"),e.k0s(),e.EFF(80," of Express, use the following:"),e.k0s(),e.j41(81,"app-copy-button")(82,"pre")(83,"code",8),e.EFF(84,"\napp.useBodyParser('json', { limit: '10mb' });\n"),e.k0s()()(),e.j41(85,"p"),e.EFF(86,"The "),e.j41(87,"code"),e.EFF(88,".useBodyParser"),e.k0s(),e.EFF(89," method will respect the "),e.j41(90,"code"),e.EFF(91,"rawBody"),e.k0s(),e.EFF(92," option that is passed in the application options."),e.k0s(),e.j41(93,"h4",11)(94,"span"),e.EFF(95,"Use with Fastify"),e.k0s()(),e.j41(96,"p"),e.EFF(97,"First enable the option when creating your Nest Fastify application:"),e.k0s(),e.j41(98,"app-copy-button")(99,"pre")(100,"code",8),e.EFF(101,"\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\n\n// in the \"bootstrap\" function\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter(),\n  {\n    rawBody: true,\n  },\n);\nawait app.listen(process.env.PORT ?? 3000);\n"),e.k0s()()(),e.j41(102,"p"),e.EFF(103,"To access the raw request body in a controller, a convenience interface "),e.j41(104,"code"),e.EFF(105,"RawBodyRequest"),e.k0s(),e.EFF(106," is provided to expose a "),e.j41(107,"code"),e.EFF(108,"rawBody"),e.k0s(),e.EFF(109," field on the request: use the interface "),e.j41(110,"code"),e.EFF(111,"RawBodyRequest"),e.k0s(),e.EFF(112," type:"),e.k0s(),e.j41(113,"app-copy-button")(114,"pre")(115,"code",8),e.EFF(116,"\nimport { Controller, Post, RawBodyRequest, Req } from '@nestjs/common';\nimport { FastifyRequest } from 'fastify';\n\n@Controller('cats')\nclass CatsController {\n  @Post()\n  create(@Req() req: RawBodyRequest<FastifyRequest>) {\n    const raw = req.rawBody; // returns a `Buffer`.\n  }\n}\n"),e.k0s()()(),e.j41(117,"h4",12)(118,"span"),e.EFF(119,"Registering a different parser"),e.k0s()(),e.j41(120,"p"),e.EFF(121,"By default, only "),e.j41(122,"code"),e.EFF(123,"application/json"),e.k0s(),e.EFF(124," and "),e.j41(125,"code"),e.EFF(126,"application/x-www-form-urlencoded"),e.k0s(),e.EFF(127," parsers are registered. If you want to register a different parser on the fly, you will need to do so explicitly."),e.k0s(),e.j41(128,"p"),e.EFF(129,"For example, to register a "),e.j41(130,"code"),e.EFF(131,"text/plain"),e.k0s(),e.EFF(132," parser, you can use the following code:"),e.k0s(),e.j41(133,"app-copy-button")(134,"pre")(135,"code",8),e.EFF(136,"\napp.useBodyParser('text/plain');\n"),e.k0s()()(),e.j41(137,"blockquote",6)(138,"strong"),e.EFF(139,"Warning"),e.k0s(),e.EFF(140," Ensure that you are providing the correct application type to the "),e.j41(141,"code"),e.EFF(142,"NestFactory.create"),e.k0s(),e.EFF(143," call. For Fastify applications, the correct type is "),e.j41(144,"code"),e.EFF(145,"NestFastifyApplication"),e.k0s(),e.EFF(146,". Otherwise the "),e.j41(147,"code"),e.EFF(148,".useBodyParser"),e.k0s(),e.EFF(149," method will not be found.\n"),e.k0s(),e.j41(150,"h4",13)(151,"span"),e.EFF(152,"Body parser size limit"),e.k0s()(),e.j41(153,"p"),e.EFF(154,"If your application needs to parse a body larger than the default 1MiB of Fastify, use the following:"),e.k0s(),e.j41(155,"app-copy-button")(156,"pre")(157,"code",8),e.EFF(158,"\nconst bodyLimit = 10_485_760; // 10MiB\napp.useBodyParser('application/json', { bodyLimit });\n"),e.k0s()()(),e.j41(159,"p"),e.EFF(160,"The "),e.j41(161,"code"),e.EFF(162,".useBodyParser"),e.k0s(),e.EFF(163," method will respect the "),e.j41(164,"code"),e.EFF(165,"rawBody"),e.k0s(),e.EFF(166," option that is passed in the application options."),e.k0s()())},dependencies:[i.a,c.z],encapsulation:2,changeDetection:0})}return t})(),v=(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-request-lifecycle"]],features:[e.Vt3],decls:169,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/request-lifecycle.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","request-lifecycle"],["appAnchor","","id","middleware"],["routerLink","/middleware"],["appAnchor","","id","guards"],[1,"language-typescript"],[1,"info"],["appAnchor","","id","interceptors"],["rel","nofollow","target","_blank","href","https://github.com/ReactiveX/rxjs"],["appAnchor","","id","pipes"],["appAnchor","","id","filters"],["appAnchor","","id","summary"]],template:function(n,s){1&n&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Request lifecycle"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Nest applications handle requests and produce responses in a sequence we refer to as the "),e.j41(9,"strong"),e.EFF(10,"request lifecycle"),e.k0s(),e.EFF(11,". With the use of middleware, pipes, guards, and interceptors, it can be challenging to track down where a particular piece of code executes during the request lifecycle, especially as global, controller level, and route level components come into play. In general, a request flows through middleware to guards, then to interceptors, then to pipes and finally back to interceptors on the return path (as the response is generated)."),e.k0s(),e.j41(12,"h4",6)(13,"span"),e.EFF(14,"Middleware"),e.k0s()(),e.j41(15,"p"),e.EFF(16,"Middleware is executed in a particular sequence. First, Nest runs globally bound middleware (such as middleware bound with "),e.j41(17,"code"),e.EFF(18,"app.use"),e.k0s(),e.EFF(19,") and then it runs "),e.j41(20,"a",7),e.EFF(21,"module bound middleware"),e.k0s(),e.EFF(22,", which are determined on paths. Middleware are run sequentially in the order they are bound, similar to the way middleware in Express works. In the case of middleware bound across different modules, the middleware bound to the root module will run first, and then middleware will run in the order that the modules are added to the imports array."),e.k0s(),e.j41(23,"h4",8)(24,"span"),e.EFF(25,"Guards"),e.k0s()(),e.j41(26,"p"),e.EFF(27,"Guard execution starts with global guards, then proceeds to controller guards, and finally to route guards. As with middleware, guards run in the order in which they are bound. For example:"),e.k0s(),e.j41(28,"app-copy-button")(29,"pre")(30,"code",9),e.EFF(31,"\n@UseGuards(Guard1, Guard2)\n@Controller('cats')\nexport class CatsController {\n  constructor(private catsService: CatsService) {}\n\n  @UseGuards(Guard3)\n  @Get()\n  getCats(): Cats[] {\n    return this.catsService.getCats();\n  }\n}\n"),e.k0s()()(),e.j41(32,"p")(33,"code"),e.EFF(34,"Guard1"),e.k0s(),e.EFF(35," will execute before "),e.j41(36,"code"),e.EFF(37,"Guard2"),e.k0s(),e.EFF(38," and both will execute before "),e.j41(39,"code"),e.EFF(40,"Guard3"),e.k0s(),e.EFF(41,"."),e.k0s(),e.j41(42,"blockquote",10)(43,"strong"),e.EFF(44,"Hint"),e.k0s(),e.EFF(45," When speaking about globally bound vs controller or locally bound, the difference is where the guard (or other component is bound). If you are using "),e.j41(46,"code"),e.EFF(47,"app.useGlobalGuard()"),e.k0s(),e.EFF(48," or providing the component via a module, it is globally bound. Otherwise, it is bound to a controller if the decorator precedes a controller class, or to a route if the decorator precedes a route declaration.\n"),e.k0s(),e.j41(49,"h4",11)(50,"span"),e.EFF(51,"Interceptors"),e.k0s()(),e.j41(52,"p"),e.EFF(53,"Interceptors, for the most part, follow the same pattern as guards, with one catch: as interceptors return "),e.j41(54,"a",12),e.EFF(55,"RxJS Observables"),e.k0s(),e.EFF(56,", the observables will be resolved in a first in last out manner. So inbound requests will go through the standard global, controller, route level resolution, but the response side of the request (i.e., after returning from the controller method handler) will be resolved from route to controller to global. Also, any errors thrown by pipes, controllers, or services can be read in the "),e.j41(57,"code"),e.EFF(58,"catchError"),e.k0s(),e.EFF(59," operator of an interceptor."),e.k0s(),e.j41(60,"h4",13)(61,"span"),e.EFF(62,"Pipes"),e.k0s()(),e.j41(63,"p"),e.EFF(64,"Pipes follow the standard global to controller to route bound sequence, with the same first in first out in regards to the "),e.j41(65,"code"),e.EFF(66,"@UsePipes()"),e.k0s(),e.EFF(67," parameters. However, at a route parameter level, if you have multiple pipes running, they will run in the order of the last parameter with a pipe to the first. This also applies to the route level and controller level pipes. For example, if we have the following controller:"),e.k0s(),e.j41(68,"app-copy-button")(69,"pre")(70,"code",9),e.EFF(71,"\n@UsePipes(GeneralValidationPipe)\n@Controller('cats')\nexport class CatsController {\n  constructor(private catsService: CatsService) {}\n\n  @UsePipes(RouteSpecificPipe)\n  @Patch(':id')\n  updateCat(\n    @Body() body: UpdateCatDTO,\n    @Param() params: UpdateCatParams,\n    @Query() query: UpdateCatQuery,\n  ) {\n    return this.catsService.updateCat(body, params, query);\n  }\n}\n"),e.k0s()()(),e.j41(72,"p"),e.EFF(73,"then the "),e.j41(74,"code"),e.EFF(75,"GeneralValidationPipe"),e.k0s(),e.EFF(76," will run for the "),e.j41(77,"code"),e.EFF(78,"query"),e.k0s(),e.EFF(79,", then the "),e.j41(80,"code"),e.EFF(81,"params"),e.k0s(),e.EFF(82,", and then the "),e.j41(83,"code"),e.EFF(84,"body"),e.k0s(),e.EFF(85," objects before moving on to the "),e.j41(86,"code"),e.EFF(87,"RouteSpecificPipe"),e.k0s(),e.EFF(88,", which follows the same order. If any parameter-specific pipes were in place, they would run (again, from the last to first parameter) after the controller and route level pipes."),e.k0s(),e.j41(89,"h4",14)(90,"span"),e.EFF(91,"Filters"),e.k0s()(),e.j41(92,"p"),e.EFF(93,"Filters are the only component that do not resolve global first. Instead, filters resolve from the lowest level possible, meaning execution starts with any route bound filters and proceeding next to controller level, and finally to global filters. Note that exceptions cannot be passed from filter to filter; if a route level filter catches the exception, a controller or global level filter cannot catch the same exception. The only way to achieve an effect like this is to use inheritance between the filters."),e.k0s(),e.j41(94,"blockquote",10)(95,"strong"),e.EFF(96,"Hint"),e.k0s(),e.EFF(97," Filters are only executed if any uncaught exception occurs during the request process. Caught exceptions, such as those caught with a "),e.j41(98,"code"),e.EFF(99,"try/catch"),e.k0s(),e.EFF(100," will not trigger Exception Filters to fire. As soon as an uncaught exception is encountered, the rest of the lifecycle is ignored and the request skips straight to the filter.\n"),e.k0s(),e.j41(101,"h4",15)(102,"span"),e.EFF(103,"Summary"),e.k0s()(),e.j41(104,"p"),e.EFF(105,"In general, the request lifecycle looks like the following:"),e.k0s(),e.j41(106,"ol")(107,"li"),e.EFF(108,"Incoming request"),e.k0s(),e.j41(109,"li"),e.EFF(110,"Middleware"),e.j41(111,"ul")(112,"li"),e.EFF(113,"2.1. Globally bound middleware"),e.k0s(),e.j41(114,"li"),e.EFF(115,"2.2. Module bound middleware"),e.k0s()()(),e.j41(116,"li"),e.EFF(117,"Guards"),e.j41(118,"ul")(119,"li"),e.EFF(120,"3.1 Global guards"),e.k0s(),e.j41(121,"li"),e.EFF(122,"3.2 Controller guards"),e.k0s(),e.j41(123,"li"),e.EFF(124,"3.3 Route guards"),e.k0s()()(),e.j41(125,"li"),e.EFF(126,"Interceptors (pre-controller)"),e.j41(127,"ul")(128,"li"),e.EFF(129,"4.1 Global interceptors"),e.k0s(),e.j41(130,"li"),e.EFF(131,"4.2 Controller interceptors"),e.k0s(),e.j41(132,"li"),e.EFF(133,"4.3 Route interceptors"),e.k0s()()(),e.j41(134,"li"),e.EFF(135,"Pipes"),e.j41(136,"ul")(137,"li"),e.EFF(138,"5.1 Global pipes"),e.k0s(),e.j41(139,"li"),e.EFF(140,"5.2 Controller pipes"),e.k0s(),e.j41(141,"li"),e.EFF(142,"5.3 Route pipes"),e.k0s(),e.j41(143,"li"),e.EFF(144,"5.4 Route parameter pipes"),e.k0s()()(),e.j41(145,"li"),e.EFF(146,"Controller (method handler)"),e.k0s(),e.j41(147,"li"),e.EFF(148,"Service (if exists)"),e.k0s(),e.j41(149,"li"),e.EFF(150,"Interceptors (post-request)"),e.j41(151,"ul")(152,"li"),e.EFF(153,"8.1 Route interceptor"),e.k0s(),e.j41(154,"li"),e.EFF(155,"8.2 Controller interceptor"),e.k0s(),e.j41(156,"li"),e.EFF(157,"8.3 Global interceptor"),e.k0s()()(),e.j41(158,"li"),e.EFF(159,"Exception filters"),e.j41(160,"ul")(161,"li"),e.EFF(162,"9.1 route"),e.k0s(),e.j41(163,"li"),e.EFF(164,"9.2 controller"),e.k0s(),e.j41(165,"li"),e.EFF(166,"9.3 global"),e.k0s()()(),e.j41(167,"li"),e.EFF(168,"Server response"),e.k0s()()())},dependencies:[i.a,c.z,l.Wk],encapsulation:2,changeDetection:0})}return t})();var b=r(5663);const x=[{path:"global-prefix",component:f,data:{title:"Global prefix - FAQ"}},{path:"hybrid-application",component:g,data:{title:"Hybrid application - FAQ"}},{path:"multiple-servers",component:j,data:{title:"HTTPS & Multiple Servers - FAQ"}},{path:"http-adapter",component:k,data:{title:"HTTP adapter - FAQ"}},{path:"keep-alive-connections",component:y,data:{title:"Keep-Alive connections - FAQ"}},{path:"raw-body",component:w,data:{title:"Raw Body"}},{path:"request-lifecycle",component:v,data:{title:"Request lifecycle - FAQ"}},{path:"common-errors",component:E,data:{title:"Common errors - FAQ"}},{path:"serverless",component:(()=>{class t extends a.y{static \u0275fac=(()=>{let o;return function(s){return(o||(o=e.xGo(t)))(s||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-serverless"]],features:[e.Vt3],decls:403,vars:4,consts:[["contentReference",""],["appefc339f9345479d4c07d7ef4ebb697dee6c76d76",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/faq/serverless.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","serverless"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Serverless_computing"],[1,"info"],["appAnchor","","id","cold-start"],["routerLink","/standalone-applications"],["appAnchor","","id","benchmarks"],[1,"language-typescript"],["routerLink","/cli/overview"],[1,"language-javascript"],["appAnchor","","id","runtime-optimizations"],["routerLink","/fundamentals/async-providers"],["routerLink","/fundamentals/lazy-loading-modules"],["appAnchor","","id","example-integration"],["rel","nofollow","target","_blank","href","https://www.serverless.com/"],[1,"language-bash"],[1,"language-yaml"],["rel","nofollow","target","_blank","href","https://www.serverless.com/framework/docs/"],["href","/cli/monorepo#monorepo-mode"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/swagger/issues/199"],[1,"language-json"],["appAnchor","","id","using-standalone-application-feature"],[1,"with-heading"],[1,"filename"]],template:function(n,s){if(1&n&&(e.j41(0,"div",2,0)(2,"div",3)(3,"a",4),e.nrm(4,"i",5),e.k0s()(),e.j41(5,"h3",6),e.EFF(6,"Serverless"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Serverless computing is a cloud computing execution model in which the cloud provider allocates machine resources on-demand, taking care of the servers on behalf of their customers. When an app is not in use, there are no computing resources allocated to the app. Pricing is based on the actual amount of resources consumed by an application ("),e.j41(9,"a",7),e.EFF(10,"source"),e.k0s(),e.EFF(11,")."),e.k0s(),e.j41(12,"p"),e.EFF(13,"With a "),e.j41(14,"strong"),e.EFF(15,"serverless architecture"),e.k0s(),e.EFF(16,", you focus purely on the individual functions in your application code. Services such as AWS Lambda, Google Cloud Functions, and Microsoft Azure Functions take care of all the physical hardware, virtual machine operating system, and web server software management."),e.k0s(),e.j41(17,"blockquote",8)(18,"strong"),e.EFF(19,"Hint"),e.k0s(),e.EFF(20," This chapter does not cover the pros and cons of serverless functions nor dives into the specifics of any cloud providers.\n"),e.k0s(),e.j41(21,"h4",9)(22,"span"),e.EFF(23,"Cold start"),e.k0s()(),e.j41(24,"p"),e.EFF(25,"A cold start is the first time your code has been executed in a while. Depending on a cloud provider you use, it may span several different operations, from downloading the code and bootstrapping the runtime to eventually running your code.\nThis process adds "),e.j41(26,"strong"),e.EFF(27,"significant latency"),e.k0s(),e.EFF(28," depending on several factors, the language, the number of packages your application require, etc."),e.k0s(),e.j41(29,"p"),e.EFF(30,"The cold start is important and although there are things which are beyond our control, there's still a lot of things we can do on our side to make it as short as possible."),e.k0s(),e.j41(31,"p"),e.EFF(32,"While you can think of Nest as a fully-fledged framework designed to be used in complex, enterprise applications,\nit is also "),e.j41(33,"strong"),e.EFF(34,'suitable for much "simpler" applications'),e.k0s(),e.EFF(35," (or scripts). For example, with the use of "),e.j41(36,"a",10),e.EFF(37,"Standalone applications"),e.k0s(),e.EFF(38," feature, you can take advantage of Nest's DI system in simple workers, CRON jobs, CLIs, or serverless functions."),e.k0s(),e.j41(39,"h4",11)(40,"span"),e.EFF(41,"Benchmarks"),e.k0s()(),e.j41(42,"p"),e.EFF(43,"To better understand what's the cost of using Nest or other, well-known libraries (like "),e.j41(44,"code"),e.EFF(45,"express"),e.k0s(),e.EFF(46,") in the context of serverless functions, let's compare how much time Node runtime needs to run the following scripts:"),e.k0s(),e.j41(47,"app-copy-button")(48,"pre")(49,"code",12),e.EFF(50,"\n// #1 Express\nimport * as express from 'express';\n\nasync function bootstrap() {\n  const app = express();\n  app.get('/', (req, res) => res.send('Hello world!'));\n  await new Promise<void>((resolve) => app.listen(3000, resolve));\n}\nbootstrap();\n\n// #2 Nest (with @nestjs/platform-express)\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, { logger: ['error'] });\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n\n// #3 Nest as a Standalone application (no HTTP server)\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { AppService } from './app.service';\n\nasync function bootstrap() {\n  const app = await NestFactory.createApplicationContext(AppModule, {\n    logger: ['error'],\n  });\n  console.log(app.get(AppService).getHello());\n}\nbootstrap();\n\n// #4 Raw Node.js script\nasync function bootstrap() {\n  console.log('Hello world!');\n}\nbootstrap();\n"),e.k0s()()(),e.j41(51,"p"),e.EFF(52,"For all these scripts, we used the "),e.j41(53,"code"),e.EFF(54,"tsc"),e.k0s(),e.EFF(55," (TypeScript) compiler and so the code remains unbundled ("),e.j41(56,"code"),e.EFF(57,"webpack"),e.k0s(),e.EFF(58," isn't used)."),e.k0s(),e.j41(59,"table"),e.nrm(60,"thead"),e.j41(61,"tbody")(62,"tr")(63,"td"),e.EFF(64,"Express"),e.k0s(),e.j41(65,"td"),e.EFF(66,"0.0079s (7.9ms)"),e.k0s()(),e.j41(67,"tr")(68,"td"),e.EFF(69,"Nest with "),e.j41(70,"code"),e.EFF(71,"@nestjs/platform-express"),e.k0s()(),e.j41(72,"td"),e.EFF(73,"0.1974s (197.4ms)"),e.k0s()(),e.j41(74,"tr")(75,"td"),e.EFF(76,"Nest (standalone application)"),e.k0s(),e.j41(77,"td"),e.EFF(78,"0.1117s (111.7ms)"),e.k0s()(),e.j41(79,"tr")(80,"td"),e.EFF(81,"Raw Node.js script"),e.k0s(),e.j41(82,"td"),e.EFF(83,"0.0071s (7.1ms)"),e.k0s()()()(),e.j41(84,"blockquote",8)(85,"strong"),e.EFF(86,"Note"),e.k0s(),e.EFF(87," Machine: MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD.\n"),e.k0s(),e.j41(88,"p"),e.EFF(89,"Now, let's repeat all benchmarks but this time, using "),e.j41(90,"code"),e.EFF(91,"webpack"),e.k0s(),e.EFF(92," (if you have "),e.j41(93,"a",13),e.EFF(94,"Nest CLI"),e.k0s(),e.EFF(95," installed, you can run "),e.j41(96,"code"),e.EFF(97,"nest build --webpack"),e.k0s(),e.EFF(98,") to bundle our application into a single executable JavaScript file.\nHowever, instead of using the default "),e.j41(99,"code"),e.EFF(100,"webpack"),e.k0s(),e.EFF(101," configuration that Nest CLI ships with, we'll make sure to bundle all dependencies ("),e.j41(102,"code"),e.EFF(103,"node_modules"),e.k0s(),e.EFF(104,") together, as follows:"),e.k0s(),e.j41(105,"pre")(106,"code",14),e.EFF(107,"\nmodule.exports = (options, webpack) => {\n  const lazyImports = [\n    '@nestjs/microservices/microservices-module',\n    '@nestjs/websockets/socket-module',\n  ];\n\n  return {\n    ...options,\n    externals: [],\n    plugins: [\n      ...options.plugins,\n      new webpack.IgnorePlugin({\n        checkResource(resource) {\n          if (lazyImports.includes(resource)) {\n            try {\n              require.resolve(resource);\n            } catch (err) {\n              return true;\n            }\n          }\n          return false;\n        },\n      }),\n    ],\n  };\n};\n"),e.k0s()(),e.j41(108,"blockquote",8)(109,"strong"),e.EFF(110,"Hint"),e.k0s(),e.EFF(111," To instruct Nest CLI to use this configuration, create a new "),e.j41(112,"code"),e.EFF(113,"webpack.config.js"),e.k0s(),e.EFF(114," file in the root directory of your project.\n"),e.k0s(),e.j41(115,"p"),e.EFF(116,"With this configuration, we received the following results:"),e.k0s(),e.j41(117,"table"),e.nrm(118,"thead"),e.j41(119,"tbody")(120,"tr")(121,"td"),e.EFF(122,"Express"),e.k0s(),e.j41(123,"td"),e.EFF(124,"0.0068s (6.8ms)"),e.k0s()(),e.j41(125,"tr")(126,"td"),e.EFF(127,"Nest with "),e.j41(128,"code"),e.EFF(129,"@nestjs/platform-express"),e.k0s()(),e.j41(130,"td"),e.EFF(131,"0.0815s (81.5ms)"),e.k0s()(),e.j41(132,"tr")(133,"td"),e.EFF(134,"Nest (standalone application)"),e.k0s(),e.j41(135,"td"),e.EFF(136,"0.0319s (31.9ms)"),e.k0s()(),e.j41(137,"tr")(138,"td"),e.EFF(139,"Raw Node.js script"),e.k0s(),e.j41(140,"td"),e.EFF(141,"0.0066s (6.6ms)"),e.k0s()()()(),e.j41(142,"blockquote",8)(143,"strong"),e.EFF(144,"Note"),e.k0s(),e.EFF(145," Machine: MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD.\n"),e.k0s(),e.j41(146,"blockquote",8)(147,"strong"),e.EFF(148,"Hint"),e.k0s(),e.EFF(149," You could optimize it even further by applying additional code minification & optimization techniques (using "),e.j41(150,"code"),e.EFF(151,"webpack"),e.k0s(),e.EFF(152," plugins, etc.).\n"),e.k0s(),e.j41(153,"p"),e.EFF(154,"As you can see, the way you compile (and whether you bundle your code) is crucial and has a significant impact on the overall startup time. With "),e.j41(155,"code"),e.EFF(156,"webpack"),e.k0s(),e.EFF(157,", you can get the bootstrap time of a standalone Nest application (starter project with one module, controller, and service) down to ~32ms on average, and down to ~81.5ms for a regular HTTP, express-based NestJS app."),e.k0s(),e.j41(158,"p"),e.EFF(159,"For more complicated Nest applications, for example, with 10 resources (generated through "),e.j41(160,"code"),e.EFF(161,"$ nest g resource"),e.k0s(),e.EFF(162," schematic = 10 modules, 10 controllers, 10 services, 20 DTO classes, 50 HTTP endpoints + "),e.j41(163,"code"),e.EFF(164,"AppModule"),e.k0s(),e.EFF(165,"), the overall startup on MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD is approximately 0.1298s (129.8ms). Running a monolithic application as a serverless function typically doesn't make too much sense anyway, so think of this benchmark more as an example of how the bootstrap time may potentially increase as your application grows."),e.k0s(),e.j41(166,"h4",15)(167,"span"),e.EFF(168,"Runtime optimizations"),e.k0s()(),e.j41(169,"p"),e.EFF(170,"Thus far we covered compile-time optimizations. These are unrelated to the way you define providers and load Nest modules in your application, and that plays an essential role as your application gets bigger."),e.k0s(),e.j41(171,"p"),e.EFF(172,"For example, imagine having a database connection defined as an "),e.j41(173,"a",16),e.EFF(174,"asynchronous provider"),e.k0s(),e.EFF(175,". Async providers are designed to delay the application start until one or more asynchronous tasks are completed.\nThat means, if your serverless function on average requires 2s to connect to the database (on bootstrap), your endpoint will need at least two extra seconds (because it must wait till the connection is established) to send a response back (when it's a cold start and your application wasn't running already)."),e.k0s(),e.j41(176,"p"),e.EFF(177,"As you can see, the way you structure your providers is somewhat different in a "),e.j41(178,"strong"),e.EFF(179,"serverless environment"),e.k0s(),e.EFF(180," where bootstrap time is important.\nAnother good example is if you use Redis for caching, but only in certain scenarios. Perhaps, in this case, you should not define a Redis connection as an async provider, as it would slow down the bootstrap time, even if it's not required for this specific function invocation."),e.k0s(),e.j41(181,"p"),e.EFF(182,"Also, sometimes you could lazy load entire modules, using the "),e.j41(183,"code"),e.EFF(184,"LazyModuleLoader"),e.k0s(),e.EFF(185," class, as described in "),e.j41(186,"a",17),e.EFF(187,"this chapter"),e.k0s(),e.EFF(188,". Caching is a great example here too.\nImagine that your application has, let's say, "),e.j41(189,"code"),e.EFF(190,"CacheModule"),e.k0s(),e.EFF(191," which internally connects to Redis and also, exports the "),e.j41(192,"code"),e.EFF(193,"CacheService"),e.k0s(),e.EFF(194," to interact with the Redis storage. If you don't need it for all potential function invocations,\nyou can just load it on-demand, lazily. This way you'll get a faster startup time (when a cold start occurs) for all invocations that don't require caching."),e.k0s(),e.j41(195,"app-copy-button")(196,"pre")(197,"code",12),e.EFF(198,"\nif (request.method === RequestMethod[RequestMethod.GET]) {\n  const { CacheModule } = await import('./cache.module');\n  const moduleRef = await this.lazyModuleLoader.load(() => CacheModule);\n\n  const { CacheService } = await import('./cache.service');\n  const cacheService = moduleRef.get(CacheService);\n\n  return cacheService.get(ENDPOINT_KEY);\n}\n"),e.k0s()()(),e.j41(199,"p"),e.EFF(200,"Another great example is a webhook or worker, which depending on some specific conditions (e.g., input arguments), may perform different operations.\nIn such a case, you could specify a condition inside your route handler that lazily loads an appropriate module for the specific function invocation, and just load every other module lazily."),e.k0s(),e.j41(201,"app-copy-button")(202,"pre")(203,"code",12),e.EFF(204,"\nif (workerType === WorkerType.A) {\n  const { WorkerAModule } = await import('./worker-a.module');\n  const moduleRef = await this.lazyModuleLoader.load(() => WorkerAModule);\n  // ...\n} else if (workerType === WorkerType.B) {\n  const { WorkerBModule } = await import('./worker-b.module');\n  const moduleRef = await this.lazyModuleLoader.load(() => WorkerBModule);\n  // ...\n}\n"),e.k0s()()(),e.j41(205,"h4",18)(206,"span"),e.EFF(207,"Example integration"),e.k0s()(),e.j41(208,"p"),e.EFF(209,"The way your application's entry file (typically "),e.j41(210,"code"),e.EFF(211,"main.ts"),e.k0s(),e.EFF(212," file) is supposed to look like "),e.j41(213,"strong"),e.EFF(214,"depends on several factors"),e.k0s(),e.EFF(215," and so "),e.j41(216,"strong"),e.EFF(217,"there's no single template"),e.k0s(),e.EFF(218," that just works for every scenario.\nFor example, the initialization file required to spin up your serverless function varies by cloud providers (AWS, Azure, GCP, etc.).\nAlso, depending on whether you want to run a typical HTTP application with multiple routes/endpoints or just provide a single route (or execute a specific portion of code),\nyour application's code will look different (for example, for the endpoint-per-function approach you could use the "),e.j41(219,"code"),e.EFF(220,"NestFactory.createApplicationContext"),e.k0s(),e.EFF(221," instead of booting the HTTP server, setting up middleware, etc.)."),e.k0s(),e.j41(222,"p"),e.EFF(223,"Just for illustration purposes, we'll integrate Nest (using "),e.j41(224,"code"),e.EFF(225,"@nestjs/platform-express"),e.k0s(),e.EFF(226," and so spinning up the whole, fully functional HTTP router)\nwith the "),e.j41(227,"a",19),e.EFF(228,"Serverless"),e.k0s(),e.EFF(229," framework (in this case, targeting AWS Lambda). As we've mentioned earlier, your code will differ depending on the cloud provider you choose, and many other factors."),e.k0s(),e.j41(230,"p"),e.EFF(231,"First, let's install the required packages:"),e.k0s(),e.j41(232,"pre")(233,"code",20),e.EFF(234,"\n$ npm i @codegenie/serverless-express aws-lambda\n$ npm i -D @types/aws-lambda serverless-offline\n"),e.k0s()(),e.j41(235,"blockquote",8)(236,"strong"),e.EFF(237,"Hint"),e.k0s(),e.EFF(238," To speed up development cycles, we install the "),e.j41(239,"code"),e.EFF(240,"serverless-offline"),e.k0s(),e.EFF(241," plugin which emulates AWS \u03bb and API Gateway.\n"),e.k0s(),e.j41(242,"p"),e.EFF(243,"Once the installation process is complete, let's create the "),e.j41(244,"code"),e.EFF(245,"serverless.yml"),e.k0s(),e.EFF(246," file to configure the Serverless framework:"),e.k0s(),e.j41(247,"pre")(248,"code",21),e.EFF(249,"\nservice: serverless-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n\nfunctions:\n  main:\n    handler: dist/main.handler\n    events:\n      - http:\n          method: ANY\n          path: /\n      - http:\n          method: ANY\n          path: '{proxy+}'\n"),e.k0s()(),e.j41(250,"blockquote",8)(251,"strong"),e.EFF(252,"Hint"),e.k0s(),e.EFF(253," To learn more about the Serverless framework, visit the "),e.j41(254,"a",22),e.EFF(255,"official documentation"),e.k0s(),e.EFF(256,".\n"),e.k0s(),e.j41(257,"p"),e.EFF(258,"With this in place, we can now navigate to the "),e.j41(259,"code"),e.EFF(260,"main.ts"),e.k0s(),e.EFF(261," file and update our bootstrap code with the required boilerplate:"),e.k0s(),e.j41(262,"app-copy-button")(263,"pre")(264,"code",12),e.EFF(265,"\nimport { NestFactory } from '@nestjs/core';\nimport serverlessExpress from '@codegenie/serverless-express';\nimport { Callback, Context, Handler } from 'aws-lambda';\nimport { AppModule } from './app.module';\n\nlet server: Handler;\n\nasync function bootstrap(): Promise<Handler> {\n  const app = await NestFactory.create(AppModule);\n  await app.init();\n\n  const expressApp = app.getHttpAdapter().getInstance();\n  return serverlessExpress({ app: expressApp });\n}\n\nexport const handler: Handler = async (\n  event: any,\n  context: Context,\n  callback: Callback,\n) => {\n  server = server ?? (await bootstrap());\n  return server(event, context, callback);\n};\n"),e.k0s()()(),e.j41(266,"blockquote",8)(267,"strong"),e.EFF(268,"Hint"),e.k0s(),e.EFF(269," For creating multiple serverless functions and sharing common modules between them, we recommend using the "),e.j41(270,"a",23),e.EFF(271,"CLI Monorepo mode"),e.k0s(),e.EFF(272,".\n"),e.k0s(),e.j41(273,"blockquote",24)(274,"strong"),e.EFF(275,"Warning"),e.k0s(),e.EFF(276," If you use "),e.j41(277,"code"),e.EFF(278,"@nestjs/swagger"),e.k0s(),e.EFF(279," package, there are a few additional steps required to make it work properly in the context of serverless function. Check out this "),e.j41(280,"a",25),e.EFF(281,"thread"),e.k0s(),e.EFF(282," for more information.\n"),e.k0s(),e.j41(283,"p"),e.EFF(284,"Next, open up the "),e.j41(285,"code"),e.EFF(286,"tsconfig.json"),e.k0s(),e.EFF(287," file and make sure to enable the "),e.j41(288,"code"),e.EFF(289,"esModuleInterop"),e.k0s(),e.EFF(290," option to make the "),e.j41(291,"code"),e.EFF(292,"@codegenie/serverless-express"),e.k0s(),e.EFF(293," package load properly."),e.k0s(),e.j41(294,"pre")(295,"code",26),e.EFF(296,'\n{\n  "compilerOptions": {\n    ...\n    "esModuleInterop": true\n  }\n}\n'),e.k0s()(),e.j41(297,"p"),e.EFF(298,"Now we can build our application (with "),e.j41(299,"code"),e.EFF(300,"nest build"),e.k0s(),e.EFF(301," or "),e.j41(302,"code"),e.EFF(303,"tsc"),e.k0s(),e.EFF(304,") and use the "),e.j41(305,"code"),e.EFF(306,"serverless"),e.k0s(),e.EFF(307," CLI to start our lambda function locally:"),e.k0s(),e.j41(308,"pre")(309,"code",20),e.EFF(310,"\n$ npm run build\n$ npx serverless offline\n"),e.k0s()(),e.j41(311,"p"),e.EFF(312,"Once the application is running, open your browser and navigate to "),e.j41(313,"code"),e.EFF(314,"http://localhost:3000/dev/[ANY_ROUTE]"),e.k0s(),e.EFF(315," (where "),e.j41(316,"code"),e.EFF(317,"[ANY_ROUTE]"),e.k0s(),e.EFF(318," is any endpoint registered in your application)."),e.k0s(),e.j41(319,"p"),e.EFF(320,"In the sections above, we've shown that using "),e.j41(321,"code"),e.EFF(322,"webpack"),e.k0s(),e.EFF(323," and bundling your app can have significant impact on the overall bootstrap time.\nHowever, to make it work with our example, there are a few additional configurations you must add in your "),e.j41(324,"code"),e.EFF(325,"webpack.config.js"),e.k0s(),e.EFF(326," file. Generally,\nto make sure our "),e.j41(327,"code"),e.EFF(328,"handler"),e.k0s(),e.EFF(329," function will be picked up, we must change the "),e.j41(330,"code"),e.EFF(331,"output.libraryTarget"),e.k0s(),e.EFF(332," property to "),e.j41(333,"code"),e.EFF(334,"commonjs2"),e.k0s(),e.EFF(335,"."),e.k0s(),e.j41(336,"pre")(337,"code",14),e.EFF(338,"\nreturn {\n  ...options,\n  externals: [],\n  output: {\n    ...options.output,\n    libraryTarget: 'commonjs2',\n  },\n  // ... the rest of the configuration\n};\n"),e.k0s()(),e.j41(339,"p"),e.EFF(340,"With this in place, you can now use "),e.j41(341,"code"),e.EFF(342,"$ nest build --webpack"),e.k0s(),e.EFF(343," to compile your function's code (and then "),e.j41(344,"code"),e.EFF(345,"$ npx serverless offline"),e.k0s(),e.EFF(346," to test it)."),e.k0s(),e.j41(347,"p"),e.EFF(348,"It's also recommended (but "),e.j41(349,"strong"),e.EFF(350,"not required"),e.k0s(),e.EFF(351," as it will slow down your build process) to install the "),e.j41(352,"code"),e.EFF(353,"terser-webpack-plugin"),e.k0s(),e.EFF(354," package and override its configuration to keep classnames intact when minifying your production build. Not doing so can result in incorrect behavior when using "),e.j41(355,"code"),e.EFF(356,"class-validator"),e.k0s(),e.EFF(357," within your application."),e.k0s(),e.j41(358,"pre")(359,"code",14),e.EFF(360,"\nconst TerserPlugin = require('terser-webpack-plugin');\n\nreturn {\n  ...options,\n  externals: [],\n  optimization: {\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          keep_classnames: true,\n        },\n      }),\n    ],\n  },\n  output: {\n    ...options.output,\n    libraryTarget: 'commonjs2',\n  },\n  // ... the rest of the configuration\n};\n"),e.k0s()(),e.j41(361,"h4",27)(362,"span"),e.EFF(363,"Using standalone application feature"),e.k0s()(),e.j41(364,"p"),e.EFF(365,"Alternatively, if you want to keep your function very lightweight and you don't need any HTTP-related features (routing, but also guards, interceptors, pipes, etc.),\nyou can just use "),e.j41(366,"code"),e.EFF(367,"NestFactory.createApplicationContext"),e.k0s(),e.EFF(368," (as mentioned earlier) instead of running the entire HTTP server (and "),e.j41(369,"code"),e.EFF(370,"express"),e.k0s(),e.EFF(371," under the hood), as follows:"),e.k0s(),e.j41(372,"app-copy-button",28)(373,"span",29),e.EFF(374),e.nI1(375,"extension"),e.nrm(376,"app-tabs",null,1),e.k0s(),e.j41(378,"pre")(379,"code",12),e.EFF(380,"\nimport { HttpStatus } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { Callback, Context, Handler } from 'aws-lambda';\nimport { AppModule } from './app.module';\nimport { AppService } from './app.service';\n\nexport const handler: Handler = async (\n  event: any,\n  context: Context,\n  callback: Callback,\n) => {\n  const appContext = await NestFactory.createApplicationContext(AppModule);\n  const appService = appContext.get(AppService);\n\n  return {\n    body: appService.getHello(),\n    statusCode: HttpStatus.OK,\n  };\n};\n"),e.k0s()()(),e.j41(381,"blockquote",8)(382,"strong"),e.EFF(383,"Hint"),e.k0s(),e.EFF(384," Be aware that "),e.j41(385,"code"),e.EFF(386,"NestFactory.createApplicationContext"),e.k0s(),e.EFF(387," does not wrap controller methods with enhancers (guard, interceptors, etc.). For this, you must use the "),e.j41(388,"code"),e.EFF(389,"NestFactory.create"),e.k0s(),e.EFF(390," method.\n"),e.k0s(),e.j41(391,"p"),e.EFF(392,"You could also pass the "),e.j41(393,"code"),e.EFF(394,"event"),e.k0s(),e.EFF(395," object down to, let's say, "),e.j41(396,"code"),e.EFF(397,"EventsService"),e.k0s(),e.EFF(398," provider that could process it and return a corresponding value (depending on the input value and your business logic)."),e.k0s(),e.j41(399,"app-copy-button")(400,"pre")(401,"code",12),e.EFF(402,"\nexport const handler: Handler = async (\n  event: any,\n  context: Context,\n  callback: Callback,\n) => {\n  const appContext = await NestFactory.createApplicationContext(AppModule);\n  const eventsService = appContext.get(EventsService);\n  return eventsService.process(event);\n};\n"),e.k0s()()()()),2&n){const p=e.sdS(377);e.R7$(374),e.SpI(" ",e.i5U(375,1,"main",p.isJsActive),"\n")}},dependencies:[d.O,i.a,c.z,l.Wk,b.M],encapsulation:2,changeDetection:0})}return t})(),data:{title:"Serverless - FAQ"}}];let A=(()=>{class t{static \u0275fac=function(n){return new(n||t)};static \u0275mod=e.$C({type:t});static \u0275inj=e.G2t({imports:[u.MD,h.G,l.iI.forChild(x)]})}return t})()}}]);