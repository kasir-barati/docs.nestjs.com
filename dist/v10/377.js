"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[377],{3377:(ee,C,m)=>{m.r(C),m.d(C,{RecipesModule:()=>K});var I=m(177),j=m(685),T=m(445),l=m(8050),e=m(4438),g=m(5119),d=m(4819),F=m(2469),f=m(5663);let R=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-cqrs"]],features:[e.Vt3],decls:522,vars:64,consts:[["contentReference",""],["appb7099deac6d9e6c2ca043902695ed2c9033892dc",""],["app7acb5a128c03b48f406c6d6a0e486ebe97b68999",""],["app28dbec754c0599dc9b665c2960fb78b2342abc93",""],["appeb00664e449da1b12ea885fbbde4b970c9cee45b",""],["app9fbb3a1bec286151d45f8fef6ed878842d27252c",""],["appb9e53efda422b25340bfd447b1c73895eefc7784",""],["appf973c32803a012815e3a892e28bb2b5fee0cb7de",""],["appc6123ee7c823bcd3acd4e4ef5297be4c9f93311f",""],["appb11f29f3200075ca084192b5ca9a77af922cb561",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/cqrs.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","cqrs"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/cqrs"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","commands"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],["appAnchor","","id","queries"],["appAnchor","","id","events"],[1,"info"],["routerLink","/exception-filters"],["href","/recipes/cqrs#sagas"],["routerLink","/websockets/gateways"],["routerLink","/techniques/server-sent-events"],["appAnchor","","id","sagas"],["rel","nofollow","target","_blank","href","https://github.com/ReactiveX/rxjs"],["appAnchor","","id","setup"],["appAnchor","","id","unhandled-exceptions"],["appAnchor","","id","subscribing-to-all-events"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/kamilmysliwiec/nest-cqrs-example"]],template:function(s,o){if(1&s&&(e.j41(0,"div",10,0)(2,"div",11)(3,"a",12),e.nrm(4,"i",13),e.k0s()(),e.j41(5,"h3",14),e.EFF(6,"CQRS"),e.k0s(),e.j41(7,"p"),e.EFF(8,"The flow of simple "),e.j41(9,"a",15),e.EFF(10,"CRUD"),e.k0s(),e.EFF(11," (Create, Read, Update and Delete) applications can be described as follows:"),e.k0s(),e.j41(12,"ol")(13,"li"),e.EFF(14,"The controllers layer handles HTTP requests and delegates tasks to the services layer."),e.k0s(),e.j41(15,"li"),e.EFF(16,"The services layer is where most of the business logic lives."),e.k0s(),e.j41(17,"li"),e.EFF(18,"Services use repositories / DAOs to change / persist entities."),e.k0s(),e.j41(19,"li"),e.EFF(20,"Entities act as containers for the values, with setters and getters."),e.k0s()(),e.j41(21,"p"),e.EFF(22,"While this pattern is usually sufficient for small and medium-sized applications, it may not be the best choice for larger, more complex applications. In such cases, the "),e.j41(23,"strong"),e.EFF(24,"CQRS"),e.k0s(),e.EFF(25," (Command and Query Responsibility Segregation) model may be more appropriate and scalable (depending on the application's requirements). Benefits of this model include:"),e.k0s(),e.j41(26,"ul")(27,"li")(28,"strong"),e.EFF(29,"Separation of concerns"),e.k0s(),e.EFF(30,". The model separates the read and write operations into separate models."),e.k0s(),e.j41(31,"li")(32,"strong"),e.EFF(33,"Scalability"),e.k0s(),e.EFF(34,". The read and write operations can be scaled independently."),e.k0s(),e.j41(35,"li")(36,"strong"),e.EFF(37,"Flexibility"),e.k0s(),e.EFF(38,". The model allows for the use of different data stores for read and write operations."),e.k0s(),e.j41(39,"li")(40,"strong"),e.EFF(41,"Performance"),e.k0s(),e.EFF(42,". The model allows for the use of different data stores optimized for read and write operations."),e.k0s()(),e.j41(43,"p"),e.EFF(44,"To facilitate that model, Nest provides a lightweight "),e.j41(45,"a",16),e.EFF(46,"CQRS module"),e.k0s(),e.EFF(47,". This chapter describes how to use it."),e.k0s(),e.j41(48,"h4",17)(49,"span"),e.EFF(50,"Installation"),e.k0s()(),e.j41(51,"p"),e.EFF(52,"First install the required package:"),e.k0s(),e.j41(53,"pre")(54,"code",18),e.EFF(55,"\n$ npm install --save @nestjs/cqrs\n"),e.k0s()(),e.j41(56,"h4",19)(57,"span"),e.EFF(58,"Commands"),e.k0s()(),e.j41(59,"p"),e.EFF(60,"Commands are used to change the application state. They should be task-based, rather than data centric. When a command is dispatched, it is handled by a corresponding "),e.j41(61,"strong"),e.EFF(62,"Command Handler"),e.k0s(),e.EFF(63,". The handler is responsible for updating the application state."),e.k0s(),e.j41(64,"app-copy-button",20)(65,"span",21),e.EFF(66),e.nI1(67,"extension"),e.nrm(68,"app-tabs",null,1),e.k0s(),e.j41(70,"pre")(71,"code",22),e.EFF(72,"\n@Injectable()\nexport class HeroesGameService {\n  constructor(private commandBus: CommandBus) {}\n\n  async killDragon(heroId: string, killDragonDto: KillDragonDto) {\n    return this.commandBus.execute(\n      new KillDragonCommand(heroId, killDragonDto.dragonId)\n    );\n  }\n}\n"),e.k0s()(),e.j41(73,"pre")(74,"code",22),e.EFF(75,"\n@Injectable()\n@Dependencies(CommandBus)\nexport class HeroesGameService {\n  constructor(commandBus) {\n    this.commandBus = commandBus;\n  }\n\n  async killDragon(heroId, killDragonDto) {\n    return this.commandBus.execute(\n      new KillDragonCommand(heroId, killDragonDto.dragonId)\n    );\n  }\n}\n"),e.k0s()()(),e.j41(76,"p"),e.EFF(77,"In the code snippet above, we instantiate the "),e.j41(78,"code"),e.EFF(79,"KillDragonCommand"),e.k0s(),e.EFF(80," class and pass it to the "),e.j41(81,"code"),e.EFF(82,"CommandBus"),e.k0s(),e.EFF(83,"'s "),e.j41(84,"code"),e.EFF(85,"execute()"),e.k0s(),e.EFF(86," method. This is the demonstrated command class:"),e.k0s(),e.j41(87,"app-copy-button",20)(88,"span",21),e.EFF(89),e.nI1(90,"extension"),e.nrm(91,"app-tabs",null,2),e.k0s(),e.j41(93,"pre")(94,"code",22),e.EFF(95,"\nexport class KillDragonCommand {\n  constructor(\n    public readonly heroId: string,\n    public readonly dragonId: string,\n  ) {}\n}\n"),e.k0s()(),e.j41(96,"pre")(97,"code",22),e.EFF(98,"\nexport class KillDragonCommand {\n  constructor(heroId, dragonId) {\n    this.heroId = heroId;\n    this.dragonId = dragonId;\n  }\n}\n"),e.k0s()()(),e.j41(99,"p"),e.EFF(100,"The "),e.j41(101,"code"),e.EFF(102,"CommandBus"),e.k0s(),e.EFF(103," represents a "),e.j41(104,"strong"),e.EFF(105,"stream"),e.k0s(),e.EFF(106," of commands. It is responsible for dispatching commands to the appropriate handlers. The "),e.j41(107,"code"),e.EFF(108,"execute()"),e.k0s(),e.EFF(109," method returns a promise, which resolves to the value returned by the handler."),e.k0s(),e.j41(110,"p"),e.EFF(111,"Let's create a handler for the "),e.j41(112,"code"),e.EFF(113,"KillDragonCommand"),e.k0s(),e.EFF(114," command."),e.k0s(),e.j41(115,"app-copy-button",20)(116,"span",21),e.EFF(117),e.nI1(118,"extension"),e.nrm(119,"app-tabs",null,3),e.k0s(),e.j41(121,"pre")(122,"code",22),e.EFF(123,"\n@CommandHandler(KillDragonCommand)\nexport class KillDragonHandler implements ICommandHandler<KillDragonCommand> {\n  constructor(private repository: HeroRepository) {}\n\n  async execute(command: KillDragonCommand) {\n    const { heroId, dragonId } = command;\n    const hero = this.repository.findOneById(+heroId);\n\n    hero.killEnemy(dragonId);\n    await this.repository.persist(hero);\n  }\n}\n"),e.k0s()(),e.j41(124,"pre")(125,"code",22),e.EFF(126,"\n@CommandHandler(KillDragonCommand)\n@Dependencies(HeroRepository)\nexport class KillDragonHandler {\n  constructor(repository) {\n    this.repository = repository;\n  }\n\n  async execute(command) {\n    const { heroId, dragonId } = command;\n    const hero = this.repository.findOneById(+heroId);\n\n    hero.killEnemy(dragonId);\n    await this.repository.persist(hero);\n  }\n}\n"),e.k0s()()(),e.j41(127,"p"),e.EFF(128,"This handler retrieves the "),e.j41(129,"code"),e.EFF(130,"Hero"),e.k0s(),e.EFF(131," entity from the repository, calls the "),e.j41(132,"code"),e.EFF(133,"killEnemy()"),e.k0s(),e.EFF(134," method, and then persists the changes. The "),e.j41(135,"code"),e.EFF(136,"KillDragonHandler"),e.k0s(),e.EFF(137," class implements the "),e.j41(138,"code"),e.EFF(139,"ICommandHandler"),e.k0s(),e.EFF(140," interface, which requires the implementation of the "),e.j41(141,"code"),e.EFF(142,"execute()"),e.k0s(),e.EFF(143," method. The "),e.j41(144,"code"),e.EFF(145,"execute()"),e.k0s(),e.EFF(146," method receives the command object as an argument."),e.k0s(),e.j41(147,"h4",23)(148,"span"),e.EFF(149,"Queries"),e.k0s()(),e.j41(150,"p"),e.EFF(151,"Queries are used to retrieve data from the application state. They should be data centric, rather than task-based. When a query is dispatched, it is handled by a corresponding "),e.j41(152,"strong"),e.EFF(153,"Query Handler"),e.k0s(),e.EFF(154,". The handler is responsible for retrieving the data."),e.k0s(),e.j41(155,"p"),e.EFF(156,"The "),e.j41(157,"code"),e.EFF(158,"QueryBus"),e.k0s(),e.EFF(159," follows the same pattern as the "),e.j41(160,"code"),e.EFF(161,"CommandBus"),e.k0s(),e.EFF(162,". Query handlers should implement the "),e.j41(163,"code"),e.EFF(164,"IQueryHandler"),e.k0s(),e.EFF(165," interface and be annotated with the "),e.j41(166,"code"),e.EFF(167,"@QueryHandler()"),e.k0s(),e.EFF(168," decorator."),e.k0s(),e.j41(169,"h4",24)(170,"span"),e.EFF(171,"Events"),e.k0s()(),e.j41(172,"p"),e.EFF(173,"Events are used to notify other parts of the application about changes in the application state. They are dispatched by "),e.j41(174,"strong"),e.EFF(175,"models"),e.k0s(),e.EFF(176," or directly using the "),e.j41(177,"code"),e.EFF(178,"EventBus"),e.k0s(),e.EFF(179,". When an event is dispatched, it is handled by corresponding "),e.j41(180,"strong"),e.EFF(181,"Event Handlers"),e.k0s(),e.EFF(182,". Handlers can then, for example, update the read model."),e.k0s(),e.j41(183,"p"),e.EFF(184,"For demonstration purposes, let's create an event class:"),e.k0s(),e.j41(185,"app-copy-button",20)(186,"span",21),e.EFF(187),e.nI1(188,"extension"),e.nrm(189,"app-tabs",null,4),e.k0s(),e.j41(191,"pre")(192,"code",22),e.EFF(193,"\nexport class HeroKilledDragonEvent {\n  constructor(\n    public readonly heroId: string,\n    public readonly dragonId: string,\n  ) {}\n}\n"),e.k0s()(),e.j41(194,"pre")(195,"code",22),e.EFF(196,"\nexport class HeroKilledDragonEvent {\n  constructor(heroId, dragonId) {\n    this.heroId = heroId;\n    this.dragonId = dragonId;\n  }\n}\n"),e.k0s()()(),e.j41(197,"p"),e.EFF(198,"Now while events can be dispatched directly using the "),e.j41(199,"code"),e.EFF(200,"EventBus.publish()"),e.k0s(),e.EFF(201," method, we can also dispatch them from the model. Let's update the "),e.j41(202,"code"),e.EFF(203,"Hero"),e.k0s(),e.EFF(204," model to dispatch the "),e.j41(205,"code"),e.EFF(206,"HeroKilledDragonEvent"),e.k0s(),e.EFF(207," event when the "),e.j41(208,"code"),e.EFF(209,"killEnemy()"),e.k0s(),e.EFF(210," method is called."),e.k0s(),e.j41(211,"app-copy-button",20)(212,"span",21),e.EFF(213),e.nI1(214,"extension"),e.nrm(215,"app-tabs",null,5),e.k0s(),e.j41(217,"pre")(218,"code",22),e.EFF(219,"\nexport class Hero extends AggregateRoot {\n  constructor(private id: string) {\n    super();\n  }\n\n  killEnemy(enemyId: string) {\n    // Business logic\n    this.apply(new HeroKilledDragonEvent(this.id, enemyId));\n  }\n}\n"),e.k0s()(),e.j41(220,"pre")(221,"code",22),e.EFF(222,"\nexport class Hero extends AggregateRoot {\n  constructor(id) {\n    super();\n    this.id = id;\n  }\n\n  killEnemy(enemyId) {\n    // Business logic\n    this.apply(new HeroKilledDragonEvent(this.id, enemyId));\n  }\n}\n"),e.k0s()()(),e.j41(223,"p"),e.EFF(224,"The "),e.j41(225,"code"),e.EFF(226,"apply()"),e.k0s(),e.EFF(227," method is used to dispatch events. It accepts an event object as an argument. However, since our model is not aware of the "),e.j41(228,"code"),e.EFF(229,"EventBus"),e.k0s(),e.EFF(230,", we need to associate it with the model. We can do that by using the "),e.j41(231,"code"),e.EFF(232,"EventPublisher"),e.k0s(),e.EFF(233," class."),e.k0s(),e.j41(234,"app-copy-button",20)(235,"span",21),e.EFF(236),e.nI1(237,"extension"),e.nrm(238,"app-tabs",null,6),e.k0s(),e.j41(240,"pre")(241,"code",22),e.EFF(242,"\n@CommandHandler(KillDragonCommand)\nexport class KillDragonHandler implements ICommandHandler<KillDragonCommand> {\n  constructor(\n    private repository: HeroRepository,\n    private publisher: EventPublisher,\n  ) {}\n\n  async execute(command: KillDragonCommand) {\n    const { heroId, dragonId } = command;\n    const hero = this.publisher.mergeObjectContext(\n      await this.repository.findOneById(+heroId),\n    );\n    hero.killEnemy(dragonId);\n    hero.commit();\n  }\n}\n"),e.k0s()(),e.j41(243,"pre")(244,"code",22),e.EFF(245,"\n@CommandHandler(KillDragonCommand)\n@Dependencies(HeroRepository, EventPublisher)\nexport class KillDragonHandler {\n  constructor(repository, publisher) {\n    this.repository = repository;\n    this.publisher = publisher;\n  }\n\n  async execute(command) {\n    const { heroId, dragonId } = command;\n    const hero = this.publisher.mergeObjectContext(\n      await this.repository.findOneById(+heroId),\n    );\n    hero.killEnemy(dragonId);\n    hero.commit();\n  }\n}\n"),e.k0s()()(),e.j41(246,"p"),e.EFF(247,"The "),e.j41(248,"code"),e.EFF(249,"EventPublisher#mergeObjectContext"),e.k0s(),e.EFF(250," method merges the event publisher into the provided object, which means that the object will now be able to publish events to the events stream."),e.k0s(),e.j41(251,"p"),e.EFF(252,"Notice that in this example we also call the "),e.j41(253,"code"),e.EFF(254,"commit()"),e.k0s(),e.EFF(255," method on the model. This method is used to dispatch any outstanding events. To automatically dispatch events, we can set the "),e.j41(256,"code"),e.EFF(257,"autoCommit"),e.k0s(),e.EFF(258," property to "),e.j41(259,"code"),e.EFF(260,"true"),e.k0s(),e.EFF(261,":"),e.k0s(),e.j41(262,"app-copy-button")(263,"pre")(264,"code",22),e.EFF(265,"\nexport class Hero extends AggregateRoot {\n  constructor(private id: string) {\n    super();\n    this.autoCommit = true;\n  }\n}\n"),e.k0s()()(),e.j41(266,"p"),e.EFF(267,"In case we want to merge the event publisher into a non-existing object, but rather into a class, we can use the "),e.j41(268,"code"),e.EFF(269,"EventPublisher#mergeClassContext"),e.k0s(),e.EFF(270," method:"),e.k0s(),e.j41(271,"app-copy-button")(272,"pre")(273,"code",22),e.EFF(274,"\nconst HeroModel = this.publisher.mergeClassContext(Hero);\nconst hero = new HeroModel('id'); // <-- HeroModel is a class\n"),e.k0s()()(),e.j41(275,"p"),e.EFF(276,"Now every instance of the "),e.j41(277,"code"),e.EFF(278,"HeroModel"),e.k0s(),e.EFF(279," class will be able to publish events without using "),e.j41(280,"code"),e.EFF(281,"mergeObjectContext()"),e.k0s(),e.EFF(282," method."),e.k0s(),e.j41(283,"p"),e.EFF(284,"Additionally, we can emit events manually using "),e.j41(285,"code"),e.EFF(286,"EventBus"),e.k0s(),e.EFF(287,":"),e.k0s(),e.j41(288,"app-copy-button")(289,"pre")(290,"code",22),e.EFF(291,"\nthis.eventBus.publish(new HeroKilledDragonEvent());\n"),e.k0s()()(),e.j41(292,"blockquote",25)(293,"strong"),e.EFF(294,"Hint"),e.k0s(),e.EFF(295," The "),e.j41(296,"code"),e.EFF(297,"EventBus"),e.k0s(),e.EFF(298," is an injectable class.\n"),e.k0s(),e.j41(299,"p"),e.EFF(300,"Each event can have multiple "),e.j41(301,"strong"),e.EFF(302,"Event Handlers"),e.k0s(),e.EFF(303,"."),e.k0s(),e.j41(304,"app-copy-button",20)(305,"span",21),e.EFF(306),e.nI1(307,"extension"),e.nrm(308,"app-tabs",null,7),e.k0s(),e.j41(310,"pre")(311,"code",22),e.EFF(312,"\n@EventsHandler(HeroKilledDragonEvent)\nexport class HeroKilledDragonHandler implements IEventHandler<HeroKilledDragonEvent> {\n  constructor(private repository: HeroRepository) {}\n\n  handle(event: HeroKilledDragonEvent) {\n    // Business logic\n  }\n}\n"),e.k0s()()(),e.j41(313,"blockquote",25)(314,"strong"),e.EFF(315,"Hint"),e.k0s(),e.EFF(316," Be aware that when you start using event handlers you get out of the traditional HTTP web context.\n"),e.j41(317,"ul")(318,"li"),e.EFF(319,"Errors in "),e.j41(320,"code"),e.EFF(321,"CommandHandlers"),e.k0s(),e.EFF(322," can still be caught by built-in "),e.j41(323,"a",26),e.EFF(324,"Exception filters"),e.k0s(),e.EFF(325,"."),e.k0s(),e.j41(326,"li"),e.EFF(327,"Errors in "),e.j41(328,"code"),e.EFF(329,"EventHandlers"),e.k0s(),e.EFF(330," can't be caught by Exception filters: you will have to handle them manually. Either by a simple "),e.j41(331,"code"),e.EFF(332,"try/catch"),e.k0s(),e.EFF(333,", using "),e.j41(334,"a",27),e.EFF(335,"Sagas"),e.k0s(),e.EFF(336," by triggering a compensating event, or whatever other solution you choose."),e.k0s(),e.j41(337,"li"),e.EFF(338,"HTTP Responses in "),e.j41(339,"code"),e.EFF(340,"CommandHandlers"),e.k0s(),e.EFF(341," can still be sent back to the client."),e.k0s(),e.j41(342,"li"),e.EFF(343,"HTTP Responses in "),e.j41(344,"code"),e.EFF(345,"EventHandlers"),e.k0s(),e.EFF(346," cannot. If you want to send information to the client you could use "),e.j41(347,"a",28),e.EFF(348,"WebSocket"),e.k0s(),e.EFF(349,", "),e.j41(350,"a",29),e.EFF(351,"SSE"),e.k0s(),e.EFF(352,", or whatever other solution you choose."),e.k0s()()(),e.j41(353,"h4",30)(354,"span"),e.EFF(355,"Sagas"),e.k0s()(),e.j41(356,"p"),e.EFF(357,"Saga is a long-running process that listens to events and may trigger new commands. It is usually used to manage complex workflows in the application. For example, when a user signs up, a saga may listen to the "),e.j41(358,"code"),e.EFF(359,"UserRegisteredEvent"),e.k0s(),e.EFF(360," and send a welcome email to the user."),e.k0s(),e.j41(361,"p"),e.EFF(362,"Sagas are an extremely powerful feature. A single saga may listen for 1..* events. Using the "),e.j41(363,"a",31),e.EFF(364,"RxJS"),e.k0s(),e.EFF(365," library, we can filter, map, fork, and merge event streams to create sophisticated workflows. Each saga returns an Observable which produces a command instance. This command is then dispatched "),e.j41(366,"strong"),e.EFF(367,"asynchronously"),e.k0s(),e.EFF(368," by the "),e.j41(369,"code"),e.EFF(370,"CommandBus"),e.k0s(),e.EFF(371,"."),e.k0s(),e.j41(372,"p"),e.EFF(373,"Let's create a saga that listens to the "),e.j41(374,"code"),e.EFF(375,"HeroKilledDragonEvent"),e.k0s(),e.EFF(376," and dispatches the "),e.j41(377,"code"),e.EFF(378,"DropAncientItemCommand"),e.k0s(),e.EFF(379," command."),e.k0s(),e.j41(380,"app-copy-button",20)(381,"span",21),e.EFF(382),e.nI1(383,"extension"),e.nrm(384,"app-tabs",null,8),e.k0s(),e.j41(386,"pre")(387,"code",22),e.EFF(388,"\n@Injectable()\nexport class HeroesGameSagas {\n  @Saga()\n  dragonKilled = (events$: Observable<any>): Observable<ICommand> => {\n    return events$.pipe(\n      ofType(HeroKilledDragonEvent),\n      map((event) => new DropAncientItemCommand(event.heroId, fakeItemID)),\n    );\n  }\n}\n"),e.k0s()(),e.j41(389,"pre")(390,"code",22),e.EFF(391,"\n@Injectable()\nexport class HeroesGameSagas {\n  @Saga()\n  dragonKilled = (events$) => {\n    return events$.pipe(\n      ofType(HeroKilledDragonEvent),\n      map((event) => new DropAncientItemCommand(event.heroId, fakeItemID)),\n    );\n  }\n}\n"),e.k0s()()(),e.j41(392,"blockquote",25)(393,"strong"),e.EFF(394,"Hint"),e.k0s(),e.EFF(395," The "),e.j41(396,"code"),e.EFF(397,"ofType"),e.k0s(),e.EFF(398," operator and the "),e.j41(399,"code"),e.EFF(400,"@Saga()"),e.k0s(),e.EFF(401," decorator are exported from the "),e.j41(402,"code"),e.EFF(403,"@nestjs/cqrs"),e.k0s(),e.EFF(404," package.\n"),e.k0s(),e.j41(405,"p"),e.EFF(406,"The "),e.j41(407,"code"),e.EFF(408,"@Saga()"),e.k0s(),e.EFF(409," decorator marks the method as a saga. The "),e.j41(410,"code"),e.EFF(411,"events$"),e.k0s(),e.EFF(412," argument is an Observable stream of all events. The "),e.j41(413,"code"),e.EFF(414,"ofType"),e.k0s(),e.EFF(415," operator filters the stream by the specified event type. The "),e.j41(416,"code"),e.EFF(417,"map"),e.k0s(),e.EFF(418," operator maps the event to a new command instance."),e.k0s(),e.j41(419,"p"),e.EFF(420,"In this example, we map the "),e.j41(421,"code"),e.EFF(422,"HeroKilledDragonEvent"),e.k0s(),e.EFF(423," to the "),e.j41(424,"code"),e.EFF(425,"DropAncientItemCommand"),e.k0s(),e.EFF(426," command. The "),e.j41(427,"code"),e.EFF(428,"DropAncientItemCommand"),e.k0s(),e.EFF(429," command is then auto-dispatched by the "),e.j41(430,"code"),e.EFF(431,"CommandBus"),e.k0s(),e.EFF(432,"."),e.k0s(),e.j41(433,"h4",32)(434,"span"),e.EFF(435,"Setup"),e.k0s()(),e.j41(436,"p"),e.EFF(437,"To wrap up, we need to register all command handlers, event handlers, and sagas in the "),e.j41(438,"code"),e.EFF(439,"HeroesGameModule"),e.k0s(),e.EFF(440,":"),e.k0s(),e.j41(441,"app-copy-button",20)(442,"span",21),e.EFF(443),e.nI1(444,"extension"),e.nrm(445,"app-tabs",null,9),e.k0s(),e.j41(447,"pre")(448,"code",22),e.EFF(449,"\nexport const CommandHandlers = [KillDragonHandler, DropAncientItemHandler];\nexport const EventHandlers =  [HeroKilledDragonHandler, HeroFoundItemHandler];\n\n@Module({\n  imports: [CqrsModule],\n  controllers: [HeroesGameController],\n  providers: [\n    HeroesGameService,\n    HeroesGameSagas,\n    ...CommandHandlers,\n    ...EventHandlers,\n    HeroRepository,\n  ]\n})\nexport class HeroesGameModule {}\n"),e.k0s()()(),e.j41(450,"h4",33)(451,"span"),e.EFF(452,"Unhandled exceptions"),e.k0s()(),e.j41(453,"p"),e.EFF(454,"Event handlers are executed in the asynchronous manner. This means they should always handle all exceptions to prevent application from entering the inconsistent state. However, if an exception is not handled, the "),e.j41(455,"code"),e.EFF(456,"EventBus"),e.k0s(),e.EFF(457," will create the "),e.j41(458,"code"),e.EFF(459,"UnhandledExceptionInfo"),e.k0s(),e.EFF(460," object and push it to the "),e.j41(461,"code"),e.EFF(462,"UnhandledExceptionBus"),e.k0s(),e.EFF(463," stream. This stream is an "),e.j41(464,"code"),e.EFF(465,"Observable"),e.k0s(),e.EFF(466," which can be used to process unhandled exceptions."),e.k0s(),e.j41(467,"app-copy-button")(468,"pre")(469,"code",22),e.EFF(470,"\nprivate destroy$ = new Subject<void>();\n\nconstructor(private unhandledExceptionsBus: UnhandledExceptionBus) {\n  this.unhandledExceptionsBus\n    .pipe(takeUntil(this.destroy$))\n    .subscribe((exceptionInfo) => {\n      // Handle exception here\n      // e.g. send it to external service, terminate process, or publish a new event\n    });\n}\n\nonModuleDestroy() {\n  this.destroy$.next();\n  this.destroy$.complete();\n}\n"),e.k0s()()(),e.j41(471,"p"),e.EFF(472,"To filter out exceptions, we can use the "),e.j41(473,"code"),e.EFF(474,"ofType"),e.k0s(),e.EFF(475," operator, as follows:"),e.k0s(),e.j41(476,"app-copy-button")(477,"pre")(478,"code",22),e.EFF(479,"\nthis.unhandledExceptionsBus.pipe(takeUntil(this.destroy$), UnhandledExceptionBus.ofType(TransactionNotAllowedException)).subscribe((exceptionInfo) => {\n  // Handle exception here\n});\n"),e.k0s()()(),e.j41(480,"p"),e.EFF(481,"Where "),e.j41(482,"code"),e.EFF(483,"TransactionNotAllowedException"),e.k0s(),e.EFF(484," is the exception we want to filter out."),e.k0s(),e.j41(485,"p"),e.EFF(486,"The "),e.j41(487,"code"),e.EFF(488,"UnhandledExceptionInfo"),e.k0s(),e.EFF(489," object contains the following properties:"),e.k0s(),e.j41(490,"app-copy-button")(491,"pre")(492,"code",22),e.EFF(493,"\nexport interface UnhandledExceptionInfo<Cause = IEvent | ICommand, Exception = any> {\n  /**\n   * The exception that was thrown.\n   */\n  exception: Exception;\n  /**\n   * The cause of the exception (event or command reference).\n   */\n  cause: Cause;\n}\n"),e.k0s()()(),e.j41(494,"h4",34)(495,"span"),e.EFF(496,"Subscribing to all events"),e.k0s()(),e.j41(497,"p")(498,"code"),e.EFF(499,"CommandBus"),e.k0s(),e.EFF(500,", "),e.j41(501,"code"),e.EFF(502,"QueryBus"),e.k0s(),e.EFF(503," and "),e.j41(504,"code"),e.EFF(505,"EventBus"),e.k0s(),e.EFF(506," are all "),e.j41(507,"strong"),e.EFF(508,"Observables"),e.k0s(),e.EFF(509,". This means that we can subscribe to the entire stream and, for example, process all events. For example, we can log all events to the console, or save them to the event store."),e.k0s(),e.j41(510,"app-copy-button")(511,"pre")(512,"code",22),e.EFF(513,"\nprivate destroy$ = new Subject<void>();\n\nconstructor(private eventBus: EventBus) {\n  this.eventBus\n    .pipe(takeUntil(this.destroy$))\n    .subscribe((event) => {\n      // Save events to database\n    });\n}\n\nonModuleDestroy() {\n  this.destroy$.next();\n  this.destroy$.complete();\n}\n"),e.k0s()()(),e.j41(514,"h4",35)(515,"span"),e.EFF(516,"Example"),e.k0s()(),e.j41(517,"p"),e.EFF(518,"A working example is available "),e.j41(519,"a",36),e.EFF(520,"here"),e.k0s(),e.EFF(521,"."),e.k0s()()),2&s){const a=e.sdS(69),i=e.sdS(92),c=e.sdS(120),p=e.sdS(190),r=e.sdS(216),u=e.sdS(239),h=e.sdS(309),E=e.sdS(385),k=e.sdS(446);e.R7$(66),e.SpI(" ",e.i5U(67,37,"heroes-game.service",a.isJsActive),"\n"),e.R7$(4),e.AVh("hide",a.isJsActive),e.R7$(3),e.AVh("hide",!a.isJsActive),e.R7$(16),e.SpI(" ",e.i5U(90,40,"kill-dragon.command",i.isJsActive),"\n"),e.R7$(4),e.AVh("hide",i.isJsActive),e.R7$(3),e.AVh("hide",!i.isJsActive),e.R7$(21),e.SpI(" ",e.i5U(118,43,"kill-dragon.handler",c.isJsActive),"\n"),e.R7$(4),e.AVh("hide",c.isJsActive),e.R7$(3),e.AVh("hide",!c.isJsActive),e.R7$(63),e.SpI(" ",e.i5U(188,46,"hero-killed-dragon.event",p.isJsActive),"\n"),e.R7$(4),e.AVh("hide",p.isJsActive),e.R7$(3),e.AVh("hide",!p.isJsActive),e.R7$(19),e.SpI(" ",e.i5U(214,49,"hero.model",r.isJsActive),"\n"),e.R7$(4),e.AVh("hide",r.isJsActive),e.R7$(3),e.AVh("hide",!r.isJsActive),e.R7$(16),e.SpI(" ",e.i5U(237,52,"kill-dragon.handler",u.isJsActive),"\n"),e.R7$(4),e.AVh("hide",u.isJsActive),e.R7$(3),e.AVh("hide",!u.isJsActive),e.R7$(63),e.SpI(" ",e.i5U(307,55,"hero-killed-dragon.handler",h.isJsActive),"\n"),e.R7$(76),e.SpI(" ",e.i5U(383,58,"heroes-game.saga",E.isJsActive),"\n"),e.R7$(4),e.AVh("hide",E.isJsActive),e.R7$(3),e.AVh("hide",!E.isJsActive),e.R7$(54),e.SpI(" ",e.i5U(444,61,"heroes-game.module",k.isJsActive),"\n")}},dependencies:[g.O,d.a,F.z,j.Wk,f.M],encapsulation:2,changeDetection:0})}return t})(),M=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-crud-generator"]],features:[e.Vt3],decls:130,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/crud-generator.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","crud-generator-typescript-only"],["appAnchor","","id","introduction"],["routerLink","/cli/overview"],[1,"info"],["appAnchor","","id","generating-a-new-resource"],[1,"language-shell"],[1,"language-typescript"],[1,"warning"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"CRUD generator (TypeScript only)"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Throughout the life span of a project, when we build new features, we often need to add new resources to our application. These resources typically require multiple, repetitive operations that we have to repeat each time we define a new resource."),e.k0s(),e.j41(9,"h4",6)(10,"span"),e.EFF(11,"Introduction"),e.k0s()(),e.j41(12,"p"),e.EFF(13,"Let's imagine a real-world scenario, where we need to expose CRUD endpoints for 2 entities, let's say "),e.j41(14,"strong"),e.EFF(15,"User"),e.k0s(),e.EFF(16," and "),e.j41(17,"strong"),e.EFF(18,"Product"),e.k0s(),e.EFF(19," entities.\nFollowing the best practices, for each entity we would have to perform several operations, as follows:"),e.k0s(),e.j41(20,"ul")(21,"li"),e.EFF(22,"Generate a module ("),e.j41(23,"code"),e.EFF(24,"nest g mo"),e.k0s(),e.EFF(25,") to keep code organized and establish clear boundaries (grouping related components)"),e.k0s(),e.j41(26,"li"),e.EFF(27,"Generate a controller ("),e.j41(28,"code"),e.EFF(29,"nest g co"),e.k0s(),e.EFF(30,") to define CRUD routes (or queries/mutations for GraphQL applications)"),e.k0s(),e.j41(31,"li"),e.EFF(32,"Generate a service ("),e.j41(33,"code"),e.EFF(34,"nest g s"),e.k0s(),e.EFF(35,") to implement & isolate business logic"),e.k0s(),e.j41(36,"li"),e.EFF(37,"Generate an entity class/interface to represent the resource data shape"),e.k0s(),e.j41(38,"li"),e.EFF(39,"Generate Data Transfer Objects (or inputs for GraphQL applications) to define how the data will be sent over the network"),e.k0s()(),e.j41(40,"p"),e.EFF(41,"That's a lot of steps!"),e.k0s(),e.j41(42,"p"),e.EFF(43,"To help speed up this repetitive process, "),e.j41(44,"a",7),e.EFF(45,"Nest CLI"),e.k0s(),e.EFF(46," provides a generator (schematic) that automatically generates all the boilerplate code to help us avoid doing all of this, and make the developer experience much simpler."),e.k0s(),e.j41(47,"blockquote",8)(48,"strong"),e.EFF(49,"Note"),e.k0s(),e.EFF(50," The schematic supports generating "),e.j41(51,"strong"),e.EFF(52,"HTTP"),e.k0s(),e.EFF(53," controllers, "),e.j41(54,"strong"),e.EFF(55,"Microservice"),e.k0s(),e.EFF(56," controllers, "),e.j41(57,"strong"),e.EFF(58,"GraphQL"),e.k0s(),e.EFF(59," resolvers (both code first and schema first), and "),e.j41(60,"strong"),e.EFF(61,"WebSocket"),e.k0s(),e.EFF(62," Gateways.\n"),e.k0s(),e.j41(63,"h4",9)(64,"span"),e.EFF(65,"Generating a new resource"),e.k0s()(),e.j41(66,"p"),e.EFF(67,"To create a new resource, simply run the following command in the root directory of your project:"),e.k0s(),e.j41(68,"pre")(69,"code",10),e.EFF(70,"\n$ nest g resource\n"),e.k0s()(),e.j41(71,"p")(72,"code"),e.EFF(73,"nest g resource"),e.k0s(),e.EFF(74," command not only generates all the NestJS building blocks (module, service, controller classes) but also an entity class, DTO classes as well as the testing ("),e.j41(75,"code"),e.EFF(76,".spec"),e.k0s(),e.EFF(77,") files."),e.k0s(),e.j41(78,"p"),e.EFF(79,"Below you can see the generated controller file (for REST API):"),e.k0s(),e.j41(80,"app-copy-button")(81,"pre")(82,"code",11),e.EFF(83,"\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n"),e.k0s()()(),e.j41(84,"p"),e.EFF(85,"Also, it automatically creates placeholders for all the CRUD endpoints (routes for REST APIs, queries and mutations for GraphQL, message subscribes for both Microservices and WebSocket Gateways) - all without having to lift a finger."),e.k0s(),e.j41(86,"blockquote",12)(87,"strong"),e.EFF(88,"Note"),e.k0s(),e.EFF(89," Generated service classes are "),e.j41(90,"strong"),e.EFF(91,"not"),e.k0s(),e.EFF(92," tied to any specific "),e.j41(93,"strong"),e.EFF(94,"ORM (or data source)"),e.k0s(),e.EFF(95,". This makes the generator generic enough to meet the needs of any project. By default, all methods will contain placeholders, allowing you to populate it with the data sources specific to your project.\n"),e.k0s(),e.j41(96,"p"),e.EFF(97,"Likewise, if you want to generate resolvers for a GraphQL application, simply select the "),e.j41(98,"code"),e.EFF(99,"GraphQL (code first)"),e.k0s(),e.EFF(100," (or "),e.j41(101,"code"),e.EFF(102,"GraphQL (schema first)"),e.k0s(),e.EFF(103,") as your transport layer."),e.k0s(),e.j41(104,"p"),e.EFF(105,"In this case, NestJS will generate a resolver class instead of a REST API controller:"),e.k0s(),e.j41(106,"pre")(107,"code",10),e.EFF(108,"\n$ nest g resource users\n\n> ? What transport layer do you use? GraphQL (code first)\n> ? Would you like to generate CRUD entry points? Yes\n> CREATE src/users/users.module.ts (224 bytes)\n> CREATE src/users/users.resolver.spec.ts (525 bytes)\n> CREATE src/users/users.resolver.ts (1109 bytes)\n> CREATE src/users/users.service.spec.ts (453 bytes)\n> CREATE src/users/users.service.ts (625 bytes)\n> CREATE src/users/dto/create-user.input.ts (195 bytes)\n> CREATE src/users/dto/update-user.input.ts (281 bytes)\n> CREATE src/users/entities/user.entity.ts (187 bytes)\n> UPDATE src/app.module.ts (312 bytes)\n"),e.k0s()(),e.j41(109,"blockquote",8)(110,"strong"),e.EFF(111,"Hint"),e.k0s(),e.EFF(112," To avoid generating test files, you can pass the "),e.j41(113,"code"),e.EFF(114,"--no-spec"),e.k0s(),e.EFF(115," flag, as follows: "),e.j41(116,"code"),e.EFF(117,"nest g resource users --no-spec"),e.k0s()(),e.j41(118,"p"),e.EFF(119,"We can see below, that not only were all boilerplate mutations and queries created, but everything is all tied together. We're utilizing the "),e.j41(120,"code"),e.EFF(121,"UsersService"),e.k0s(),e.EFF(122,", "),e.j41(123,"code"),e.EFF(124,"User"),e.k0s(),e.EFF(125," Entity, and our DTO's."),e.k0s(),e.j41(126,"app-copy-button")(127,"pre")(128,"code",11),e.EFF(129,"\nimport { Resolver, Query, Mutation, Args, Int } from '@nestjs/graphql';\nimport { UsersService } from './users.service';\nimport { User } from './entities/user.entity';\nimport { CreateUserInput } from './dto/create-user.input';\nimport { UpdateUserInput } from './dto/update-user.input';\n\n@Resolver(() => User)\nexport class UsersResolver {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Mutation(() => User)\n  createUser(@Args('createUserInput') createUserInput: CreateUserInput) {\n    return this.usersService.create(createUserInput);\n  }\n\n  @Query(() => [User], { name: 'users' })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Query(() => User, { name: 'user' })\n  findOne(@Args('id', { type: () => Int }) id: number) {\n    return this.usersService.findOne(id);\n  }\n\n  @Mutation(() => User)\n  updateUser(@Args('updateUserInput') updateUserInput: UpdateUserInput) {\n    return this.usersService.update(updateUserInput.id, updateUserInput);\n  }\n\n  @Mutation(() => User)\n  removeUser(@Args('id', { type: () => Int }) id: number) {\n    return this.usersService.remove(id);\n  }\n}\n"),e.k0s()()()())},dependencies:[d.a,F.z,j.Wk],encapsulation:2,changeDetection:0})}return t})(),P=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-documentation"]],features:[e.Vt3],decls:53,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/documentation.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","documentation"],["appAnchor","","id","setup"],[1,"language-bash"],["appAnchor","","id","generation"],["rel","nofollow","target","_blank","href","https://compodoc.app/guides/usage.html"],["rel","nofollow","target","_blank","href","http://localhost:8080"],["src","/assets/documentation-compodoc-1.jpg"],["src","/assets/documentation-compodoc-2.jpg"],["appAnchor","","id","contribute"],["rel","nofollow","target","_blank","href","https://github.com/compodoc/compodoc"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Documentation"),e.k0s(),e.j41(7,"p")(8,"strong"),e.EFF(9,"Compodoc"),e.k0s(),e.EFF(10," is a documentation tool for Angular applications. Since Nest and Angular share similar project and code structures, "),e.j41(11,"strong"),e.EFF(12,"Compodoc"),e.k0s(),e.EFF(13," works with Nest applications as well."),e.k0s(),e.j41(14,"h4",6)(15,"span"),e.EFF(16,"Setup"),e.k0s()(),e.j41(17,"p"),e.EFF(18,"Setting up Compodoc inside an existing Nest project is very simple. Start by adding the dev-dependency with the following command in your OS terminal:"),e.k0s(),e.j41(19,"pre")(20,"code",7),e.EFF(21,"\n$ npm i -D @compodoc/compodoc\n"),e.k0s()(),e.j41(22,"h4",8)(23,"span"),e.EFF(24,"Generation"),e.k0s()(),e.j41(25,"p"),e.EFF(26,"Generate project documentation using the following command (npm 6 is required for "),e.j41(27,"code"),e.EFF(28,"npx"),e.k0s(),e.EFF(29," support). See "),e.j41(30,"a",9),e.EFF(31,"the official documentation"),e.k0s(),e.EFF(32," for more options."),e.k0s(),e.j41(33,"pre")(34,"code",7),e.EFF(35,"\n$ npx @compodoc/compodoc -p tsconfig.json -s\n"),e.k0s()(),e.j41(36,"p"),e.EFF(37,"Open your browser and navigate to "),e.j41(38,"a",10),e.EFF(39,"http://localhost:8080"),e.k0s(),e.EFF(40,". You should see an initial Nest CLI project:"),e.k0s(),e.j41(41,"figure"),e.nrm(42,"img",11),e.k0s(),e.j41(43,"figure"),e.nrm(44,"img",12),e.k0s(),e.j41(45,"h4",13)(46,"span"),e.EFF(47,"Contribute"),e.k0s()(),e.j41(48,"p"),e.EFF(49,"You can participate and contribute to the Compodoc project "),e.j41(50,"a",14),e.EFF(51,"here"),e.k0s(),e.EFF(52,"."),e.k0s()())},dependencies:[d.a],encapsulation:2,changeDetection:0})}return t})(),U=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-hot-reload"]],features:[e.Vt3],decls:250,vars:4,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/hot-reload.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","hot-reload"],["rel","nofollow","target","_blank","href","https://github.com/webpack/webpack"],[1,"warning"],["id","with-cli"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/cli/overview"],["appAnchor","","id","installation"],[1,"language-bash"],[1,"info"],["appAnchor","","id","configuration"],[1,"language-typescript"],["appAnchor","","id","hot-module-replacement"],[1,"language-json"],["id","without-cli"],["appAnchor","","id","installation-1"],["appAnchor","","id","configuration-1"],["appAnchor","","id","hot-module-replacement-1"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/08-webpack"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Hot Reload"),e.k0s(),e.j41(7,"p"),e.EFF(8,"The highest impact on your application's bootstrapping process is "),e.j41(9,"strong"),e.EFF(10,"TypeScript compilation"),e.k0s(),e.EFF(11,". Fortunately, with "),e.j41(12,"a",6),e.EFF(13,"webpack"),e.k0s(),e.EFF(14," HMR (Hot-Module Replacement), we don't need to recompile the entire project each time a change occurs. This significantly decreases the amount of time necessary to instantiate your application, and makes iterative development a lot easier."),e.k0s(),e.j41(15,"blockquote",7)(16,"strong"),e.EFF(17,"Warning"),e.k0s(),e.EFF(18," Note that "),e.j41(19,"code"),e.EFF(20,"webpack"),e.k0s(),e.EFF(21," won't automatically copy your assets (e.g. "),e.j41(22,"code"),e.EFF(23,"graphql"),e.k0s(),e.EFF(24," files) to the "),e.j41(25,"code"),e.EFF(26,"dist"),e.k0s(),e.EFF(27," folder. Similarly, "),e.j41(28,"code"),e.EFF(29,"webpack"),e.k0s(),e.EFF(30," is not compatible with glob static paths (e.g., the "),e.j41(31,"code"),e.EFF(32,"entities"),e.k0s(),e.EFF(33," property in "),e.j41(34,"code"),e.EFF(35,"TypeOrmModule"),e.k0s(),e.EFF(36,").\n"),e.k0s(),e.j41(37,"h3",8),e.EFF(38,"With CLI"),e.k0s(),e.j41(39,"p"),e.EFF(40,"If you are using the "),e.j41(41,"a",9),e.EFF(42,"Nest CLI"),e.k0s(),e.EFF(43,", the configuration process is pretty straightforward. The CLI wraps "),e.j41(44,"code"),e.EFF(45,"webpack"),e.k0s(),e.EFF(46,", which allows use of the "),e.j41(47,"code"),e.EFF(48,"HotModuleReplacementPlugin"),e.k0s(),e.EFF(49,"."),e.k0s(),e.j41(50,"h4",10)(51,"span"),e.EFF(52,"Installation"),e.k0s()(),e.j41(53,"p"),e.EFF(54,"First install the required packages:"),e.k0s(),e.j41(55,"pre")(56,"code",11),e.EFF(57,"\n$ npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack\n"),e.k0s()(),e.j41(58,"blockquote",12)(59,"strong"),e.EFF(60,"Hint"),e.k0s(),e.EFF(61," If you use "),e.j41(62,"strong"),e.EFF(63,"Yarn Berry"),e.k0s(),e.EFF(64," (not classic Yarn), install the "),e.j41(65,"code"),e.EFF(66,"webpack-pnp-externals"),e.k0s(),e.EFF(67," package instead of the "),e.j41(68,"code"),e.EFF(69,"webpack-node-externals"),e.k0s(),e.EFF(70,".\n"),e.k0s(),e.j41(71,"h4",13)(72,"span"),e.EFF(73,"Configuration"),e.k0s()(),e.j41(74,"p"),e.EFF(75,"Once the installation is complete, create a "),e.j41(76,"code"),e.EFF(77,"webpack-hmr.config.js"),e.k0s(),e.EFF(78," file in the root directory of your application."),e.k0s(),e.j41(79,"app-copy-button")(80,"pre")(81,"code",14),e.EFF(82,"\nconst nodeExternals = require('webpack-node-externals');\nconst { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');\n\nmodule.exports = function (options, webpack) {\n  return {\n    ...options,\n    entry: ['webpack/hot/poll?100', options.entry],\n    externals: [\n      nodeExternals({\n        allowlist: ['webpack/hot/poll?100'],\n      }),\n    ],\n    plugins: [\n      ...options.plugins,\n      new webpack.HotModuleReplacementPlugin(),\n      new webpack.WatchIgnorePlugin({\n        paths: [/\\.js$/, /\\.d\\.ts$/],\n      }),\n      new RunScriptWebpackPlugin({ name: options.output.filename, autoRestart: false }),\n    ],\n  };\n};\n"),e.k0s()()(),e.j41(83,"blockquote",12)(84,"strong"),e.EFF(85,"Hint"),e.k0s(),e.EFF(86," With "),e.j41(87,"strong"),e.EFF(88,"Yarn Berry"),e.k0s(),e.EFF(89," (not classic Yarn), instead of using the "),e.j41(90,"code"),e.EFF(91,"nodeExternals"),e.k0s(),e.EFF(92," in the "),e.j41(93,"code"),e.EFF(94,"externals"),e.k0s(),e.EFF(95," configuration property, use the "),e.j41(96,"code"),e.EFF(97,"WebpackPnpExternals"),e.k0s(),e.EFF(98," from "),e.j41(99,"code"),e.EFF(100,"webpack-pnp-externals"),e.k0s(),e.EFF(101," package: "),e.j41(102,"code"),e.EFF(103),e.k0s(),e.EFF(104,".\n"),e.k0s(),e.j41(105,"p"),e.EFF(106,"This function takes the original object containing the default webpack configuration as a first argument, and the reference to the underlying "),e.j41(107,"code"),e.EFF(108,"webpack"),e.k0s(),e.EFF(109," package used by the Nest CLI as the second one. Also, it returns a modified webpack configuration with the "),e.j41(110,"code"),e.EFF(111,"HotModuleReplacementPlugin"),e.k0s(),e.EFF(112,", "),e.j41(113,"code"),e.EFF(114,"WatchIgnorePlugin"),e.k0s(),e.EFF(115,", and "),e.j41(116,"code"),e.EFF(117,"RunScriptWebpackPlugin"),e.k0s(),e.EFF(118," plugins."),e.k0s(),e.j41(119,"h4",15)(120,"span"),e.EFF(121,"Hot-Module Replacement"),e.k0s()(),e.j41(122,"p"),e.EFF(123,"To enable "),e.j41(124,"strong"),e.EFF(125,"HMR"),e.k0s(),e.EFF(126,", open the application entry file ("),e.j41(127,"code"),e.EFF(128,"main.ts"),e.k0s(),e.EFF(129,") and add the following webpack-related instructions:"),e.k0s(),e.j41(130,"app-copy-button")(131,"pre")(132,"code",14),e.EFF(133,"\ndeclare const module: any;\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(process.env.PORT ?? 3000);\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => app.close());\n  }\n}\nbootstrap();\n"),e.k0s()()(),e.j41(134,"p"),e.EFF(135,"To simplify the execution process, add a script to your "),e.j41(136,"code"),e.EFF(137,"package.json"),e.k0s(),e.EFF(138," file."),e.k0s(),e.j41(139,"pre")(140,"code",16),e.EFF(141,'\n"start:dev": "nest build --webpack --webpackPath webpack-hmr.config.js --watch"\n'),e.k0s()(),e.j41(142,"p"),e.EFF(143,"Now simply open your command line and run the following command:"),e.k0s(),e.j41(144,"pre")(145,"code",11),e.EFF(146,"\n$ npm run start:dev\n"),e.k0s()(),e.j41(147,"h3",17),e.EFF(148,"Without CLI"),e.k0s(),e.j41(149,"p"),e.EFF(150,"If you are not using the "),e.j41(151,"a",9),e.EFF(152,"Nest CLI"),e.k0s(),e.EFF(153,", the configuration will be slightly more complex (will require more manual steps)."),e.k0s(),e.j41(154,"h4",18)(155,"span"),e.EFF(156,"Installation"),e.k0s()(),e.j41(157,"p"),e.EFF(158,"First install the required packages:"),e.k0s(),e.j41(159,"pre")(160,"code",11),e.EFF(161,"\n$ npm i --save-dev webpack webpack-cli webpack-node-externals ts-loader run-script-webpack-plugin\n"),e.k0s()(),e.j41(162,"blockquote",12)(163,"strong"),e.EFF(164,"Hint"),e.k0s(),e.EFF(165," If you use "),e.j41(166,"strong"),e.EFF(167,"Yarn Berry"),e.k0s(),e.EFF(168," (not classic Yarn), install the "),e.j41(169,"code"),e.EFF(170,"webpack-pnp-externals"),e.k0s(),e.EFF(171," package instead of the "),e.j41(172,"code"),e.EFF(173,"webpack-node-externals"),e.k0s(),e.EFF(174,".\n"),e.k0s(),e.j41(175,"h4",19)(176,"span"),e.EFF(177,"Configuration"),e.k0s()(),e.j41(178,"p"),e.EFF(179,"Once the installation is complete, create a "),e.j41(180,"code"),e.EFF(181,"webpack.config.js"),e.k0s(),e.EFF(182," file in the root directory of your application."),e.k0s(),e.j41(183,"app-copy-button")(184,"pre")(185,"code",14),e.EFF(186,"\nconst webpack = require('webpack');\nconst path = require('path');\nconst nodeExternals = require('webpack-node-externals');\nconst { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');\n\nmodule.exports = {\n  entry: ['webpack/hot/poll?100', './src/main.ts'],\n  target: 'node',\n  externals: [\n    nodeExternals({\n      allowlist: ['webpack/hot/poll?100'],\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  mode: 'development',\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js'],\n  },\n  plugins: [new webpack.HotModuleReplacementPlugin(), new RunScriptWebpackPlugin({ name: 'server.js', autoRestart: false })],\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'server.js',\n  },\n};\n"),e.k0s()()(),e.j41(187,"blockquote",12)(188,"strong"),e.EFF(189,"Hint"),e.k0s(),e.EFF(190," With "),e.j41(191,"strong"),e.EFF(192,"Yarn Berry"),e.k0s(),e.EFF(193," (not classic Yarn), instead of using the "),e.j41(194,"code"),e.EFF(195,"nodeExternals"),e.k0s(),e.EFF(196," in the "),e.j41(197,"code"),e.EFF(198,"externals"),e.k0s(),e.EFF(199," configuration property, use the "),e.j41(200,"code"),e.EFF(201,"WebpackPnpExternals"),e.k0s(),e.EFF(202," from "),e.j41(203,"code"),e.EFF(204,"webpack-pnp-externals"),e.k0s(),e.EFF(205," package: "),e.j41(206,"code"),e.EFF(207),e.k0s(),e.EFF(208,".\n"),e.k0s(),e.j41(209,"p"),e.EFF(210,"This configuration tells webpack a few essential things about your application: location of the entry file, which directory should be used to hold "),e.j41(211,"strong"),e.EFF(212,"compiled"),e.k0s(),e.EFF(213," files, and what kind of loader we want to use to compile source files. Generally, you should be able to use this file as-is, even if you don't fully understand all of the options."),e.k0s(),e.j41(214,"h4",20)(215,"span"),e.EFF(216,"Hot-Module Replacement"),e.k0s()(),e.j41(217,"p"),e.EFF(218,"To enable "),e.j41(219,"strong"),e.EFF(220,"HMR"),e.k0s(),e.EFF(221,", open the application entry file ("),e.j41(222,"code"),e.EFF(223,"main.ts"),e.k0s(),e.EFF(224,") and add the following webpack-related instructions:"),e.k0s(),e.j41(225,"app-copy-button")(226,"pre")(227,"code",14),e.EFF(228,"\ndeclare const module: any;\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(process.env.PORT ?? 3000);\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => app.close());\n  }\n}\nbootstrap();\n"),e.k0s()()(),e.j41(229,"p"),e.EFF(230,"To simplify the execution process, add a script to your "),e.j41(231,"code"),e.EFF(232,"package.json"),e.k0s(),e.EFF(233," file."),e.k0s(),e.j41(234,"pre")(235,"code",16),e.EFF(236,'\n"start:dev": "webpack --config webpack.config.js --watch"\n'),e.k0s()(),e.j41(237,"p"),e.EFF(238,"Now simply open your command line and run the following command:"),e.k0s(),e.j41(239,"pre")(240,"code",11),e.EFF(241,"\n$ npm run start:dev\n"),e.k0s()(),e.j41(242,"h4",21)(243,"span"),e.EFF(244,"Example"),e.k0s()(),e.j41(245,"p"),e.EFF(246,"A working example is available "),e.j41(247,"a",22),e.EFF(248,"here"),e.k0s(),e.EFF(249,"."),e.k0s()()),2&s&&(e.R7$(103),e.Lme("WebpackPnpExternals(","{"," exclude: ['webpack/hot/poll?100'] ","}",")"),e.R7$(104),e.Lme("WebpackPnpExternals(","{"," exclude: ['webpack/hot/poll?100'] ","}",")"))},dependencies:[d.a,F.z],encapsulation:2,changeDetection:0})}return t})(),q=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-mikroorm"]],features:[e.Vt3],decls:326,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/mikroorm.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","mikroorm"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/mikro-orm/nestjs"],["appAnchor","","id","installation"],[1,"language-bash"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/usage-with-sql/"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/configuration"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/installation#setting-up-the-commandline-tool"],[1,"language-ts"],["appAnchor","","id","repositories"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/repositories"],["appAnchor","","id","using-custom-repositories"],["appAnchor","","id","load-entities-automatically"],["appAnchor","","id","serialization"],[1,"warning"],["href","/techniques/serialization"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/serializing"],["appAnchor","","id","request-scoped-handlers-in-queues"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/identity-map"],["appAnchor","","id","testing"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/mikro-orm/nestjs-realworld-example-app"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"MikroORM"),e.k0s(),e.j41(7,"p"),e.EFF(8,"This recipe is here to help users get started with MikroORM in Nest. MikroORM is the TypeScript ORM for Node.js based on Data Mapper, Unit of Work and Identity Map patterns. It is a great alternative to TypeORM and migration from TypeORM should be fairly easy. The complete documentation on MikroORM can be found "),e.j41(9,"a",6),e.EFF(10,"here"),e.k0s(),e.EFF(11,"."),e.k0s(),e.j41(12,"blockquote",7)(13,"strong"),e.EFF(14,"info"),e.k0s(),e.j41(15,"code"),e.EFF(16,"@mikro-orm/nestjs"),e.k0s(),e.EFF(17," is a third party package and is not managed by the NestJS core team. Please report any issues found with the library in the "),e.j41(18,"a",8),e.EFF(19,"appropriate repository"),e.k0s(),e.EFF(20,".\n"),e.k0s(),e.j41(21,"h4",9)(22,"span"),e.EFF(23,"Installation"),e.k0s()(),e.j41(24,"p"),e.EFF(25,"Easiest way to integrate MikroORM to Nest is via "),e.j41(26,"a",8)(27,"code"),e.EFF(28,"@mikro-orm/nestjs"),e.k0s(),e.EFF(29," module"),e.k0s(),e.EFF(30,".\nSimply install it next to Nest, MikroORM and underlying driver:"),e.k0s(),e.j41(31,"pre")(32,"code",10),e.EFF(33,"\n$ npm i @mikro-orm/core @mikro-orm/nestjs @mikro-orm/sqlite\n"),e.k0s()(),e.j41(34,"p"),e.EFF(35,"MikroORM also supports "),e.j41(36,"code"),e.EFF(37,"postgres"),e.k0s(),e.EFF(38,", "),e.j41(39,"code"),e.EFF(40,"sqlite"),e.k0s(),e.EFF(41,", and "),e.j41(42,"code"),e.EFF(43,"mongo"),e.k0s(),e.EFF(44,". See the "),e.j41(45,"a",11),e.EFF(46,"official docs"),e.k0s(),e.EFF(47," for all drivers."),e.k0s(),e.j41(48,"p"),e.EFF(49,"Once the installation process is completed, we can import the "),e.j41(50,"code"),e.EFF(51,"MikroOrmModule"),e.k0s(),e.EFF(52," into the root "),e.j41(53,"code"),e.EFF(54,"AppModule"),e.k0s(),e.EFF(55,"."),e.k0s(),e.j41(56,"app-copy-button")(57,"pre")(58,"code",12),e.EFF(59,"\nimport { SqliteDriver } from '@mikro-orm/sqlite';\n\n@Module({\n  imports: [\n    MikroOrmModule.forRoot({\n      entities: ['./dist/entities'],\n      entitiesTs: ['./src/entities'],\n      dbName: 'my-db-name.sqlite3',\n      driver: SqliteDriver,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {\n}\n"),e.k0s()()(),e.j41(60,"p"),e.EFF(61,"The "),e.j41(62,"code"),e.EFF(63,"forRoot()"),e.k0s(),e.EFF(64," method accepts the same configuration object as "),e.j41(65,"code"),e.EFF(66,"init()"),e.k0s(),e.EFF(67," from the MikroORM package. Check "),e.j41(68,"a",13),e.EFF(69,"this page"),e.k0s(),e.EFF(70," for the complete configuration documentation."),e.k0s(),e.j41(71,"p"),e.EFF(72,"Alternatively we can "),e.j41(73,"a",14),e.EFF(74,"configure the CLI"),e.k0s(),e.EFF(75," by creating a configuration file "),e.j41(76,"code"),e.EFF(77,"mikro-orm.config.ts"),e.k0s(),e.EFF(78," and then call the "),e.j41(79,"code"),e.EFF(80,"forRoot()"),e.k0s(),e.EFF(81," without any arguments."),e.k0s(),e.j41(82,"app-copy-button")(83,"pre")(84,"code",12),e.EFF(85,"\n@Module({\n  imports: [\n    MikroOrmModule.forRoot(),\n  ],\n  ...\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(86,"p"),e.EFF(87,"But this won't work when you use a build tools that use tree shaking, for that it is better to provide the config explicitly:"),e.k0s(),e.j41(88,"app-copy-button")(89,"pre")(90,"code",12),e.EFF(91,"\nimport config from './mikro-orm.config'; // your ORM config\n\n@Module({\n  imports: [\n    MikroOrmModule.forRoot(config),\n  ],\n  ...\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(92,"p"),e.EFF(93,"Afterward, the "),e.j41(94,"code"),e.EFF(95,"EntityManager"),e.k0s(),e.EFF(96," will be available to inject across the entire project (without importing any module elsewhere)."),e.k0s(),e.j41(97,"app-copy-button")(98,"pre")(99,"code",15),e.EFF(100,"\n// Import everytyhing from your driver package or `@mikro-orm/knex`\nimport { EntityManager, MikroORM } from '@mikro-orm/sqlite';\n\n@Injectable()\nexport class MyService {\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly em: EntityManager,\n  ) {}\n}\n"),e.k0s()()(),e.j41(101,"blockquote",7)(102,"strong"),e.EFF(103,"info"),e.k0s(),e.EFF(104," Notice that the "),e.j41(105,"code"),e.EFF(106,"EntityManager"),e.k0s(),e.EFF(107," is imported from the "),e.j41(108,"code"),e.EFF(109,"@mikro-orm/driver"),e.k0s(),e.EFF(110," package, where driver is "),e.j41(111,"code"),e.EFF(112,"mysql"),e.k0s(),e.EFF(113,", "),e.j41(114,"code"),e.EFF(115,"sqlite"),e.k0s(),e.EFF(116,", "),e.j41(117,"code"),e.EFF(118,"postgres"),e.k0s(),e.EFF(119," or what driver you are using. In case you have "),e.j41(120,"code"),e.EFF(121,"@mikro-orm/knex"),e.k0s(),e.EFF(122," installed as a dependency, you can also import the "),e.j41(123,"code"),e.EFF(124,"EntityManager"),e.k0s(),e.EFF(125," from there.\n"),e.k0s(),e.j41(126,"h4",16)(127,"span"),e.EFF(128,"Repositories"),e.k0s()(),e.j41(129,"p"),e.EFF(130,"MikroORM supports the repository design pattern. For every entity, we can create a repository. Read the complete documentation on repositories "),e.j41(131,"a",17),e.EFF(132,"here"),e.k0s(),e.EFF(133,". To define which repositories should be registered in the current scope you can use the "),e.j41(134,"code"),e.EFF(135,"forFeature()"),e.k0s(),e.EFF(136," method. For example, in this way:"),e.k0s(),e.j41(137,"blockquote",7)(138,"strong"),e.EFF(139,"info"),e.k0s(),e.EFF(140," You should "),e.j41(141,"strong"),e.EFF(142,"not"),e.k0s(),e.EFF(143," register your base entities via "),e.j41(144,"code"),e.EFF(145,"forFeature()"),e.k0s(),e.EFF(146,", as there are no\nrepositories for those. On the other hand, base entities need to be part of the list in "),e.j41(147,"code"),e.EFF(148,"forRoot()"),e.k0s(),e.EFF(149," (or in the ORM config in general).\n"),e.k0s(),e.j41(150,"app-copy-button")(151,"pre")(152,"code",12),e.EFF(153,"\n// photo.module.ts\n@Module({\n  imports: [MikroOrmModule.forFeature([Photo])],\n  providers: [PhotoService],\n  controllers: [PhotoController],\n})\nexport class PhotoModule {}\n"),e.k0s()()(),e.j41(154,"p"),e.EFF(155,"and import it into the root "),e.j41(156,"code"),e.EFF(157,"AppModule"),e.k0s(),e.EFF(158,":"),e.k0s(),e.j41(159,"app-copy-button")(160,"pre")(161,"code",12),e.EFF(162,"\n// app.module.ts\n@Module({\n  imports: [MikroOrmModule.forRoot(...), PhotoModule],\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(163,"p"),e.EFF(164,"In this way we can inject the "),e.j41(165,"code"),e.EFF(166,"PhotoRepository"),e.k0s(),e.EFF(167," to the "),e.j41(168,"code"),e.EFF(169,"PhotoService"),e.k0s(),e.EFF(170," using the "),e.j41(171,"code"),e.EFF(172,"@InjectRepository()"),e.k0s(),e.EFF(173," decorator:"),e.k0s(),e.j41(174,"app-copy-button")(175,"pre")(176,"code",12),e.EFF(177,"\n@Injectable()\nexport class PhotoService {\n  constructor(\n    @InjectRepository(Photo)\n    private readonly photoRepository: EntityRepository<Photo>,\n  ) {}\n}\n"),e.k0s()()(),e.j41(178,"h4",18)(179,"span"),e.EFF(180,"Using custom repositories"),e.k0s()(),e.j41(181,"p"),e.EFF(182,"When using custom repositories, we no longer need the "),e.j41(183,"code"),e.EFF(184,"@InjectRepository()"),e.k0s(),e.EFF(185,"\ndecorator, as Nest DI resolved based on the class references."),e.k0s(),e.j41(186,"app-copy-button")(187,"pre")(188,"code",15),e.EFF(189,"\n// `**./author.entity.ts**`\n@Entity({ repository: () => AuthorRepository })\nexport class Author {\n  // to allow inference in `em.getRepository()`\n  [EntityRepositoryType]?: AuthorRepository;\n}\n\n// `**./author.repository.ts**`\nexport class AuthorRepository extends EntityRepository<Author> {\n  // your custom methods...\n}\n"),e.k0s()()(),e.j41(190,"p"),e.EFF(191,"As the custom repository name is the same as what "),e.j41(192,"code"),e.EFF(193,"getRepositoryToken()"),e.k0s(),e.EFF(194," would\nreturn, we do not need the "),e.j41(195,"code"),e.EFF(196,"@InjectRepository()"),e.k0s(),e.EFF(197," decorator anymore:"),e.k0s(),e.j41(198,"app-copy-button")(199,"pre")(200,"code",15),e.EFF(201,"\n@Injectable()\nexport class MyService {\n  constructor(private readonly repo: AuthorRepository) {}\n}\n"),e.k0s()()(),e.j41(202,"h4",19)(203,"span"),e.EFF(204,"Load entities automatically"),e.k0s()(),e.j41(205,"p"),e.EFF(206,"Manually adding entities to the entities array of the connection options can be\ntedious. In addition, referencing entities from the root module breaks application\ndomain boundaries and causes leaking implementation details to other parts of the\napplication. To solve this issue, static glob paths can be used."),e.k0s(),e.j41(207,"p"),e.EFF(208,"Note, however, that glob paths are not supported by webpack, so if you are building\nyour application within a monorepo, you won't be able to use them. To address this\nissue, an alternative solution is provided. To automatically load entities, set the\n"),e.j41(209,"code"),e.EFF(210,"autoLoadEntities"),e.k0s(),e.EFF(211," property of the configuration object (passed into the "),e.j41(212,"code"),e.EFF(213,"forRoot()"),e.k0s(),e.EFF(214,"\nmethod) to "),e.j41(215,"code"),e.EFF(216,"true"),e.k0s(),e.EFF(217,", as shown below:"),e.k0s(),e.j41(218,"app-copy-button")(219,"pre")(220,"code",15),e.EFF(221,"\n@Module({\n  imports: [\n    MikroOrmModule.forRoot({\n      ...\n      autoLoadEntities: true,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(222,"p"),e.EFF(223,"With that option specified, every entity registered through the "),e.j41(224,"code"),e.EFF(225,"forFeature()"),e.k0s(),e.EFF(226,"\nmethod will be automatically added to the entities array of the configuration\nobject."),e.k0s(),e.j41(227,"blockquote",7)(228,"strong"),e.EFF(229,"info"),e.k0s(),e.EFF(230," Note that entities that aren't registered through the "),e.j41(231,"code"),e.EFF(232,"forFeature()"),e.k0s(),e.EFF(233," method, but\nare only referenced from the entity (via a relationship), won't be included by\nway of the "),e.j41(234,"code"),e.EFF(235,"autoLoadEntities"),e.k0s(),e.EFF(236," setting.\n"),e.k0s(),e.j41(237,"blockquote",7)(238,"strong"),e.EFF(239,"info"),e.k0s(),e.EFF(240," Using "),e.j41(241,"code"),e.EFF(242,"autoLoadEntities"),e.k0s(),e.EFF(243," also has no effect on the MikroORM CLI - for that we\nstill need CLI config with the full list of entities. On the other hand, we can\nuse globs there, as the CLI won't go thru webpack.\n"),e.k0s(),e.j41(244,"h4",20)(245,"span"),e.EFF(246,"Serialization"),e.k0s()(),e.j41(247,"blockquote",21)(248,"strong"),e.EFF(249,"Note"),e.k0s(),e.EFF(250," MikroORM wraps every single entity relation in a "),e.j41(251,"code"),e.EFF(252,"Reference<T>"),e.k0s(),e.EFF(253," or a "),e.j41(254,"code"),e.EFF(255,"Collection<T>"),e.k0s(),e.EFF(256," object, in order to provide better type-safety. This will make "),e.j41(257,"a",22),e.EFF(258,"Nest's built-in serializer"),e.k0s(),e.EFF(259," blind to any wrapped relations. In other words, if you return MikroORM entities from your HTTP or WebSocket handlers, all of their relations will NOT be serialized.\n"),e.k0s(),e.j41(260,"p"),e.EFF(261,"Luckily, MikroORM provides a "),e.j41(262,"a",23),e.EFF(263,"serialization API"),e.k0s(),e.EFF(264," which can be used in lieu of "),e.j41(265,"code"),e.EFF(266,"ClassSerializerInterceptor"),e.k0s(),e.EFF(267,"."),e.k0s(),e.j41(268,"app-copy-button")(269,"pre")(270,"code",12),e.EFF(271,"\n@Entity()\nexport class Book {\n  @Property({ hidden: true }) // Equivalent of class-transformer's `@Exclude`\n  hiddenField = Date.now();\n\n  @Property({ persist: false }) // Similar to class-transformer's `@Expose()`. Will only exist in memory, and will be serialized.\n  count?: number;\n\n  @ManyToOne({\n    serializer: (value) => value.name,\n    serializedName: 'authorName',\n  }) // Equivalent of class-transformer's `@Transform()`\n  author: Author;\n}\n"),e.k0s()()(),e.j41(272,"h4",24)(273,"span"),e.EFF(274,"Request scoped handlers in queues"),e.k0s()(),e.j41(275,"p"),e.EFF(276,"As mentioned in the "),e.j41(277,"a",25),e.EFF(278,"docs"),e.k0s(),e.EFF(279,", we need a clean state for each request. That is handled automatically thanks to the "),e.j41(280,"code"),e.EFF(281,"RequestContext"),e.k0s(),e.EFF(282," helper registered via middleware."),e.k0s(),e.j41(283,"p"),e.EFF(284,"But middlewares are executed only for regular HTTP request handles, what if we need\na request scoped method outside of that? One example of that is queue handlers or\nscheduled tasks."),e.k0s(),e.j41(285,"p"),e.EFF(286,"We can use the "),e.j41(287,"code"),e.EFF(288,"@CreateRequestContext()"),e.k0s(),e.EFF(289," decorator. It requires you to first inject the\n"),e.j41(290,"code"),e.EFF(291,"MikroORM"),e.k0s(),e.EFF(292," instance to current context, it will be then used to create the context\nfor you. Under the hood, the decorator will register new request context for your\nmethod and execute it inside the context."),e.k0s(),e.j41(293,"app-copy-button")(294,"pre")(295,"code",15),e.EFF(296,"\n@Injectable()\nexport class MyService {\n  constructor(private readonly orm: MikroORM) {}\n\n  @CreateRequestContext()\n  async doSomething() {\n    // this will be executed in a separate context\n  }\n}\n"),e.k0s()()(),e.j41(297,"blockquote",21)(298,"strong"),e.EFF(299,"Note"),e.k0s(),e.EFF(300," As the name suggests, this decorator always creates new context, as opposed to its alternative "),e.j41(301,"code"),e.EFF(302,"@EnsureRequestContext"),e.k0s(),e.EFF(303," that only creates it if it's already not inside another one.\n"),e.k0s(),e.j41(304,"h4",26)(305,"span"),e.EFF(306,"Testing"),e.k0s()(),e.j41(307,"p"),e.EFF(308,"The "),e.j41(309,"code"),e.EFF(310,"@mikro-orm/nestjs"),e.k0s(),e.EFF(311," package exposes "),e.j41(312,"code"),e.EFF(313,"getRepositoryToken()"),e.k0s(),e.EFF(314," function that returns prepared token based on a given entity to allow mocking the repository."),e.k0s(),e.j41(315,"app-copy-button")(316,"pre")(317,"code",12),e.EFF(318,"\n@Module({\n  providers: [\n    PhotoService,\n    {\n      // or when you have a custom repository: `provide: PhotoRepository`\n      provide: getRepositoryToken(Photo), \n      useValue: mockedRepository,\n    },\n  ],\n})\nexport class PhotoModule {}\n"),e.k0s()()(),e.j41(319,"h4",27)(320,"span"),e.EFF(321,"Example"),e.k0s()(),e.j41(322,"p"),e.EFF(323,"A real world example of NestJS with MikroORM can be found "),e.j41(324,"a",28),e.EFF(325,"here"),e.k0s()()())},dependencies:[d.a,F.z],encapsulation:2,changeDetection:0})}return t})(),H=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-mongodb"]],features:[e.Vt3],decls:242,vars:36,consts:[["contentReference",""],["app647b1c5f4932dc3690b9865a9c8d448ebf77810e",""],["appe75e8462b7e922b2cb5be9a246bd349bdb38a392",""],["app6decf9d5ecb6b00284efa2a3328ccd197815742c",""],["app5c5d36a17c81d372b72675a7e16c6e835a071bf1",""],["appa94aeafa12045d5ea6265504c92f9d18c61eae19",""],["appb9aeeb04801615f63343621e6ea107a166f90778",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/mongodb.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","mongodb-mongoose"],[1,""],["routerLink","/techniques/mongodb"],["rel","nofollow","target","_blank","href","https://mongoosejs.com"],["rel","nofollow","target","_blank","href","https://www.mongodb.org/"],["appAnchor","","id","getting-started"],[1,"language-typescript"],["routerLink","/fundamentals/async-components"],[1,"with-heading"],[1,"filename"],[1,"info"],["appAnchor","","id","model-injection"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/guide.html"],[1,"warning"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/14-mongoose-base"]],template:function(s,o){if(1&s&&(e.j41(0,"div",7,0)(2,"div",8)(3,"a",9),e.nrm(4,"i",10),e.k0s()(),e.j41(5,"h3",11),e.EFF(6,"MongoDB (Mongoose)"),e.k0s(),e.j41(7,"blockquote",12)(8,"strong"),e.EFF(9,"Warning"),e.k0s(),e.EFF(10," In this article, you'll learn how to create a "),e.j41(11,"code"),e.EFF(12,"DatabaseModule"),e.k0s(),e.EFF(13," based on the "),e.j41(14,"strong"),e.EFF(15,"Mongoose"),e.k0s(),e.EFF(16," package from scratch using custom components. As a consequence, this solution contains a lot of overhead that you can omit using ready to use and available out-of-the-box dedicated "),e.j41(17,"code"),e.EFF(18,"@nestjs/mongoose"),e.k0s(),e.EFF(19," package. To learn more, see "),e.j41(20,"a",13),e.EFF(21,"here"),e.k0s(),e.EFF(22,".\n"),e.k0s(),e.j41(23,"p")(24,"a",14),e.EFF(25,"Mongoose"),e.k0s(),e.EFF(26," is the most popular "),e.j41(27,"a",15),e.EFF(28,"MongoDB"),e.k0s(),e.EFF(29," object modeling tool."),e.k0s(),e.j41(30,"h4",16)(31,"span"),e.EFF(32,"Getting started"),e.k0s()(),e.j41(33,"p"),e.EFF(34,"To start the adventure with this library we have to install all required dependencies:"),e.k0s(),e.j41(35,"app-copy-button")(36,"pre")(37,"code",17),e.EFF(38,"\n$ npm install --save mongoose\n"),e.k0s()()(),e.j41(39,"p"),e.EFF(40,"The first step we need to do is to establish the connection with our database using "),e.j41(41,"code"),e.EFF(42,"connect()"),e.k0s(),e.EFF(43," function. The "),e.j41(44,"code"),e.EFF(45,"connect()"),e.k0s(),e.EFF(46," function returns a "),e.j41(47,"code"),e.EFF(48,"Promise"),e.k0s(),e.EFF(49,", and therefore we have to create an "),e.j41(50,"a",18),e.EFF(51,"async provider"),e.k0s(),e.EFF(52,"."),e.k0s(),e.j41(53,"app-copy-button",19)(54,"span",20),e.EFF(55),e.nI1(56,"extension"),e.nrm(57,"app-tabs",null,1),e.k0s(),e.j41(59,"pre")(60,"code",17),e.EFF(61,"\nimport * as mongoose from 'mongoose';\n\nexport const databaseProviders = [\n  {\n    provide: 'DATABASE_CONNECTION',\n    useFactory: (): Promise<typeof mongoose> =>\n      mongoose.connect('mongodb://localhost/nest'),\n  },\n];\n"),e.k0s()(),e.j41(62,"pre")(63,"code",17),e.EFF(64,"\nimport * as mongoose from 'mongoose';\n\nexport const databaseProviders = [\n  {\n    provide: 'DATABASE_CONNECTION',\n    useFactory: () => mongoose.connect('mongodb://localhost/nest'),\n  },\n];\n"),e.k0s()()(),e.j41(65,"blockquote",21)(66,"strong"),e.EFF(67,"Hint"),e.k0s(),e.EFF(68," Following best practices, we declared the custom provider in the separated file which has a "),e.j41(69,"code"),e.EFF(70,"*.providers.ts"),e.k0s(),e.EFF(71," suffix.\n"),e.k0s(),e.j41(72,"p"),e.EFF(73,"Then, we need to export these providers to make them "),e.j41(74,"strong"),e.EFF(75,"accessible"),e.k0s(),e.EFF(76," for the rest part of the application."),e.k0s(),e.j41(77,"app-copy-button",19)(78,"span",20),e.EFF(79),e.nI1(80,"extension"),e.nrm(81,"app-tabs",null,2),e.k0s(),e.j41(83,"pre")(84,"code",17),e.EFF(85,"\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n"),e.k0s()()(),e.j41(86,"p"),e.EFF(87,"Now we can inject the "),e.j41(88,"code"),e.EFF(89,"Connection"),e.k0s(),e.EFF(90," object using "),e.j41(91,"code"),e.EFF(92,"@Inject()"),e.k0s(),e.EFF(93," decorator. Each class that would depend on the "),e.j41(94,"code"),e.EFF(95,"Connection"),e.k0s(),e.EFF(96," async provider will wait until a "),e.j41(97,"code"),e.EFF(98,"Promise"),e.k0s(),e.EFF(99," is resolved."),e.k0s(),e.j41(100,"h4",22)(101,"span"),e.EFF(102,"Model injection"),e.k0s()(),e.j41(103,"p"),e.EFF(104,"With Mongoose, everything is derived from a "),e.j41(105,"a",23),e.EFF(106,"Schema"),e.k0s(),e.EFF(107,". Let's define the "),e.j41(108,"code"),e.EFF(109,"CatSchema"),e.k0s(),e.EFF(110,":"),e.k0s(),e.j41(111,"app-copy-button",19)(112,"span",20),e.EFF(113),e.nI1(114,"extension"),e.nrm(115,"app-tabs",null,3),e.k0s(),e.j41(117,"pre")(118,"code",17),e.EFF(119,"\nimport * as mongoose from 'mongoose';\n\nexport const CatSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  breed: String,\n});\n"),e.k0s()()(),e.j41(120,"p"),e.EFF(121,"The "),e.j41(122,"code"),e.EFF(123,"CatsSchema"),e.k0s(),e.EFF(124," belongs to the "),e.j41(125,"code"),e.EFF(126,"cats"),e.k0s(),e.EFF(127," directory. This directory represents the "),e.j41(128,"code"),e.EFF(129,"CatsModule"),e.k0s(),e.EFF(130,"."),e.k0s(),e.j41(131,"p"),e.EFF(132,"Now it's time to create a "),e.j41(133,"strong"),e.EFF(134,"Model"),e.k0s(),e.EFF(135," provider:"),e.k0s(),e.j41(136,"app-copy-button",19)(137,"span",20),e.EFF(138),e.nI1(139,"extension"),e.nrm(140,"app-tabs",null,4),e.k0s(),e.j41(142,"pre")(143,"code",17),e.EFF(144,"\nimport { Connection } from 'mongoose';\nimport { CatSchema } from './schemas/cat.schema';\n\nexport const catsProviders = [\n  {\n    provide: 'CAT_MODEL',\n    useFactory: (connection: Connection) => connection.model('Cat', CatSchema),\n    inject: ['DATABASE_CONNECTION'],\n  },\n];\n"),e.k0s()(),e.j41(145,"pre")(146,"code",17),e.EFF(147,"\nimport { CatSchema } from './schemas/cat.schema';\n\nexport const catsProviders = [\n  {\n    provide: 'CAT_MODEL',\n    useFactory: (connection) => connection.model('Cat', CatSchema),\n    inject: ['DATABASE_CONNECTION'],\n  },\n];\n"),e.k0s()()(),e.j41(148,"blockquote",24)(149,"strong"),e.EFF(150,"Warning"),e.k0s(),e.EFF(151," In the real-world applications you should avoid "),e.j41(152,"strong"),e.EFF(153,"magic strings"),e.k0s(),e.EFF(154,". Both "),e.j41(155,"code"),e.EFF(156,"CAT_MODEL"),e.k0s(),e.EFF(157," and "),e.j41(158,"code"),e.EFF(159,"DATABASE_CONNECTION"),e.k0s(),e.EFF(160," should be kept in the separated "),e.j41(161,"code"),e.EFF(162,"constants.ts"),e.k0s(),e.EFF(163," file.\n"),e.k0s(),e.j41(164,"p"),e.EFF(165,"Now we can inject the "),e.j41(166,"code"),e.EFF(167,"CAT_MODEL"),e.k0s(),e.EFF(168," to the "),e.j41(169,"code"),e.EFF(170,"CatsService"),e.k0s(),e.EFF(171," using the "),e.j41(172,"code"),e.EFF(173,"@Inject()"),e.k0s(),e.EFF(174," decorator:"),e.k0s(),e.j41(175,"app-copy-button",19)(176,"span",20),e.EFF(177),e.nI1(178,"extension"),e.nrm(179,"app-tabs",null,5),e.k0s(),e.j41(181,"pre")(182,"code",17),e.EFF(183,"\nimport { Model } from 'mongoose';\nimport { Injectable, Inject } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\nimport { CreateCatDto } from './dto/create-cat.dto';\n\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject('CAT_MODEL')\n    private catModel: Model<Cat>,\n  ) {}\n\n  async create(createCatDto: CreateCatDto): Promise<Cat> {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll(): Promise<Cat[]> {\n    return this.catModel.find().exec();\n  }\n}\n"),e.k0s()(),e.j41(184,"pre")(185,"code",17),e.EFF(186,"\nimport { Injectable, Dependencies } from '@nestjs/common';\n\n@Injectable()\n@Dependencies('CAT_MODEL')\nexport class CatsService {\n  constructor(catModel) {\n    this.catModel = catModel;\n  }\n\n  async create(createCatDto) {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll() {\n    return this.catModel.find().exec();\n  }\n}\n"),e.k0s()()(),e.j41(187,"p"),e.EFF(188,"In the above example we have used the "),e.j41(189,"code"),e.EFF(190,"Cat"),e.k0s(),e.EFF(191," interface. This interface extends the "),e.j41(192,"code"),e.EFF(193,"Document"),e.k0s(),e.EFF(194," from the mongoose package:"),e.k0s(),e.j41(195,"app-copy-button")(196,"pre")(197,"code",17),e.EFF(198,"\nimport { Document } from 'mongoose';\n\nexport interface Cat extends Document {\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n"),e.k0s()()(),e.j41(199,"p"),e.EFF(200,"The database connection is "),e.j41(201,"strong"),e.EFF(202,"asynchronous"),e.k0s(),e.EFF(203,", but Nest makes this process completely invisible for the end-user. The "),e.j41(204,"code"),e.EFF(205,"CatModel"),e.k0s(),e.EFF(206," class is waiting for the db connection, and the "),e.j41(207,"code"),e.EFF(208,"CatsService"),e.k0s(),e.EFF(209," is delayed until model is ready to use. The entire application can start when each class is instantiated."),e.k0s(),e.j41(210,"p"),e.EFF(211,"Here is a final "),e.j41(212,"code"),e.EFF(213,"CatsModule"),e.k0s(),e.EFF(214,":"),e.k0s(),e.j41(215,"app-copy-button",19)(216,"span",20),e.EFF(217),e.nI1(218,"extension"),e.nrm(219,"app-tabs",null,6),e.k0s(),e.j41(221,"pre")(222,"code",17),e.EFF(223,"\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\nimport { catsProviders } from './cats.providers';\nimport { DatabaseModule } from '../database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [CatsController],\n  providers: [\n    CatsService,\n    ...catsProviders,\n  ],\n})\nexport class CatsModule {}\n"),e.k0s()()(),e.j41(224,"blockquote",21)(225,"strong"),e.EFF(226,"Hint"),e.k0s(),e.EFF(227," Do not forget to import the "),e.j41(228,"code"),e.EFF(229,"CatsModule"),e.k0s(),e.EFF(230," into the root "),e.j41(231,"code"),e.EFF(232,"AppModule"),e.k0s(),e.EFF(233,".\n"),e.k0s(),e.j41(234,"h4",25)(235,"span"),e.EFF(236,"Example"),e.k0s()(),e.j41(237,"p"),e.EFF(238,"A working example is available "),e.j41(239,"a",26),e.EFF(240,"here"),e.k0s(),e.EFF(241,"."),e.k0s()()),2&s){const a=e.sdS(58),i=e.sdS(82),c=e.sdS(116),p=e.sdS(141),r=e.sdS(180),u=e.sdS(220);e.R7$(55),e.SpI(" ",e.i5U(56,18,"database.providers",a.isJsActive),"\n"),e.R7$(4),e.AVh("hide",a.isJsActive),e.R7$(3),e.AVh("hide",!a.isJsActive),e.R7$(17),e.SpI(" ",e.i5U(80,21,"database.module",i.isJsActive),"\n"),e.R7$(34),e.SpI(" ",e.i5U(114,24,"schemas/cat.schema",c.isJsActive),"\n"),e.R7$(25),e.SpI(" ",e.i5U(139,27,"cats.providers",p.isJsActive),"\n"),e.R7$(4),e.AVh("hide",p.isJsActive),e.R7$(3),e.AVh("hide",!p.isJsActive),e.R7$(32),e.SpI(" ",e.i5U(178,30,"cats.service",r.isJsActive),"\n"),e.R7$(4),e.AVh("hide",r.isJsActive),e.R7$(3),e.AVh("hide",!r.isJsActive),e.R7$(33),e.SpI(" ",e.i5U(218,33,"cats.module",u.isJsActive),"\n")}},dependencies:[g.O,d.a,F.z,j.Wk,f.M],encapsulation:2,changeDetection:0})}return t})(),D=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-prisma"]],features:[e.Vt3],decls:633,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/prisma.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","prisma"],["rel","nofollow","target","_blank","href","https://www.prisma.io"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma"],["rel","nofollow","target","_blank","href","https://knexjs.org/"],["rel","nofollow","target","_blank","href","https://typeorm.io/"],["rel","nofollow","target","_blank","href","https://sequelize.org/"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/reference/database-reference/supported-databases"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/concepts/more/comparisons/prisma-and-typeorm#type-safety"],[1,"info"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/getting-started/quickstart"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/understand-prisma/introduction"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma-examples/tree/b53fad046a6d55f0090ddce9fd17ec3f9b95cab3/orm/nest"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma-examples/tree/b53fad046a6d55f0090ddce9fd17ec3f9b95cab3/orm/nest-graphql"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma-examples/"],["appAnchor","","id","getting-started"],["rel","nofollow","target","_blank","href","https://sqlite.org/"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project-typescript-postgres"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/guides/migrate-to-prisma/migrate-from-typeorm"],["appAnchor","","id","create-your-nestjs-project"],[1,"language-bash"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/first-steps"],["appAnchor","","id","set-up-prisma"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-cli"],["rel","nofollow","target","_blank","href","https://github.com/motdotla/dotenv"],["appAnchor","","id","set-the-database-connection"],[1,"language-groovy"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/techniques/configuration"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/reference/database-reference/connection-urls"],["rel","nofollow","target","_blank","href","https://dev.to/prisma/how-to-setup-a-free-postgresql-database-on-heroku-1dc1"],["appAnchor","","id","create-two-database-tables-with-prisma-migrate"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/concepts/components/prisma-migrate"],[1,"language-sql"],["appAnchor","","id","install-and-generate-prisma-client"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/concepts/components/prisma-client/crud"],["appAnchor","","id","use-prisma-client-in-your-nestjs-services"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/crud"],[1,"language-typescript"],["id","implement-your-rest-api-routes-in-the-main-app-controller"],["id","get"],["id","post"],["id","put"],["id","delete"],["appAnchor","","id","summary"],["rel","nofollow","target","_blank","href","https://www.prisma.io/nestjs"],["rel","nofollow","target","_blank","href","https://github.com/notiz-dev/nestjs-prisma-starter#instructions"],["rel","nofollow","target","_blank","href","https://www.youtube.com/watch?v=UlVJ340UEuk&ab_channel=Prisma"],["rel","nofollow","target","_blank","href","https://github.com/marcjulian"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Prisma"),e.k0s(),e.j41(7,"p")(8,"a",6),e.EFF(9,"Prisma"),e.k0s(),e.EFF(10," is an "),e.j41(11,"a",7),e.EFF(12,"open-source"),e.k0s(),e.EFF(13," ORM for Node.js and TypeScript. It is used as an "),e.j41(14,"strong"),e.EFF(15,"alternative"),e.k0s(),e.EFF(16," to writing plain SQL, or using another database access tool such as SQL query builders (like "),e.j41(17,"a",8),e.EFF(18,"knex.js"),e.k0s(),e.EFF(19,") or ORMs (like "),e.j41(20,"a",9),e.EFF(21,"TypeORM"),e.k0s(),e.EFF(22," and "),e.j41(23,"a",10),e.EFF(24,"Sequelize"),e.k0s(),e.EFF(25,"). Prisma currently supports PostgreSQL, MySQL, SQL Server, SQLite, MongoDB and CockroachDB ("),e.j41(26,"a",11),e.EFF(27,"Preview"),e.k0s(),e.EFF(28,")."),e.k0s(),e.j41(29,"p"),e.EFF(30,"While Prisma can be used with plain JavaScript, it embraces TypeScript and provides a level to type-safety that goes beyond the guarantees other ORMs in the TypeScript ecosystem. You can find an in-depth comparison of the type-safety guarantees of Prisma and TypeORM "),e.j41(31,"a",12),e.EFF(32,"here"),e.k0s(),e.EFF(33,"."),e.k0s(),e.j41(34,"blockquote",13)(35,"strong"),e.EFF(36,"Note"),e.k0s(),e.EFF(37," If you want to get a quick overview of how Prisma works, you can follow the "),e.j41(38,"a",14),e.EFF(39,"Quickstart"),e.k0s(),e.EFF(40," or read the "),e.j41(41,"a",15),e.EFF(42,"Introduction"),e.k0s(),e.EFF(43," in the "),e.j41(44,"a",16),e.EFF(45,"documentation"),e.k0s(),e.EFF(46,". There also are ready-to-run examples for "),e.j41(47,"a",17),e.EFF(48,"REST"),e.k0s(),e.EFF(49," and "),e.j41(50,"a",18),e.EFF(51,"GraphQL"),e.k0s(),e.EFF(52," in the "),e.j41(53,"a",19)(54,"code"),e.EFF(55,"prisma-examples"),e.k0s()(),e.EFF(56," repo.\n"),e.k0s(),e.j41(57,"h4",20)(58,"span"),e.EFF(59,"Getting started"),e.k0s()(),e.j41(60,"p"),e.EFF(61,"In this recipe, you'll learn how to get started with NestJS and Prisma from scratch. You are going to build a sample NestJS application with a REST API that can read and write data in a database."),e.k0s(),e.j41(62,"p"),e.EFF(63,"For the purpose of this guide, you'll use a "),e.j41(64,"a",21),e.EFF(65,"SQLite"),e.k0s(),e.EFF(66," database to save the overhead of setting up a database server. Note that you can still follow this guide, even if you're using PostgreSQL or MySQL \u2013 you'll get extra instructions for using these databases at the right places."),e.k0s(),e.j41(67,"blockquote",13)(68,"strong"),e.EFF(69,"Note"),e.k0s(),e.EFF(70," If you already have an existing project and consider migrating to Prisma, you can follow the guide for "),e.j41(71,"a",22),e.EFF(72,"adding Prisma to an existing project"),e.k0s(),e.EFF(73,". If you are migrating from TypeORM, you can read the guide "),e.j41(74,"a",23),e.EFF(75,"Migrating from TypeORM to Prisma"),e.k0s(),e.EFF(76,".\n"),e.k0s(),e.j41(77,"h4",24)(78,"span"),e.EFF(79,"Create your NestJS project"),e.k0s()(),e.j41(80,"p"),e.EFF(81,"To get started, install the NestJS CLI and create your app skeleton with the following commands:"),e.k0s(),e.j41(82,"pre")(83,"code",25),e.EFF(84,"\n$ npm install -g @nestjs/cli\n$ nest new hello-prisma\n"),e.k0s()(),e.j41(85,"p"),e.EFF(86,"See the "),e.j41(87,"a",26),e.EFF(88,"First steps"),e.k0s(),e.EFF(89," page to learn more about the project files created by this command. Note also that you can now run "),e.j41(90,"code"),e.EFF(91,"npm start"),e.k0s(),e.EFF(92," to start your application. The REST API running at "),e.j41(93,"code"),e.EFF(94,"http://localhost:3000/"),e.k0s(),e.EFF(95," currently serves a single route that's implemented in "),e.j41(96,"code"),e.EFF(97,"src/app.controller.ts"),e.k0s(),e.EFF(98,". Over the course of this guide, you'll implement additional routes to store and retrieve data about "),e.j41(99,"em"),e.EFF(100,"users"),e.k0s(),e.EFF(101," and "),e.j41(102,"em"),e.EFF(103,"posts"),e.k0s(),e.EFF(104,"."),e.k0s(),e.j41(105,"h4",27)(106,"span"),e.EFF(107,"Set up Prisma"),e.k0s()(),e.j41(108,"p"),e.EFF(109,"Start by installing the Prisma CLI as a development dependency in your project:"),e.k0s(),e.j41(110,"pre")(111,"code",25),e.EFF(112,"\n$ cd hello-prisma\n$ npm install prisma --save-dev\n"),e.k0s()(),e.j41(113,"p"),e.EFF(114,"In the following steps, we'll be utilizing the "),e.j41(115,"a",28),e.EFF(116,"Prisma CLI"),e.k0s(),e.EFF(117,". As a best practice, it's recommended to invoke the CLI locally by prefixing it with "),e.j41(118,"code"),e.EFF(119,"npx"),e.k0s(),e.EFF(120,":"),e.k0s(),e.j41(121,"pre")(122,"code",25),e.EFF(123,"\n$ npx prisma\n"),e.k0s()(),e.j41(124,"details")(125,"summary"),e.EFF(126,"Expand if you're using Yarn"),e.k0s(),e.j41(127,"p"),e.EFF(128,"If you're using Yarn, then you can install the Prisma CLI as follows:"),e.k0s(),e.j41(129,"pre")(130,"code",25),e.EFF(131,"\n$ yarn add prisma --dev\n"),e.k0s()(),e.j41(132,"p"),e.EFF(133,"Once installed, you can invoke it by prefixing it with "),e.j41(134,"code"),e.EFF(135,"yarn"),e.k0s(),e.EFF(136,":"),e.k0s(),e.j41(137,"pre")(138,"code",25),e.EFF(139,"\n$ yarn prisma\n"),e.k0s()()(),e.j41(140,"p"),e.EFF(141,"Now create your initial Prisma setup using the "),e.j41(142,"code"),e.EFF(143,"init"),e.k0s(),e.EFF(144," command of the Prisma CLI:"),e.k0s(),e.j41(145,"pre")(146,"code",25),e.EFF(147,"\n$ npx prisma init\n"),e.k0s()(),e.j41(148,"p"),e.EFF(149,"This command creates a new "),e.j41(150,"code"),e.EFF(151,"prisma"),e.k0s(),e.EFF(152," directory with the following contents:"),e.k0s(),e.j41(153,"ul")(154,"li")(155,"code"),e.EFF(156,"schema.prisma"),e.k0s(),e.EFF(157,": Specifies your database connection and contains the database schema"),e.k0s(),e.j41(158,"li")(159,"code"),e.EFF(160,".env"),e.k0s(),e.EFF(161,": A "),e.j41(162,"a",29),e.EFF(163,"dotenv"),e.k0s(),e.EFF(164," file, typically used to store your database credentials in a group of environment variables"),e.k0s()(),e.j41(165,"h4",30)(166,"span"),e.EFF(167,"Set the database connection"),e.k0s()(),e.j41(168,"p"),e.EFF(169,"Your database connection is configured in the "),e.j41(170,"code"),e.EFF(171,"datasource"),e.k0s(),e.EFF(172," block in your "),e.j41(173,"code"),e.EFF(174,"schema.prisma"),e.k0s(),e.EFF(175," file. By default it's set to "),e.j41(176,"code"),e.EFF(177,"postgresql"),e.k0s(),e.EFF(178,", but since you're using a SQLite database in this guide you need to adjust the "),e.j41(179,"code"),e.EFF(180,"provider"),e.k0s(),e.EFF(181," field of the "),e.j41(182,"code"),e.EFF(183,"datasource"),e.k0s(),e.EFF(184," block to "),e.j41(185,"code"),e.EFF(186,"sqlite"),e.k0s(),e.EFF(187,":"),e.k0s(),e.j41(188,"pre")(189,"code",31),e.EFF(190,'\ndatasource db {\n  provider = "sqlite"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n'),e.k0s()(),e.j41(191,"p"),e.EFF(192,"Now, open up "),e.j41(193,"code"),e.EFF(194,".env"),e.k0s(),e.EFF(195," and adjust the "),e.j41(196,"code"),e.EFF(197,"DATABASE_URL"),e.k0s(),e.EFF(198," environment variable to look as follows:"),e.k0s(),e.j41(199,"pre")(200,"code",25),e.EFF(201,'\nDATABASE_URL="file:./dev.db"\n'),e.k0s()(),e.j41(202,"p"),e.EFF(203,"Make sure you have a "),e.j41(204,"a",32),e.EFF(205,"ConfigModule"),e.k0s(),e.EFF(206," configured, otherwise the "),e.j41(207,"code"),e.EFF(208,"DATABASE_URL"),e.k0s(),e.EFF(209," variable will not be picked up from "),e.j41(210,"code"),e.EFF(211,".env"),e.k0s(),e.EFF(212,"."),e.k0s(),e.j41(213,"p"),e.EFF(214,"SQLite databases are simple files; no server is required to use a SQLite database. So instead of configuring a connection URL with a "),e.j41(215,"em"),e.EFF(216,"host"),e.k0s(),e.EFF(217," and "),e.j41(218,"em"),e.EFF(219,"port"),e.k0s(),e.EFF(220,", you can just point it to a local file which in this case is called "),e.j41(221,"code"),e.EFF(222,"dev.db"),e.k0s(),e.EFF(223,". This file will be created in the next step."),e.k0s(),e.j41(224,"details")(225,"summary"),e.EFF(226,"Expand if you're using PostgreSQL, MySQL, MsSQL or Azure SQL"),e.k0s(),e.j41(227,"p"),e.EFF(228,"With PostgreSQL and MySQL, you need to configure the connection URL to point to the "),e.j41(229,"em"),e.EFF(230,"database server"),e.k0s(),e.EFF(231,". You can learn more about the required connection URL format "),e.j41(232,"a",33),e.EFF(233,"here"),e.k0s(),e.EFF(234,"."),e.k0s(),e.j41(235,"p")(236,"strong"),e.EFF(237,"PostgreSQL"),e.k0s()(),e.j41(238,"p"),e.EFF(239,"If you're using PostgreSQL, you have to adjust the "),e.j41(240,"code"),e.EFF(241,"schema.prisma"),e.k0s(),e.EFF(242," and "),e.j41(243,"code"),e.EFF(244,".env"),e.k0s(),e.EFF(245," files as follows:"),e.k0s(),e.j41(246,"p")(247,"strong")(248,"code"),e.EFF(249,"schema.prisma"),e.k0s()()(),e.j41(250,"pre")(251,"code",31),e.EFF(252,'\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n'),e.k0s()(),e.j41(253,"p")(254,"strong")(255,"code"),e.EFF(256,".env"),e.k0s()()(),e.j41(257,"pre")(258,"code",25),e.EFF(259,'\nDATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA"\n'),e.k0s()(),e.j41(260,"p"),e.EFF(261,"Replace the placeholders spelled in all uppercase letters with your database credentials. Note that if you're unsure what to provide for the "),e.j41(262,"code"),e.EFF(263,"SCHEMA"),e.k0s(),e.EFF(264," placeholder, it's most likely the default value "),e.j41(265,"code"),e.EFF(266,"public"),e.k0s(),e.EFF(267,":"),e.k0s(),e.j41(268,"pre")(269,"code",25),e.EFF(270,'\nDATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public"\n'),e.k0s()(),e.j41(271,"p"),e.EFF(272,"If you want to learn how to set up a PostgreSQL database, you can follow this guide on "),e.j41(273,"a",34),e.EFF(274,"setting up a free PostgreSQL database on Heroku"),e.k0s(),e.EFF(275,"."),e.k0s(),e.j41(276,"p")(277,"strong"),e.EFF(278,"MySQL"),e.k0s()(),e.j41(279,"p"),e.EFF(280,"If you're using MySQL, you have to adjust the "),e.j41(281,"code"),e.EFF(282,"schema.prisma"),e.k0s(),e.EFF(283," and "),e.j41(284,"code"),e.EFF(285,".env"),e.k0s(),e.EFF(286," files as follows:"),e.k0s(),e.j41(287,"p")(288,"strong")(289,"code"),e.EFF(290,"schema.prisma"),e.k0s()()(),e.j41(291,"pre")(292,"code",31),e.EFF(293,'\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n'),e.k0s()(),e.j41(294,"p")(295,"strong")(296,"code"),e.EFF(297,".env"),e.k0s()()(),e.j41(298,"pre")(299,"code",25),e.EFF(300,'\nDATABASE_URL="mysql://USER:PASSWORD@HOST:PORT/DATABASE"\n'),e.k0s()(),e.j41(301,"p"),e.EFF(302,"Replace the placeholders spelled in all uppercase letters with your database credentials."),e.k0s(),e.j41(303,"p")(304,"strong"),e.EFF(305,"Microsoft SQL Server / Azure SQL Server"),e.k0s()(),e.j41(306,"p"),e.EFF(307,"If you're using Microsoft SQL Server or Azure SQL Server, you have to adjust the "),e.j41(308,"code"),e.EFF(309,"schema.prisma"),e.k0s(),e.EFF(310," and "),e.j41(311,"code"),e.EFF(312,".env"),e.k0s(),e.EFF(313," files as follows:"),e.k0s(),e.j41(314,"p")(315,"strong")(316,"code"),e.EFF(317,"schema.prisma"),e.k0s()()(),e.j41(318,"pre")(319,"code",31),e.EFF(320,'\ndatasource db {\n  provider = "sqlserver"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n'),e.k0s()(),e.j41(321,"p")(322,"strong")(323,"code"),e.EFF(324,".env"),e.k0s()()(),e.j41(325,"p"),e.EFF(326,"Replace the placeholders spelled in all uppercase letters with your database credentials. Note that if you're unsure what to provide for the "),e.j41(327,"code"),e.EFF(328,"encrypt"),e.k0s(),e.EFF(329," placeholder, it's most likely the default value "),e.j41(330,"code"),e.EFF(331,"true"),e.k0s(),e.EFF(332,":"),e.k0s(),e.j41(333,"pre")(334,"code",25),e.EFF(335,'\nDATABASE_URL="sqlserver://HOST:PORT;database=DATABASE;user=USER;password=PASSWORD;encrypt=true"\n'),e.k0s()()(),e.j41(336,"h4",35)(337,"span"),e.EFF(338,"Create two database tables with Prisma Migrate"),e.k0s()(),e.j41(339,"p"),e.EFF(340,"In this section, you'll create two new tables in your database using "),e.j41(341,"a",36),e.EFF(342,"Prisma Migrate"),e.k0s(),e.EFF(343,". Prisma Migrate generates SQL migration files for your declarative data model definition in the Prisma schema. These migration files are fully customizable so that you can configure any additional features of the underlying database or include additional commands, e.g. for seeding."),e.k0s(),e.j41(344,"p"),e.EFF(345,"Add the following two models to your "),e.j41(346,"code"),e.EFF(347,"schema.prisma"),e.k0s(),e.EFF(348," file:"),e.k0s(),e.j41(349,"pre")(350,"code",31),e.EFF(351,"\nmodel User {\n  id    Int     @default(autoincrement()) @id\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int      @default(autoincrement()) @id\n  title     String\n  content   String?\n  published Boolean? @default(false)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n"),e.k0s()(),e.j41(352,"p"),e.EFF(353,"With your Prisma models in place, you can generate your SQL migration files and run them against the database. Run the following commands in your terminal:"),e.k0s(),e.j41(354,"pre")(355,"code",25),e.EFF(356,"\n$ npx prisma migrate dev --name init\n"),e.k0s()(),e.j41(357,"p"),e.EFF(358,"This "),e.j41(359,"code"),e.EFF(360,"prisma migrate dev"),e.k0s(),e.EFF(361," command generates SQL files and directly runs them against the database. In this case, the following migration files was created in the existing "),e.j41(362,"code"),e.EFF(363,"prisma"),e.k0s(),e.EFF(364," directory:"),e.k0s(),e.j41(365,"pre")(366,"code",25),e.EFF(367,"\n$ tree prisma\nprisma\n\u251c\u2500\u2500 dev.db\n\u251c\u2500\u2500 migrations\n\u2502   \u2514\u2500\u2500 20201207100915_init\n\u2502       \u2514\u2500\u2500 migration.sql\n\u2514\u2500\u2500 schema.prisma\n"),e.k0s()(),e.j41(368,"details")(369,"summary"),e.EFF(370,"Expand to view the generated SQL statements"),e.k0s(),e.j41(371,"p"),e.EFF(372,"The following tables were created in your SQLite database:"),e.k0s(),e.j41(373,"pre")(374,"code",37),e.EFF(375,'\n-- CreateTable\nCREATE TABLE "User" (\n    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    "email" TEXT NOT NULL,\n    "name" TEXT\n);\n\n-- CreateTable\nCREATE TABLE "Post" (\n    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    "title" TEXT NOT NULL,\n    "content" TEXT,\n    "published" BOOLEAN DEFAULT false,\n    "authorId" INTEGER,\n\n    FOREIGN KEY ("authorId") REFERENCES "User"("id") ON DELETE SET NULL ON UPDATE CASCADE\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX "User.email_unique" ON "User"("email");\n'),e.k0s()()(),e.j41(376,"h4",38)(377,"span"),e.EFF(378,"Install and generate Prisma Client"),e.k0s()(),e.j41(379,"p"),e.EFF(380,"Prisma Client is a type-safe database client that's "),e.j41(381,"em"),e.EFF(382,"generated"),e.k0s(),e.EFF(383," from your Prisma model definition. Because of this approach, Prisma Client can expose "),e.j41(384,"a",39),e.EFF(385,"CRUD"),e.k0s(),e.EFF(386," operations that are "),e.j41(387,"em"),e.EFF(388,"tailored"),e.k0s(),e.EFF(389," specifically to your models."),e.k0s(),e.j41(390,"p"),e.EFF(391,"To install Prisma Client in your project, run the following command in your terminal:"),e.k0s(),e.j41(392,"pre")(393,"code",25),e.EFF(394,"\n$ npm install @prisma/client\n"),e.k0s()(),e.j41(395,"p"),e.EFF(396,"Note that during installation, Prisma automatically invokes the "),e.j41(397,"code"),e.EFF(398,"prisma generate"),e.k0s(),e.EFF(399," command for you. In the future, you need to run this command after "),e.j41(400,"em"),e.EFF(401,"every"),e.k0s(),e.EFF(402," change to your Prisma models to update your generated Prisma Client."),e.k0s(),e.j41(403,"blockquote",13)(404,"strong"),e.EFF(405,"Note"),e.k0s(),e.EFF(406," The "),e.j41(407,"code"),e.EFF(408,"prisma generate"),e.k0s(),e.EFF(409," command reads your Prisma schema and updates the generated Prisma Client library inside "),e.j41(410,"code"),e.EFF(411,"node_modules/@prisma/client"),e.k0s(),e.EFF(412,".\n"),e.k0s(),e.j41(413,"h4",40)(414,"span"),e.EFF(415,"Use Prisma Client in your NestJS services"),e.k0s()(),e.j41(416,"p"),e.EFF(417,"You're now able to send database queries with Prisma Client. If you want to learn more about building queries with Prisma Client, check out the "),e.j41(418,"a",41),e.EFF(419,"API documentation"),e.k0s(),e.EFF(420,"."),e.k0s(),e.j41(421,"p"),e.EFF(422,"When setting up your NestJS application, you'll want to abstract away the Prisma Client API for database queries within a service. To get started, you can create a new "),e.j41(423,"code"),e.EFF(424,"PrismaService"),e.k0s(),e.EFF(425," that takes care of instantiating "),e.j41(426,"code"),e.EFF(427,"PrismaClient"),e.k0s(),e.EFF(428," and connecting to your database."),e.k0s(),e.j41(429,"p"),e.EFF(430,"Inside the "),e.j41(431,"code"),e.EFF(432,"src"),e.k0s(),e.EFF(433," directory, create a new file called "),e.j41(434,"code"),e.EFF(435,"prisma.service.ts"),e.k0s(),e.EFF(436," and add the following code to it:"),e.k0s(),e.j41(437,"app-copy-button")(438,"pre")(439,"code",42),e.EFF(440,"\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n"),e.k0s()()(),e.j41(441,"blockquote",13)(442,"strong"),e.EFF(443,"Note"),e.k0s(),e.EFF(444," The "),e.j41(445,"code"),e.EFF(446,"onModuleInit"),e.k0s(),e.EFF(447," is optional \u2014 if you leave it out, Prisma will connect lazily on its first call to the database.\n"),e.k0s(),e.j41(448,"p"),e.EFF(449,"Next, you can write services that you can use to make database calls for the "),e.j41(450,"code"),e.EFF(451,"User"),e.k0s(),e.EFF(452," and "),e.j41(453,"code"),e.EFF(454,"Post"),e.k0s(),e.EFF(455," models from your Prisma schema."),e.k0s(),e.j41(456,"p"),e.EFF(457,"Still inside the "),e.j41(458,"code"),e.EFF(459,"src"),e.k0s(),e.EFF(460," directory, create a new file called "),e.j41(461,"code"),e.EFF(462,"user.service.ts"),e.k0s(),e.EFF(463," and add the following code to it:"),e.k0s(),e.j41(464,"app-copy-button")(465,"pre")(466,"code",42),e.EFF(467,"\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { User, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise<User | null> {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise<User[]> {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(data: Prisma.UserCreateInput): Promise<User> {\n    return this.prisma.user.create({\n      data,\n    });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise<User> {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise<User> {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n"),e.k0s()()(),e.j41(468,"p"),e.EFF(469,"Notice how you're using Prisma Client's generated types to ensure that the methods that are exposed by your service are properly typed. You therefore save the boilerplate of typing your models and creating additional interface or DTO files."),e.k0s(),e.j41(470,"p"),e.EFF(471,"Now do the same for the "),e.j41(472,"code"),e.EFF(473,"Post"),e.k0s(),e.EFF(474," model."),e.k0s(),e.j41(475,"p"),e.EFF(476,"Still inside the "),e.j41(477,"code"),e.EFF(478,"src"),e.k0s(),e.EFF(479," directory, create a new file called "),e.j41(480,"code"),e.EFF(481,"post.service.ts"),e.k0s(),e.EFF(482," and add the following code to it:"),e.k0s(),e.j41(483,"app-copy-button")(484,"pre")(485,"code",42),e.EFF(486,"\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { Post, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PostService {\n  constructor(private prisma: PrismaService) {}\n\n  async post(\n    postWhereUniqueInput: Prisma.PostWhereUniqueInput,\n  ): Promise<Post | null> {\n    return this.prisma.post.findUnique({\n      where: postWhereUniqueInput,\n    });\n  }\n\n  async posts(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.PostWhereUniqueInput;\n    where?: Prisma.PostWhereInput;\n    orderBy?: Prisma.PostOrderByWithRelationInput;\n  }): Promise<Post[]> {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.post.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createPost(data: Prisma.PostCreateInput): Promise<Post> {\n    return this.prisma.post.create({\n      data,\n    });\n  }\n\n  async updatePost(params: {\n    where: Prisma.PostWhereUniqueInput;\n    data: Prisma.PostUpdateInput;\n  }): Promise<Post> {\n    const { data, where } = params;\n    return this.prisma.post.update({\n      data,\n      where,\n    });\n  }\n\n  async deletePost(where: Prisma.PostWhereUniqueInput): Promise<Post> {\n    return this.prisma.post.delete({\n      where,\n    });\n  }\n}\n"),e.k0s()()(),e.j41(487,"p"),e.EFF(488,"Your "),e.j41(489,"code"),e.EFF(490,"UserService"),e.k0s(),e.EFF(491," and "),e.j41(492,"code"),e.EFF(493,"PostService"),e.k0s(),e.EFF(494," currently wrap the CRUD queries that are available in Prisma Client. In a real world application, the service would also be the place to add business logic to your application. For example, you could have a method called "),e.j41(495,"code"),e.EFF(496,"updatePassword"),e.k0s(),e.EFF(497," inside the "),e.j41(498,"code"),e.EFF(499,"UserService"),e.k0s(),e.EFF(500," that would be responsible for updating the password of a user."),e.k0s(),e.j41(501,"p"),e.EFF(502,"Remember to register the new services in the app module."),e.k0s(),e.j41(503,"h5",43),e.EFF(504,"Implement your REST API routes in the main app controller"),e.k0s(),e.j41(505,"p"),e.EFF(506,"Finally, you'll use the services you created in the previous sections to implement the different routes of your app. For the purpose of this guide, you'll put all your routes into the already existing "),e.j41(507,"code"),e.EFF(508,"AppController"),e.k0s(),e.EFF(509," class."),e.k0s(),e.j41(510,"p"),e.EFF(511,"Replace the contents of the "),e.j41(512,"code"),e.EFF(513,"app.controller.ts"),e.k0s(),e.EFF(514," file with the following code:"),e.k0s(),e.j41(515,"app-copy-button")(516,"pre")(517,"code",42),e.EFF(518,"\nimport {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PostService } from './post.service';\nimport { User as UserModel, Post as PostModel } from '@prisma/client';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly postService: PostService,\n  ) {}\n\n  @Get('post/:id')\n  async getPostById(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.post({ id: Number(id) });\n  }\n\n  @Get('feed')\n  async getPublishedPosts(): Promise<PostModel[]> {\n    return this.postService.posts({\n      where: { published: true },\n    });\n  }\n\n  @Get('filtered-posts/:searchString')\n  async getFilteredPosts(\n    @Param('searchString') searchString: string,\n  ): Promise<PostModel[]> {\n    return this.postService.posts({\n      where: {\n        OR: [\n          {\n            title: { contains: searchString },\n          },\n          {\n            content: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @Post('post')\n  async createDraft(\n    @Body() postData: { title: string; content?: string; authorEmail: string },\n  ): Promise<PostModel> {\n    const { title, content, authorEmail } = postData;\n    return this.postService.createPost({\n      title,\n      content,\n      author: {\n        connect: { email: authorEmail },\n      },\n    });\n  }\n\n  @Post('user')\n  async signupUser(\n    @Body() userData: { name?: string; email: string },\n  ): Promise<UserModel> {\n    return this.userService.createUser(userData);\n  }\n\n  @Put('publish/:id')\n  async publishPost(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.updatePost({\n      where: { id: Number(id) },\n      data: { published: true },\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.deletePost({ id: Number(id) });\n  }\n}\n"),e.k0s()()(),e.j41(519,"p"),e.EFF(520,"This controller implements the following routes:"),e.k0s(),e.j41(521,"h6",44)(522,"code"),e.EFF(523,"GET"),e.k0s()(),e.j41(524,"ul")(525,"li")(526,"code"),e.EFF(527,"/post/:id"),e.k0s(),e.EFF(528,": Fetch a single post by its "),e.j41(529,"code"),e.EFF(530,"id"),e.k0s()(),e.j41(531,"li")(532,"code"),e.EFF(533,"/feed"),e.k0s(),e.EFF(534,": Fetch all "),e.j41(535,"em"),e.EFF(536,"published"),e.k0s(),e.EFF(537," posts"),e.k0s(),e.j41(538,"li")(539,"code"),e.EFF(540,"/filter-posts/:searchString"),e.k0s(),e.EFF(541,": Filter posts by "),e.j41(542,"code"),e.EFF(543,"title"),e.k0s(),e.EFF(544," or "),e.j41(545,"code"),e.EFF(546,"content"),e.k0s()()(),e.j41(547,"h6",45)(548,"code"),e.EFF(549,"POST"),e.k0s()(),e.j41(550,"ul")(551,"li")(552,"code"),e.EFF(553,"/post"),e.k0s(),e.EFF(554,": Create a new post"),e.j41(555,"ul")(556,"li"),e.EFF(557,"Body:"),e.j41(558,"ul")(559,"li")(560,"code"),e.EFF(561,"title: String"),e.k0s(),e.EFF(562," (required): The title of the post"),e.k0s(),e.j41(563,"li")(564,"code"),e.EFF(565,"content: String"),e.k0s(),e.EFF(566," (optional): The content of the post"),e.k0s(),e.j41(567,"li")(568,"code"),e.EFF(569,"authorEmail: String"),e.k0s(),e.EFF(570," (required): The email of the user that creates the post"),e.k0s()()()()(),e.j41(571,"li")(572,"code"),e.EFF(573,"/user"),e.k0s(),e.EFF(574,": Create a new user"),e.j41(575,"ul")(576,"li"),e.EFF(577,"Body:"),e.j41(578,"ul")(579,"li")(580,"code"),e.EFF(581,"email: String"),e.k0s(),e.EFF(582," (required): The email address of the user"),e.k0s(),e.j41(583,"li")(584,"code"),e.EFF(585,"name: String"),e.k0s(),e.EFF(586," (optional): The name of the user"),e.k0s()()()()()(),e.j41(587,"h6",46)(588,"code"),e.EFF(589,"PUT"),e.k0s()(),e.j41(590,"ul")(591,"li")(592,"code"),e.EFF(593,"/publish/:id"),e.k0s(),e.EFF(594,": Publish a post by its "),e.j41(595,"code"),e.EFF(596,"id"),e.k0s()()(),e.j41(597,"h6",47)(598,"code"),e.EFF(599,"DELETE"),e.k0s()(),e.j41(600,"ul")(601,"li")(602,"code"),e.EFF(603,"/post/:id"),e.k0s(),e.EFF(604,": Delete a post by its "),e.j41(605,"code"),e.EFF(606,"id"),e.k0s()()(),e.j41(607,"h4",48)(608,"span"),e.EFF(609,"Summary"),e.k0s()(),e.j41(610,"p"),e.EFF(611,"In this recipe, you learned how to use Prisma along with NestJS to implement a REST API. The controller that implements the routes of the API is calling a "),e.j41(612,"code"),e.EFF(613,"PrismaService"),e.k0s(),e.EFF(614," which in turn uses Prisma Client to send queries to a database to fulfill the data needs of incoming requests."),e.k0s(),e.j41(615,"p"),e.EFF(616,"If you want to learn more about using NestJS with Prisma, be sure to check out the following resources:"),e.k0s(),e.j41(617,"ul")(618,"li")(619,"a",49),e.EFF(620,"NestJS & Prisma"),e.k0s()(),e.j41(621,"li")(622,"a",19),e.EFF(623,"Ready-to-run example projects for REST & GraphQL"),e.k0s()(),e.j41(624,"li")(625,"a",50),e.EFF(626,"Production-ready starter kit"),e.k0s()(),e.j41(627,"li")(628,"a",51),e.EFF(629,"Video: Accessing Databases using NestJS with Prisma (5min)"),e.k0s(),e.EFF(630," by "),e.j41(631,"a",52),e.EFF(632,"Marc Stammerjohann"),e.k0s()()()())},dependencies:[d.a,F.z],encapsulation:2,changeDetection:0})}return t})(),J=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-repl"]],features:[e.Vt3],decls:199,vars:8,consts:[["contentReference",""],["appaa2c4f1f6ab2d6b8d96193b72cb87e2fcb3358a3",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/repl.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","read-eval-print-loop-repl"],["appAnchor","","id","usage"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],[1,"language-bash"],[1,"info"],["rel","nofollow","target","_blank","href","https://nodejs.org/api/repl.html"],["src","/assets/repl.gif","alt","REPL example"],["appAnchor","","id","native-functions"],[1,"language-text"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/docs/handbook/2/functions.html#function-type-expressions"],["appAnchor","","id","watch-mode"]],template:function(s,o){if(1&s&&(e.j41(0,"div",2,0)(2,"div",3)(3,"a",4),e.nrm(4,"i",5),e.k0s()(),e.j41(5,"h3",6),e.EFF(6,"Read-Eval-Print-Loop (REPL)"),e.k0s(),e.j41(7,"p"),e.EFF(8,"REPL is a simple interactive environment that takes single user inputs, executes them, and returns the result to the user.\nThe REPL feature lets you inspect your dependency graph and call methods on your providers (and controllers) directly from your terminal."),e.k0s(),e.j41(9,"h4",7)(10,"span"),e.EFF(11,"Usage"),e.k0s()(),e.j41(12,"p"),e.EFF(13,"To run your NestJS application in REPL mode, create a new "),e.j41(14,"code"),e.EFF(15,"repl.ts"),e.k0s(),e.EFF(16," file (alongside the existing "),e.j41(17,"code"),e.EFF(18,"main.ts"),e.k0s(),e.EFF(19," file) and add the following code inside:"),e.k0s(),e.j41(20,"app-copy-button",8)(21,"span",9),e.EFF(22),e.nI1(23,"extension"),e.nrm(24,"app-tabs",null,1),e.k0s(),e.j41(26,"pre")(27,"code",10),e.EFF(28,"\nimport { repl } from '@nestjs/core';\nimport { AppModule } from './src/app.module';\n\nasync function bootstrap() {\n  await repl(AppModule);\n}\nbootstrap();\n"),e.k0s()(),e.j41(29,"pre")(30,"code",10),e.EFF(31,"\nimport { repl } from '@nestjs/core';\nimport { AppModule } from './src/app.module';\n\nasync function bootstrap() {\n  await repl(AppModule);\n}\nbootstrap();\n"),e.k0s()()(),e.j41(32,"p"),e.EFF(33,"Now in your terminal, start the REPL with the following command:"),e.k0s(),e.j41(34,"pre")(35,"code",11),e.EFF(36,"\n$ npm run start -- --entryFile repl\n"),e.k0s()(),e.j41(37,"blockquote",12)(38,"strong"),e.EFF(39,"Hint"),e.k0s(),e.j41(40,"code"),e.EFF(41,"repl"),e.k0s(),e.EFF(42," returns a "),e.j41(43,"a",13),e.EFF(44,"Node.js REPL server"),e.k0s(),e.EFF(45," object.\n"),e.k0s(),e.j41(46,"p"),e.EFF(47,"Once it's up and running, you should see the following message in your console:"),e.k0s(),e.j41(48,"pre")(49,"code",11),e.EFF(50,"\nLOG [NestFactory] Starting Nest application...\nLOG [InstanceLoader] AppModule dependencies initialized\nLOG REPL initialized\n"),e.k0s()(),e.j41(51,"p"),e.EFF(52,"And now you can start interacting with your dependencies graph. For instance, you can retrieve an "),e.j41(53,"code"),e.EFF(54,"AppService"),e.k0s(),e.EFF(55," (we are using the starter project as an example here) and call the "),e.j41(56,"code"),e.EFF(57,"getHello()"),e.k0s(),e.EFF(58," method:"),e.k0s(),e.j41(59,"app-copy-button")(60,"pre")(61,"code",10),e.EFF(62,"\n> get(AppService).getHello()\n'Hello World!'\n"),e.k0s()()(),e.j41(63,"p"),e.EFF(64,"You can execute any JavaScript code from within your terminal, for example, assign an instance of the "),e.j41(65,"code"),e.EFF(66,"AppController"),e.k0s(),e.EFF(67," to a local variable, and use "),e.j41(68,"code"),e.EFF(69,"await"),e.k0s(),e.EFF(70," to call an asynchronous method:"),e.k0s(),e.j41(71,"app-copy-button")(72,"pre")(73,"code",10),e.EFF(74,"\n> appController = get(AppController)\nAppController { appService: AppService {} }\n> await appController.getHello()\n'Hello World!'\n"),e.k0s()()(),e.j41(75,"p"),e.EFF(76,"To display all public methods available on a given provider or controller, use the "),e.j41(77,"code"),e.EFF(78,"methods()"),e.k0s(),e.EFF(79," function, as follows:"),e.k0s(),e.j41(80,"app-copy-button")(81,"pre")(82,"code",10),e.EFF(83,"\n> methods(AppController)\n\nMethods:\n \u25fb getHello\n"),e.k0s()()(),e.j41(84,"p"),e.EFF(85,"To print all registered modules as a list together with their controllers and providers, use "),e.j41(86,"code"),e.EFF(87,"debug()"),e.k0s(),e.EFF(88,"."),e.k0s(),e.j41(89,"app-copy-button")(90,"pre")(91,"code",10),e.EFF(92,"\n> debug()\n\nAppModule:\n - controllers:\n  \u25fb AppController\n - providers:\n  \u25fb AppService\n"),e.k0s()()(),e.j41(93,"p"),e.EFF(94,"Quick demo:"),e.k0s(),e.j41(95,"figure"),e.nrm(96,"img",14),e.k0s(),e.j41(97,"p"),e.EFF(98,"You can find more information about the existing, predefined native methods in the section below."),e.k0s(),e.j41(99,"h4",15)(100,"span"),e.EFF(101,"Native functions"),e.k0s()(),e.j41(102,"p"),e.EFF(103,"The built-in NestJS REPL comes with a few native functions that are globally available when you start REPL. You can call "),e.j41(104,"code"),e.EFF(105,"help()"),e.k0s(),e.EFF(106," to list them out."),e.k0s(),e.j41(107,"p"),e.EFF(108,"If you don't recall what's the signature (ie: expected parameters and a return type) of a function, you can call "),e.j41(109,"code"),e.EFF(110,"<function_name>.help"),e.k0s(),e.EFF(111,".\nFor instance:"),e.k0s(),e.j41(112,"pre")(113,"code",16),e.EFF(114,"\n> $.help\nRetrieves an instance of either injectable or controller, otherwise, throws exception.\nInterface: $(token: InjectionToken) => any\n"),e.k0s()(),e.j41(115,"blockquote",12)(116,"strong"),e.EFF(117,"Hint"),e.k0s(),e.EFF(118," Those function interfaces are written in "),e.j41(119,"a",17),e.EFF(120,"TypeScript function type expression syntax"),e.k0s(),e.EFF(121,".\n"),e.k0s(),e.j41(122,"table")(123,"thead")(124,"tr")(125,"th"),e.EFF(126,"Function"),e.k0s(),e.j41(127,"th"),e.EFF(128,"Description"),e.k0s(),e.j41(129,"th"),e.EFF(130,"Signature"),e.k0s()()(),e.j41(131,"tbody")(132,"tr")(133,"td")(134,"code"),e.EFF(135,"debug"),e.k0s()(),e.j41(136,"td"),e.EFF(137,"Print all registered modules as a list together with their controllers and providers."),e.k0s(),e.j41(138,"td")(139,"code"),e.EFF(140,"debug(moduleCls?: ClassRef | string) => void"),e.k0s()()(),e.j41(141,"tr")(142,"td")(143,"code"),e.EFF(144,"get"),e.k0s(),e.EFF(145," or "),e.j41(146,"code"),e.EFF(147,"$"),e.k0s()(),e.j41(148,"td"),e.EFF(149,"Retrieves an instance of either injectable or controller, otherwise, throws exception."),e.k0s(),e.j41(150,"td")(151,"code"),e.EFF(152,"get(token: InjectionToken) => any"),e.k0s()()(),e.j41(153,"tr")(154,"td")(155,"code"),e.EFF(156,"methods"),e.k0s()(),e.j41(157,"td"),e.EFF(158,"Display all public methods available on a given provider or controller."),e.k0s(),e.j41(159,"td")(160,"code"),e.EFF(161,"methods(token: ClassRef | string) => void"),e.k0s()()(),e.j41(162,"tr")(163,"td")(164,"code"),e.EFF(165,"resolve"),e.k0s()(),e.j41(166,"td"),e.EFF(167,"Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception."),e.k0s(),e.j41(168,"td")(169,"code"),e.EFF(170,"resolve(token: InjectionToken, contextId: any) => Promise<any>"),e.k0s()()(),e.j41(171,"tr")(172,"td")(173,"code"),e.EFF(174,"select"),e.k0s()(),e.j41(175,"td"),e.EFF(176,"Allows navigating through the modules tree, for example, to pull out a specific instance from the selected module."),e.k0s(),e.j41(177,"td")(178,"code"),e.EFF(179,"select(token: DynamicModule | ClassRef) => INestApplicationContext"),e.k0s()()()()(),e.j41(180,"h4",18)(181,"span"),e.EFF(182,"Watch mode"),e.k0s()(),e.j41(183,"p"),e.EFF(184,"During development it is useful to run REPL in a watch mode to reflect all the code changes automatically:"),e.k0s(),e.j41(185,"pre")(186,"code",11),e.EFF(187,"\n$ npm run start -- --watch --entryFile repl\n"),e.k0s()(),e.j41(188,"p"),e.EFF(189,"This has one flaw, the REPL's command history is discarded after each reload which might be cumbersome.\nFortunately, there is a very simple solution. Modify your "),e.j41(190,"code"),e.EFF(191,"bootstrap"),e.k0s(),e.EFF(192," function like this:"),e.k0s(),e.j41(193,"app-copy-button")(194,"pre")(195,"code",10),e.EFF(196,'\nasync function bootstrap() {\n  const replServer = await repl(AppModule);\n  replServer.setupHistory(".nestjs_repl_history", (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n'),e.k0s()()(),e.j41(197,"p"),e.EFF(198,"Now the history is preserved between the runs/reloads."),e.k0s()()),2&s){const a=e.sdS(25);e.R7$(22),e.SpI(" ",e.i5U(23,5,"repl",a.isJsActive),"\n"),e.R7$(4),e.AVh("hide",a.isJsActive),e.R7$(3),e.AVh("hide",!a.isJsActive)}},dependencies:[g.O,d.a,F.z,f.M],encapsulation:2,changeDetection:0})}return t})(),O=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-serve-static"]],features:[e.Vt3],decls:81,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/serve-static.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","serve-static"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/@nestjs/serve-static"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","bootstrap"],[1,"language-typescript"],["appAnchor","","id","configuration"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/serve-static"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/serve-static/blob/master/lib/interfaces/serve-static-options.interface.ts"],[1,"warning"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/24-serve-static"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Serve Static"),e.k0s(),e.j41(7,"p"),e.EFF(8,"In order to serve static content like a Single Page Application (SPA) we can use the "),e.j41(9,"code"),e.EFF(10,"ServeStaticModule"),e.k0s(),e.EFF(11," from the "),e.j41(12,"a",6)(13,"code"),e.EFF(14,"@nestjs/serve-static"),e.k0s()(),e.EFF(15," package."),e.k0s(),e.j41(16,"h4",7)(17,"span"),e.EFF(18,"Installation"),e.k0s()(),e.j41(19,"p"),e.EFF(20,"First we need to install the required package:"),e.k0s(),e.j41(21,"pre")(22,"code",8),e.EFF(23,"\n$ npm install --save @nestjs/serve-static\n"),e.k0s()(),e.j41(24,"h4",9)(25,"span"),e.EFF(26,"Bootstrap"),e.k0s()(),e.j41(27,"p"),e.EFF(28,"Once the installation process is done, we can import the "),e.j41(29,"code"),e.EFF(30,"ServeStaticModule"),e.k0s(),e.EFF(31," into the root "),e.j41(32,"code"),e.EFF(33,"AppModule"),e.k0s(),e.EFF(34," and configure it by passing in a configuration object to the "),e.j41(35,"code"),e.EFF(36,"forRoot()"),e.k0s(),e.EFF(37," method."),e.k0s(),e.j41(38,"app-copy-button")(39,"pre")(40,"code",10),e.EFF(41,"\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(42,"p"),e.EFF(43,"With this in place, build the static website and place its content in the location specified by the "),e.j41(44,"code"),e.EFF(45,"rootPath"),e.k0s(),e.EFF(46," property."),e.k0s(),e.j41(47,"h4",11)(48,"span"),e.EFF(49,"Configuration"),e.k0s()(),e.j41(50,"p")(51,"a",12),e.EFF(52,"ServeStaticModule"),e.k0s(),e.EFF(53," can be configured with a variety of options to customize its behavior.\nYou can set the path to render your static app, specify excluded paths, enable or disable setting Cache-Control response header, etc. See the full list of options "),e.j41(54,"a",13),e.EFF(55,"here"),e.k0s(),e.EFF(56,"."),e.k0s(),e.j41(57,"blockquote",14)(58,"strong"),e.EFF(59,"Notice"),e.k0s(),e.EFF(60," The default "),e.j41(61,"code"),e.EFF(62,"renderPath"),e.k0s(),e.EFF(63," of the Static App is "),e.j41(64,"code"),e.EFF(65,"*"),e.k0s(),e.EFF(66,' (all paths), and the module will send "index.html" files in response.\nIt lets you create Client-Side routing for your SPA. Paths, specified in your controllers will fallback to the server.\nYou can change this behavior setting '),e.j41(67,"code"),e.EFF(68,"serveRoot"),e.k0s(),e.EFF(69,", "),e.j41(70,"code"),e.EFF(71,"renderPath"),e.k0s(),e.EFF(72," combining them with other options.\n"),e.k0s(),e.j41(73,"h4",15)(74,"span"),e.EFF(75,"Example"),e.k0s()(),e.j41(76,"p"),e.EFF(77,"A working example is available "),e.j41(78,"a",16),e.EFF(79,"here"),e.k0s(),e.EFF(80,"."),e.k0s()())},dependencies:[d.a,F.z],encapsulation:2,changeDetection:0})}return t})(),L=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-sql-sequelize"]],features:[e.Vt3],decls:209,vars:20,consts:[["contentReference",""],["app08090aa91f741157293e619a9b5655d66be36624",""],["app46c69048d9668411f7afa4d00048697d98191cc2",""],["appa166322ff913a2dd8ca195fb0dc0af5ece90c99f",""],["app567ddb1e7f908d6d2d983f31105e81e85f5d9075",""],["app55b38cd3b425316b5c8dc66610fc93eca84b0dd2",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/sql-sequelize.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","sql-sequelize"],["id","this-chapter-applies-only-to-typescript"],[1,""],["href","/techniques/database#sequelize-integration"],["rel","nofollow","target","_blank","href","https://github.com/sequelize/sequelize"],["rel","nofollow","target","_blank","href","https://github.com/RobinBuschmann/sequelize-typescript"],["appAnchor","","id","getting-started"],[1,"language-bash"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],[1,"info"],["appAnchor","","id","model-injection"],[1,"warning"]],template:function(s,o){if(1&s&&(e.j41(0,"div",6,0)(2,"div",7)(3,"a",8),e.nrm(4,"i",9),e.k0s()(),e.j41(5,"h3",10),e.EFF(6,"SQL (Sequelize)"),e.k0s(),e.j41(7,"h5",11),e.EFF(8,"This chapter applies only to TypeScript"),e.k0s(),e.j41(9,"blockquote",12)(10,"strong"),e.EFF(11,"Warning"),e.k0s(),e.EFF(12," In this article, you'll learn how to create a "),e.j41(13,"code"),e.EFF(14,"DatabaseModule"),e.k0s(),e.EFF(15," based on the "),e.j41(16,"strong"),e.EFF(17,"Sequelize"),e.k0s(),e.EFF(18," package from scratch using custom components. As a consequence, this technique contains a lot of overhead that you can avoid by using the dedicated, out-of-the-box "),e.j41(19,"code"),e.EFF(20,"@nestjs/sequelize"),e.k0s(),e.EFF(21," package. To learn more, see "),e.j41(22,"a",13),e.EFF(23,"here"),e.k0s(),e.EFF(24,".\n"),e.k0s(),e.j41(25,"p")(26,"a",14),e.EFF(27,"Sequelize"),e.k0s(),e.EFF(28," is a popular Object Relational Mapper (ORM) written in a vanilla JavaScript, but there is a "),e.j41(29,"a",15),e.EFF(30,"sequelize-typescript"),e.k0s(),e.EFF(31," TypeScript wrapper which provides a set of decorators and other extras for the base sequelize."),e.k0s(),e.j41(32,"h4",16)(33,"span"),e.EFF(34,"Getting started"),e.k0s()(),e.j41(35,"p"),e.EFF(36,"To start the adventure with this library we have to install the following dependencies:"),e.k0s(),e.j41(37,"pre")(38,"code",17),e.EFF(39,"\n$ npm install --save sequelize sequelize-typescript mysql2\n$ npm install --save-dev @types/sequelize\n"),e.k0s()(),e.j41(40,"p"),e.EFF(41,"The first step we need to do is create a "),e.j41(42,"strong"),e.EFF(43,"Sequelize"),e.k0s(),e.EFF(44," instance with an options object passed into the constructor. Also, we need to add all models (the alternative is to use "),e.j41(45,"code"),e.EFF(46,"modelPaths"),e.k0s(),e.EFF(47," property) and "),e.j41(48,"code"),e.EFF(49,"sync()"),e.k0s(),e.EFF(50," our database tables."),e.k0s(),e.j41(51,"app-copy-button",18)(52,"span",19),e.EFF(53),e.nI1(54,"extension"),e.nrm(55,"app-tabs",null,1),e.k0s(),e.j41(57,"pre")(58,"code",20),e.EFF(59,"\nimport { Sequelize } from 'sequelize-typescript';\nimport { Cat } from '../cats/cat.entity';\n\nexport const databaseProviders = [\n  {\n    provide: 'SEQUELIZE',\n    useFactory: async () => {\n      const sequelize = new Sequelize({\n        dialect: 'mysql',\n        host: 'localhost',\n        port: 3306,\n        username: 'root',\n        password: 'password',\n        database: 'nest',\n      });\n      sequelize.addModels([Cat]);\n      await sequelize.sync();\n      return sequelize;\n    },\n  },\n];\n"),e.k0s()()(),e.j41(60,"blockquote",21)(61,"strong"),e.EFF(62,"Hint"),e.k0s(),e.EFF(63," Following best practices, we declared the custom provider in the separated file which has a "),e.j41(64,"code"),e.EFF(65,"*.providers.ts"),e.k0s(),e.EFF(66," suffix.\n"),e.k0s(),e.j41(67,"p"),e.EFF(68,"Then, we need to export these providers to make them "),e.j41(69,"strong"),e.EFF(70,"accessible"),e.k0s(),e.EFF(71," for the rest part of the application."),e.k0s(),e.j41(72,"app-copy-button")(73,"pre")(74,"code",20),e.EFF(75,"\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n"),e.k0s()()(),e.j41(76,"p"),e.EFF(77,"Now we can inject the "),e.j41(78,"code"),e.EFF(79,"Sequelize"),e.k0s(),e.EFF(80," object using "),e.j41(81,"code"),e.EFF(82,"@Inject()"),e.k0s(),e.EFF(83," decorator. Each class that would depend on the "),e.j41(84,"code"),e.EFF(85,"Sequelize"),e.k0s(),e.EFF(86," async provider will wait until a "),e.j41(87,"code"),e.EFF(88,"Promise"),e.k0s(),e.EFF(89," is resolved."),e.k0s(),e.j41(90,"h4",22)(91,"span"),e.EFF(92,"Model injection"),e.k0s()(),e.j41(93,"p"),e.EFF(94,"In "),e.j41(95,"a",14),e.EFF(96,"Sequelize"),e.k0s(),e.EFF(97," the "),e.j41(98,"strong"),e.EFF(99,"Model"),e.k0s(),e.EFF(100," defines a table in the database. Instances of this class represent a database row. Firstly, we need at least one entity:"),e.k0s(),e.j41(101,"app-copy-button",18)(102,"span",19),e.EFF(103),e.nI1(104,"extension"),e.nrm(105,"app-tabs",null,2),e.k0s(),e.j41(107,"pre")(108,"code",20),e.EFF(109,"\nimport { Table, Column, Model } from 'sequelize-typescript';\n\n@Table\nexport class Cat extends Model {\n  @Column\n  name: string;\n\n  @Column\n  age: number;\n\n  @Column\n  breed: string;\n}\n"),e.k0s()()(),e.j41(110,"p"),e.EFF(111,"The "),e.j41(112,"code"),e.EFF(113,"Cat"),e.k0s(),e.EFF(114," entity belongs to the "),e.j41(115,"code"),e.EFF(116,"cats"),e.k0s(),e.EFF(117," directory. This directory represents the "),e.j41(118,"code"),e.EFF(119,"CatsModule"),e.k0s(),e.EFF(120,". Now it's time to create a "),e.j41(121,"strong"),e.EFF(122,"Repository"),e.k0s(),e.EFF(123," provider:"),e.k0s(),e.j41(124,"app-copy-button",18)(125,"span",19),e.EFF(126),e.nI1(127,"extension"),e.nrm(128,"app-tabs",null,3),e.k0s(),e.j41(130,"pre")(131,"code",20),e.EFF(132,"\nimport { Cat } from './cat.entity';\n\nexport const catsProviders = [\n  {\n    provide: 'CATS_REPOSITORY',\n    useValue: Cat,\n  },\n];\n"),e.k0s()()(),e.j41(133,"blockquote",23)(134,"strong"),e.EFF(135,"Warning"),e.k0s(),e.EFF(136," In the real-world applications you should avoid "),e.j41(137,"strong"),e.EFF(138,"magic strings"),e.k0s(),e.EFF(139,". Both "),e.j41(140,"code"),e.EFF(141,"CATS_REPOSITORY"),e.k0s(),e.EFF(142," and "),e.j41(143,"code"),e.EFF(144,"SEQUELIZE"),e.k0s(),e.EFF(145," should be kept in the separated "),e.j41(146,"code"),e.EFF(147,"constants.ts"),e.k0s(),e.EFF(148," file.\n"),e.k0s(),e.j41(149,"p"),e.EFF(150,"In Sequelize, we use static methods to manipulate the data, and thus we created an "),e.j41(151,"strong"),e.EFF(152,"alias"),e.k0s(),e.EFF(153," here."),e.k0s(),e.j41(154,"p"),e.EFF(155,"Now we can inject the "),e.j41(156,"code"),e.EFF(157,"CATS_REPOSITORY"),e.k0s(),e.EFF(158," to the "),e.j41(159,"code"),e.EFF(160,"CatsService"),e.k0s(),e.EFF(161," using the "),e.j41(162,"code"),e.EFF(163,"@Inject()"),e.k0s(),e.EFF(164," decorator:"),e.k0s(),e.j41(165,"app-copy-button",18)(166,"span",19),e.EFF(167),e.nI1(168,"extension"),e.nrm(169,"app-tabs",null,4),e.k0s(),e.j41(171,"pre")(172,"code",20),e.EFF(173,"\nimport { Injectable, Inject } from '@nestjs/common';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { Cat } from './cat.entity';\n\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject('CATS_REPOSITORY')\n    private catsRepository: typeof Cat\n  ) {}\n\n  async findAll(): Promise<Cat[]> {\n    return this.catsRepository.findAll<Cat>();\n  }\n}\n"),e.k0s()()(),e.j41(174,"p"),e.EFF(175,"The database connection is "),e.j41(176,"strong"),e.EFF(177,"asynchronous"),e.k0s(),e.EFF(178,", but Nest makes this process completely invisible for the end-user. The "),e.j41(179,"code"),e.EFF(180,"CATS_REPOSITORY"),e.k0s(),e.EFF(181," provider is waiting for the db connection, and the "),e.j41(182,"code"),e.EFF(183,"CatsService"),e.k0s(),e.EFF(184," is delayed until repository is ready to use. The entire application can start when each class is instantiated."),e.k0s(),e.j41(185,"p"),e.EFF(186,"Here is a final "),e.j41(187,"code"),e.EFF(188,"CatsModule"),e.k0s(),e.EFF(189,":"),e.k0s(),e.j41(190,"app-copy-button",18)(191,"span",19),e.EFF(192),e.nI1(193,"extension"),e.nrm(194,"app-tabs",null,5),e.k0s(),e.j41(196,"pre")(197,"code",20),e.EFF(198,"\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\nimport { catsProviders } from './cats.providers';\nimport { DatabaseModule } from '../database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [CatsController],\n  providers: [\n    CatsService,\n    ...catsProviders,\n  ],\n})\nexport class CatsModule {}\n"),e.k0s()()(),e.j41(199,"blockquote",21)(200,"strong"),e.EFF(201,"Hint"),e.k0s(),e.EFF(202," Do not forget to import the "),e.j41(203,"code"),e.EFF(204,"CatsModule"),e.k0s(),e.EFF(205," into the root "),e.j41(206,"code"),e.EFF(207,"AppModule"),e.k0s(),e.EFF(208,".\n"),e.k0s()()),2&s){const a=e.sdS(56),i=e.sdS(106),c=e.sdS(129),p=e.sdS(170),r=e.sdS(195);e.R7$(53),e.SpI(" ",e.i5U(54,5,"database.providers",a.isJsActive),"\n"),e.R7$(50),e.SpI(" ",e.i5U(104,8,"cat.entity",i.isJsActive),"\n"),e.R7$(23),e.SpI(" ",e.i5U(127,11,"cats.providers",c.isJsActive),"\n"),e.R7$(41),e.SpI(" ",e.i5U(168,14,"cats.service",p.isJsActive),"\n"),e.R7$(25),e.SpI(" ",e.i5U(193,17,"cats.module",r.isJsActive),"\n")}},dependencies:[g.O,d.a,F.z,f.M],encapsulation:2,changeDetection:0})}return t})(),$=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-sql-typeorm"]],features:[e.Vt3],decls:221,vars:24,consts:[["contentReference",""],["app30cd0cda8706d79a4bcf98eb458deef9aaa3dfdc",""],["app21ffaf4dbe229afe5a9fb58bb9d6986c6ac9e397",""],["appcfbf37ae76890881e321faa62ab26937c3d0e44d",""],["appc40592670ad5d29fc1239391738bd5f7927d7dfc",""],["app14009d2c790bbddfe906a008b48849f6f6f59bf2",""],["app8f6ed5f90a5278bf7423dd5250dfc837ac101843",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/sql-typeorm.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","sql-typeorm"],["id","this-chapter-applies-only-to-typescript"],[1,""],["routerLink","/techniques/sql"],["rel","nofollow","target","_blank","href","https://github.com/typeorm/typeorm"],["appAnchor","","id","getting-started"],[1,"language-bash"],["routerLink","/fundamentals/async-components"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],[1,"warning"],[1,"info"],["appAnchor","","id","repository-pattern"]],template:function(s,o){if(1&s&&(e.j41(0,"div",7,0)(2,"div",8)(3,"a",9),e.nrm(4,"i",10),e.k0s()(),e.j41(5,"h3",11),e.EFF(6,"SQL (TypeORM)"),e.k0s(),e.j41(7,"h5",12),e.EFF(8,"This chapter applies only to TypeScript"),e.k0s(),e.j41(9,"blockquote",13)(10,"strong"),e.EFF(11,"Warning"),e.k0s(),e.EFF(12," In this article, you'll learn how to create a "),e.j41(13,"code"),e.EFF(14,"DatabaseModule"),e.k0s(),e.EFF(15," based on the "),e.j41(16,"strong"),e.EFF(17,"TypeORM"),e.k0s(),e.EFF(18," package from scratch using custom providers mechanism. As a consequence, this solution contains a lot of overhead that you can omit using ready to use and available out-of-the-box dedicated "),e.j41(19,"code"),e.EFF(20,"@nestjs/typeorm"),e.k0s(),e.EFF(21," package. To learn more, see "),e.j41(22,"a",14),e.EFF(23,"here"),e.k0s(),e.EFF(24,".\n"),e.k0s(),e.j41(25,"p")(26,"a",15),e.EFF(27,"TypeORM"),e.k0s(),e.EFF(28," is definitely the most mature Object Relational Mapper (ORM) available in the node.js world. Since it's written in TypeScript, it works pretty well with the Nest framework."),e.k0s(),e.j41(29,"h4",16)(30,"span"),e.EFF(31,"Getting started"),e.k0s()(),e.j41(32,"p"),e.EFF(33,"To start the adventure with this library we have to install all required dependencies:"),e.k0s(),e.j41(34,"pre")(35,"code",17),e.EFF(36,"\n$ npm install --save typeorm mysql2\n"),e.k0s()(),e.j41(37,"p"),e.EFF(38,"The first step we need to do is to establish the connection with our database using "),e.j41(39,"code"),e.EFF(40,"new DataSource().initialize()"),e.k0s(),e.EFF(41," class imported from the "),e.j41(42,"code"),e.EFF(43,"typeorm"),e.k0s(),e.EFF(44," package. The "),e.j41(45,"code"),e.EFF(46,"initialize()"),e.k0s(),e.EFF(47," function returns a "),e.j41(48,"code"),e.EFF(49,"Promise"),e.k0s(),e.EFF(50,", and therefore we have to create an "),e.j41(51,"a",18),e.EFF(52,"async provider"),e.k0s(),e.EFF(53,"."),e.k0s(),e.j41(54,"app-copy-button",19)(55,"span",20),e.EFF(56),e.nI1(57,"extension"),e.nrm(58,"app-tabs",null,1),e.k0s(),e.j41(60,"pre")(61,"code",21),e.EFF(62,"\nimport { DataSource } from 'typeorm';\n\nexport const databaseProviders = [\n  {\n    provide: 'DATA_SOURCE',\n    useFactory: async () => {\n      const dataSource = new DataSource({\n        type: 'mysql',\n        host: 'localhost',\n        port: 3306,\n        username: 'root',\n        password: 'root',\n        database: 'test',\n        entities: [\n            __dirname + '/../**/*.entity{.ts,.js}',\n        ],\n        synchronize: true,\n      });\n\n      return dataSource.initialize();\n    },\n  },\n];\n"),e.k0s()()(),e.j41(63,"blockquote",22)(64,"strong"),e.EFF(65,"Warning"),e.k0s(),e.EFF(66," Setting "),e.j41(67,"code"),e.EFF(68,"synchronize: true"),e.k0s(),e.EFF(69," shouldn't be used in production - otherwise you can lose production data.\n"),e.k0s(),e.j41(70,"blockquote",23)(71,"strong"),e.EFF(72,"Hint"),e.k0s(),e.EFF(73," Following best practices, we declared the custom provider in the separated file which has a "),e.j41(74,"code"),e.EFF(75,"*.providers.ts"),e.k0s(),e.EFF(76," suffix.\n"),e.k0s(),e.j41(77,"p"),e.EFF(78,"Then, we need to export these providers to make them "),e.j41(79,"strong"),e.EFF(80,"accessible"),e.k0s(),e.EFF(81," for the rest of the application."),e.k0s(),e.j41(82,"app-copy-button",19)(83,"span",20),e.EFF(84),e.nI1(85,"extension"),e.nrm(86,"app-tabs",null,2),e.k0s(),e.j41(88,"pre")(89,"code",21),e.EFF(90,"\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n"),e.k0s()()(),e.j41(91,"p"),e.EFF(92,"Now we can inject the "),e.j41(93,"code"),e.EFF(94,"DATA_SOURCE"),e.k0s(),e.EFF(95," object using "),e.j41(96,"code"),e.EFF(97,"@Inject()"),e.k0s(),e.EFF(98," decorator. Each class that would depend on the "),e.j41(99,"code"),e.EFF(100,"DATA_SOURCE"),e.k0s(),e.EFF(101," async provider will wait until a "),e.j41(102,"code"),e.EFF(103,"Promise"),e.k0s(),e.EFF(104," is resolved."),e.k0s(),e.j41(105,"h4",24)(106,"span"),e.EFF(107,"Repository pattern"),e.k0s()(),e.j41(108,"p"),e.EFF(109,"The "),e.j41(110,"a",15),e.EFF(111,"TypeORM"),e.k0s(),e.EFF(112," supports the repository design pattern, thus each entity has its own Repository. These repositories can be obtained from the database connection."),e.k0s(),e.j41(113,"p"),e.EFF(114,"But firstly, we need at least one entity. We are going to reuse the "),e.j41(115,"code"),e.EFF(116,"Photo"),e.k0s(),e.EFF(117," entity from the official documentation."),e.k0s(),e.j41(118,"app-copy-button",19)(119,"span",20),e.EFF(120),e.nI1(121,"extension"),e.nrm(122,"app-tabs",null,3),e.k0s(),e.j41(124,"pre")(125,"code",21),e.EFF(126,"\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Photo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ length: 500 })\n  name: string;\n\n  @Column('text')\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column('int')\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n"),e.k0s()()(),e.j41(127,"p"),e.EFF(128,"The "),e.j41(129,"code"),e.EFF(130,"Photo"),e.k0s(),e.EFF(131," entity belongs to the "),e.j41(132,"code"),e.EFF(133,"photo"),e.k0s(),e.EFF(134," directory. This directory represents the "),e.j41(135,"code"),e.EFF(136,"PhotoModule"),e.k0s(),e.EFF(137,". Now, let's create a "),e.j41(138,"strong"),e.EFF(139,"Repository"),e.k0s(),e.EFF(140," provider:"),e.k0s(),e.j41(141,"app-copy-button",19)(142,"span",20),e.EFF(143),e.nI1(144,"extension"),e.nrm(145,"app-tabs",null,4),e.k0s(),e.j41(147,"pre")(148,"code",21),e.EFF(149,"\nimport { DataSource } from 'typeorm';\nimport { Photo } from './photo.entity';\n\nexport const photoProviders = [\n  {\n    provide: 'PHOTO_REPOSITORY',\n    useFactory: (dataSource: DataSource) => dataSource.getRepository(Photo),\n    inject: ['DATA_SOURCE'],\n  },\n];\n"),e.k0s()()(),e.j41(150,"blockquote",22)(151,"strong"),e.EFF(152,"Warning"),e.k0s(),e.EFF(153," In the real-world applications you should avoid "),e.j41(154,"strong"),e.EFF(155,"magic strings"),e.k0s(),e.EFF(156,". Both "),e.j41(157,"code"),e.EFF(158,"PHOTO_REPOSITORY"),e.k0s(),e.EFF(159," and "),e.j41(160,"code"),e.EFF(161,"DATA_SOURCE"),e.k0s(),e.EFF(162," should be kept in the separated "),e.j41(163,"code"),e.EFF(164,"constants.ts"),e.k0s(),e.EFF(165," file.\n"),e.k0s(),e.j41(166,"p"),e.EFF(167,"Now we can inject the "),e.j41(168,"code"),e.EFF(169,"Repository<Photo>"),e.k0s(),e.EFF(170," to the "),e.j41(171,"code"),e.EFF(172,"PhotoService"),e.k0s(),e.EFF(173," using the "),e.j41(174,"code"),e.EFF(175,"@Inject()"),e.k0s(),e.EFF(176," decorator:"),e.k0s(),e.j41(177,"app-copy-button",19)(178,"span",20),e.EFF(179),e.nI1(180,"extension"),e.nrm(181,"app-tabs",null,5),e.k0s(),e.j41(183,"pre")(184,"code",21),e.EFF(185,"\nimport { Injectable, Inject } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Photo } from './photo.entity';\n\n@Injectable()\nexport class PhotoService {\n  constructor(\n    @Inject('PHOTO_REPOSITORY')\n    private photoRepository: Repository<Photo>,\n  ) {}\n\n  async findAll(): Promise<Photo[]> {\n    return this.photoRepository.find();\n  }\n}\n"),e.k0s()()(),e.j41(186,"p"),e.EFF(187,"The database connection is "),e.j41(188,"strong"),e.EFF(189,"asynchronous"),e.k0s(),e.EFF(190,", but Nest makes this process completely invisible for the end-user. The "),e.j41(191,"code"),e.EFF(192,"PhotoRepository"),e.k0s(),e.EFF(193," is waiting for the db connection, and the "),e.j41(194,"code"),e.EFF(195,"PhotoService"),e.k0s(),e.EFF(196," is delayed until repository is ready to use. The entire application can start when each class is instantiated."),e.k0s(),e.j41(197,"p"),e.EFF(198,"Here is a final "),e.j41(199,"code"),e.EFF(200,"PhotoModule"),e.k0s(),e.EFF(201,":"),e.k0s(),e.j41(202,"app-copy-button",19)(203,"span",20),e.EFF(204),e.nI1(205,"extension"),e.nrm(206,"app-tabs",null,6),e.k0s(),e.j41(208,"pre")(209,"code",21),e.EFF(210,"\nimport { Module } from '@nestjs/common';\nimport { DatabaseModule } from '../database/database.module';\nimport { photoProviders } from './photo.providers';\nimport { PhotoService } from './photo.service';\n\n@Module({\n  imports: [DatabaseModule],\n  providers: [\n    ...photoProviders,\n    PhotoService,\n  ],\n})\nexport class PhotoModule {}\n"),e.k0s()()(),e.j41(211,"blockquote",23)(212,"strong"),e.EFF(213,"Hint"),e.k0s(),e.EFF(214," Do not forget to import the "),e.j41(215,"code"),e.EFF(216,"PhotoModule"),e.k0s(),e.EFF(217," into the root "),e.j41(218,"code"),e.EFF(219,"AppModule"),e.k0s(),e.EFF(220,".\n"),e.k0s()()),2&s){const a=e.sdS(59),i=e.sdS(87),c=e.sdS(123),p=e.sdS(146),r=e.sdS(182),u=e.sdS(207);e.R7$(56),e.SpI(" ",e.i5U(57,6,"database.providers",a.isJsActive),"\n"),e.R7$(28),e.SpI(" ",e.i5U(85,9,"database.module",i.isJsActive),"\n"),e.R7$(36),e.SpI(" ",e.i5U(121,12,"photo.entity",c.isJsActive),"\n"),e.R7$(23),e.SpI(" ",e.i5U(144,15,"photo.providers",p.isJsActive),"\n"),e.R7$(36),e.SpI(" ",e.i5U(180,18,"photo.service",r.isJsActive),"\n"),e.R7$(25),e.SpI(" ",e.i5U(205,21,"photo.module",u.isJsActive),"\n")}},dependencies:[g.O,d.a,F.z,j.Wk,f.M],encapsulation:2,changeDetection:0})}return t})(),N=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-terminus"]],features:[e.Vt3],decls:650,vars:100,consts:[["contentReference",""],["appb1b7b66bd10ade66d00efa01a85c8365e9fe6126",""],["appfa1fb41488d54cafe69aeb1d8cbd327c7cba377d",""],["app730fe14b1b2103c2fda2e10e2ae358de8bdce067",""],["app982fe3fbc7a0a43b230d4852109ada2b16c7138f",""],["app836590b71c9cf11f9bd8f5a2e490a783c6f7eca0",""],["app847be30d1b70a3f2a6b6f009625dab53b614bdc2",""],["appb10de49bb8b0dc47e2a5e9d135251238b812aa8c",""],["app87bbef070186b7fb93fbb19c102830b7d68f2b0a",""],["app5224d7f0b3a33e8e36daa342dcf8e3f74ef7504f",""],["app5922101c895fae5f6fe36f9b2b3cfa6032076f2e",""],["app82a6d865bed5d9c603002858447b08d77b4bca07",""],["appa3ec9e1280834da02f452ea22e08226b2292f615",""],["app5cc86937ba2b64fd6237cb88d83dcb71e5c7111c",""],["appc89a7c3edf251241d178ece23eef2e2b79f83821",""],["appfd6978745c4980b6b7e83c188dce84de176fe59e",""],["app3ce7c20af670bcffef8975d1f63f1819fa8588c4",""],["app0cc179af8329827e5d6888d5221a718b64a8327e",""],["app5e98a3e725ef2317d95912b1e4a29714ae73dbc7",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/terminus.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","healthchecks-terminus"],["rel","nofollow","target","_blank","href","https://kubernetes.io/"],["appAnchor","","id","getting-started"],[1,"language-bash"],["appAnchor","","id","setting-up-a-healthcheck"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/terminus"],[1,"info"],["routerLink","cli/overview"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],["routerLink","/controllers"],["href","fundamentals/lifecycle-events#application-shutdown"],["appAnchor","","id","http-healthcheck"],[1,"language-json"],["id","check-for-specific-http-response-codes"],["appAnchor","","id","typeorm-health-indicator"],["routerLink","/techniques/sql"],["href","techniques/database#multiple-databases"],["appAnchor","","id","disk-health-indicator"],["appAnchor","","id","memory-health-indicator"],["appAnchor","","id","custom-health-indicator"],["appAnchor","","id","logging"],["href","/techniques/logger#injecting-a-custom-logger"],["align","left"],["src","/assets/Terminus_Error_Log_Json.png"],["src","/assets/Terminus_Error_Log_Pretty.png"],["appAnchor","","id","graceful-shutdown-timeout"],["appAnchor","","id","more-examples"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/terminus/tree/master/sample"]],template:function(s,o){if(1&s&&(e.j41(0,"div",19,0)(2,"div",20)(3,"a",21),e.nrm(4,"i",22),e.k0s()(),e.j41(5,"h3",23),e.EFF(6,"Healthchecks (Terminus)"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Terminus integration provides you with "),e.j41(9,"strong"),e.EFF(10,"readiness/liveness"),e.k0s(),e.EFF(11," health checks. Healthchecks are crucial when it comes to complex\nbackend setups. In a nutshell, a health check in the realm of web development usually consists of a special address, for example, "),e.j41(12,"code"),e.EFF(13,"https://my-website.com/health/readiness"),e.k0s(),e.EFF(14,".\nA service or a component of your infrastructure (e.g., "),e.j41(15,"a",24),e.EFF(16,"Kubernetes"),e.k0s(),e.EFF(17," checks this address continuously. Depending on the HTTP status code returned from a "),e.j41(18,"code"),e.EFF(19,"GET"),e.k0s(),e.EFF(20,' request to this address the service will take action when it receives an "unhealthy" response.\nSince the definition of "healthy" or "unhealthy" varies with the type of service you provide, the '),e.j41(21,"strong"),e.EFF(22,"Terminus"),e.k0s(),e.EFF(23," integration supports you with a\nset of "),e.j41(24,"strong"),e.EFF(25,"health indicators"),e.k0s(),e.EFF(26,"."),e.k0s(),e.j41(27,"p"),e.EFF(28,"As an example, if your web server uses MongoDB to store its data, it would be vital information whether MongoDB is still up and running.\nIn that case, you can make use of the "),e.j41(29,"code"),e.EFF(30,"MongooseHealthIndicator"),e.k0s(),e.EFF(31,". If configured correctly - more on that later - your health check address will return\na healthy or unhealthy HTTP status code, depending on whether MongoDB is running."),e.k0s(),e.j41(32,"h4",25)(33,"span"),e.EFF(34,"Getting started"),e.k0s()(),e.j41(35,"p"),e.EFF(36,"To get started with "),e.j41(37,"code"),e.EFF(38,"@nestjs/terminus"),e.k0s(),e.EFF(39," we need to install the required dependency."),e.k0s(),e.j41(40,"pre")(41,"code",26),e.EFF(42,"\n$ npm install --save @nestjs/terminus\n"),e.k0s()(),e.j41(43,"h4",27)(44,"span"),e.EFF(45,"Setting up a Healthcheck"),e.k0s()(),e.j41(46,"p"),e.EFF(47,"A health check represents a summary of "),e.j41(48,"strong"),e.EFF(49,"health indicators"),e.k0s(),e.EFF(50,". A health indicator executes a check of a service, whether it is in a healthy or unhealthy state. A health check is positive if all the assigned health indicators are up and running. Because a lot of applications will need similar health indicators, "),e.j41(51,"a",28)(52,"code"),e.EFF(53,"@nestjs/terminus"),e.k0s()(),e.EFF(54," provides a set of predefined indicators, such as:"),e.k0s(),e.j41(55,"ul")(56,"li")(57,"code"),e.EFF(58,"HttpHealthIndicator"),e.k0s()(),e.j41(59,"li")(60,"code"),e.EFF(61,"TypeOrmHealthIndicator"),e.k0s()(),e.j41(62,"li")(63,"code"),e.EFF(64,"MongooseHealthIndicator"),e.k0s()(),e.j41(65,"li")(66,"code"),e.EFF(67,"SequelizeHealthIndicator"),e.k0s()(),e.j41(68,"li")(69,"code"),e.EFF(70,"MikroOrmHealthIndicator"),e.k0s()(),e.j41(71,"li")(72,"code"),e.EFF(73,"PrismaHealthIndicator"),e.k0s()(),e.j41(74,"li")(75,"code"),e.EFF(76,"MicroserviceHealthIndicator"),e.k0s()(),e.j41(77,"li")(78,"code"),e.EFF(79,"GRPCHealthIndicator"),e.k0s()(),e.j41(80,"li")(81,"code"),e.EFF(82,"MemoryHealthIndicator"),e.k0s()(),e.j41(83,"li")(84,"code"),e.EFF(85,"DiskHealthIndicator"),e.k0s()()(),e.j41(86,"p"),e.EFF(87,"To get started with our first health check, let's create the "),e.j41(88,"code"),e.EFF(89,"HealthModule"),e.k0s(),e.EFF(90," and import the "),e.j41(91,"code"),e.EFF(92,"TerminusModule"),e.k0s(),e.EFF(93," into it in its imports array."),e.k0s(),e.j41(94,"blockquote",29)(95,"strong"),e.EFF(96,"Hint"),e.k0s(),e.EFF(97," To create the module using the "),e.j41(98,"a",30),e.EFF(99,"Nest CLI"),e.k0s(),e.EFF(100,", simply execute the "),e.j41(101,"code"),e.EFF(102,"$ nest g module health"),e.k0s(),e.EFF(103," command.\n"),e.k0s(),e.j41(104,"app-copy-button",31)(105,"span",32),e.EFF(106),e.nI1(107,"extension"),e.nrm(108,"app-tabs",null,1),e.k0s(),e.j41(110,"pre")(111,"code",33),e.EFF(112,"\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [TerminusModule]\n})\nexport class HealthModule {}\n"),e.k0s()()(),e.j41(113,"p"),e.EFF(114,"Our healthcheck(s) can be executed using a "),e.j41(115,"a",34),e.EFF(116,"controller"),e.k0s(),e.EFF(117,", which can be easily set up using the "),e.j41(118,"a",30),e.EFF(119,"Nest CLI"),e.k0s(),e.EFF(120,"."),e.k0s(),e.j41(121,"pre")(122,"code",26),e.EFF(123,"\n$ nest g controller health\n"),e.k0s()(),e.j41(124,"blockquote",29)(125,"strong"),e.EFF(126,"Info"),e.k0s(),e.EFF(127," It is highly recommended to enable shutdown hooks in your application. Terminus integration makes use of this lifecycle event if enabled. Read more about shutdown hooks "),e.j41(128,"a",35),e.EFF(129,"here"),e.k0s(),e.EFF(130,".\n"),e.k0s(),e.j41(131,"h4",36)(132,"span"),e.EFF(133,"HTTP Healthcheck"),e.k0s()(),e.j41(134,"p"),e.EFF(135,"Once we have installed "),e.j41(136,"code"),e.EFF(137,"@nestjs/terminus"),e.k0s(),e.EFF(138,", imported our "),e.j41(139,"code"),e.EFF(140,"TerminusModule"),e.k0s(),e.EFF(141," and created a new controller, we are ready to create a health check."),e.k0s(),e.j41(142,"p"),e.EFF(143,"The "),e.j41(144,"code"),e.EFF(145,"HTTPHealthIndicator"),e.k0s(),e.EFF(146," requires the "),e.j41(147,"code"),e.EFF(148,"@nestjs/axios"),e.k0s(),e.EFF(149," package so make sure to have it installed:"),e.k0s(),e.j41(150,"pre")(151,"code",26),e.EFF(152,"\n$ npm i --save @nestjs/axios axios\n"),e.k0s()(),e.j41(153,"p"),e.EFF(154,"Now we can setup our "),e.j41(155,"code"),e.EFF(156,"HealthController"),e.k0s(),e.EFF(157,":"),e.k0s(),e.j41(158,"app-copy-button",31)(159,"span",32),e.EFF(160),e.nI1(161,"extension"),e.nrm(162,"app-tabs",null,2),e.k0s(),e.j41(164,"pre")(165,"code",33),e.EFF(166,"\nimport { Controller, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, HealthCheck } from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n    ]);\n  }\n}\n"),e.k0s()(),e.j41(167,"pre")(168,"code",33),e.EFF(169,"\nimport { Controller, Dependencies, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, HealthCheck } from '@nestjs/terminus';\n\n@Controller('health')\n@Dependencies(HealthCheckService, HttpHealthIndicator)\nexport class HealthController {\n  constructor(\n    private health,\n    private http,\n  ) { }\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n    ])\n  }\n}\n"),e.k0s()()(),e.j41(170,"app-copy-button",31)(171,"span",32),e.EFF(172),e.nI1(173,"extension"),e.nrm(174,"app-tabs",null,3),e.k0s(),e.j41(176,"pre")(177,"code",33),e.EFF(178,"\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport { HealthController } from './health.controller';\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n"),e.k0s()(),e.j41(179,"pre")(180,"code",33),e.EFF(181,"\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport { HealthController } from './health.controller';\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n"),e.k0s()()(),e.j41(182,"p"),e.EFF(183,"Our health check will now send a "),e.j41(184,"em"),e.EFF(185,"GET"),e.k0s(),e.EFF(186,"-request to the "),e.j41(187,"code"),e.EFF(188,"https://docs.nestjs.com"),e.k0s(),e.EFF(189," address. If\nwe get a healthy response from that address, our route at "),e.j41(190,"code"),e.EFF(191,"http://localhost:3000/health"),e.k0s(),e.EFF(192," will return\nthe following object with a 200 status code."),e.k0s(),e.j41(193,"pre")(194,"code",37),e.EFF(195,'\n{\n  "status": "ok",\n  "info": {\n    "nestjs-docs": {\n      "status": "up"\n    }\n  },\n  "error": {},\n  "details": {\n    "nestjs-docs": {\n      "status": "up"\n    }\n  }\n}\n'),e.k0s()(),e.j41(196,"p"),e.EFF(197,"The interface of this response object can be accessed from the "),e.j41(198,"code"),e.EFF(199,"@nestjs/terminus"),e.k0s(),e.EFF(200," package with the "),e.j41(201,"code"),e.EFF(202,"HealthCheckResult"),e.k0s(),e.EFF(203," interface."),e.k0s(),e.j41(204,"table"),e.nrm(205,"thead"),e.j41(206,"tbody")(207,"tr")(208,"td")(209,"code"),e.EFF(210,"status"),e.k0s()(),e.j41(211,"td"),e.EFF(212,"If any health indicator failed the status will be "),e.j41(213,"code"),e.EFF(214,"'error'"),e.k0s(),e.EFF(215,". If the NestJS app is shutting down but still accepting HTTP requests, the health check will have the "),e.j41(216,"code"),e.EFF(217,"'shutting_down'"),e.k0s(),e.EFF(218," status."),e.k0s(),e.j41(219,"td")(220,"code"),e.EFF(221,"'error' | 'ok' | 'shutting_down'"),e.k0s()()(),e.j41(222,"tr")(223,"td")(224,"code"),e.EFF(225,"info"),e.k0s()(),e.j41(226,"td"),e.EFF(227,"Object containing information of each health indicator which is of status "),e.j41(228,"code"),e.EFF(229,"'up'"),e.k0s(),e.EFF(230,', or in other words "healthy".'),e.k0s(),e.j41(231,"td")(232,"code"),e.EFF(233,"object"),e.k0s()()(),e.j41(234,"tr")(235,"td")(236,"code"),e.EFF(237,"error"),e.k0s()(),e.j41(238,"td"),e.EFF(239,"Object containing information of each health indicator which is of status "),e.j41(240,"code"),e.EFF(241,"'down'"),e.k0s(),e.EFF(242,', or in other words "unhealthy".'),e.k0s(),e.j41(243,"td")(244,"code"),e.EFF(245,"object"),e.k0s()()(),e.j41(246,"tr")(247,"td")(248,"code"),e.EFF(249,"details"),e.k0s()(),e.j41(250,"td"),e.EFF(251,"Object containing all information of each health indicator"),e.k0s(),e.j41(252,"td")(253,"code"),e.EFF(254,"object"),e.k0s()()()()(),e.j41(255,"h5",38),e.EFF(256,"Check for specific HTTP response codes"),e.k0s(),e.j41(257,"p"),e.EFF(258,"In certain cases, you might want to check for specific criteria and validate the response. As an example, let's assume\n"),e.j41(259,"code"),e.EFF(260,"https://my-external-service.com"),e.k0s(),e.EFF(261," returns a response code "),e.j41(262,"code"),e.EFF(263,"204"),e.k0s(),e.EFF(264,". With "),e.j41(265,"code"),e.EFF(266,"HttpHealthIndicator.responseCheck"),e.k0s(),e.EFF(267," you can\ncheck for that response code specifically and determine all other codes as unhealthy."),e.k0s(),e.j41(268,"p"),e.EFF(269,"In case any other response code other than "),e.j41(270,"code"),e.EFF(271,"204"),e.k0s(),e.EFF(272," gets returned, the following example would be unhealthy. The third parameter\nrequires you to provide a function (sync or async) which returns a boolean whether the response is considered\nhealthy ("),e.j41(273,"code"),e.EFF(274,"true"),e.k0s(),e.EFF(275,") or unhealthy ("),e.j41(276,"code"),e.EFF(277,"false"),e.k0s(),e.EFF(278,")."),e.k0s(),e.j41(279,"app-copy-button",31)(280,"span",32),e.EFF(281),e.nI1(282,"extension"),e.nrm(283,"app-tabs",null,4),e.k0s(),e.j41(285,"pre")(286,"code",33),e.EFF(287,"\n// Within the `HealthController`-class\n\n@Get()\n@HealthCheck()\ncheck() {\n  return this.health.check([\n    () =>\n      this.http.responseCheck(\n        'my-external-service',\n        'https://my-external-service.com',\n        (res) => res.status === 204,\n      ),\n  ]);\n}\n"),e.k0s()()(),e.j41(288,"h4",39)(289,"span"),e.EFF(290,"TypeOrm health indicator"),e.k0s()(),e.j41(291,"p"),e.EFF(292,"Terminus offers the capability to add database checks to your health check. In order to get started with this health indicator, you\nshould check out the "),e.j41(293,"a",40),e.EFF(294,"Database chapter"),e.k0s(),e.EFF(295," and make sure your database connection within your application is established."),e.k0s(),e.j41(296,"blockquote",29)(297,"strong"),e.EFF(298,"Hint"),e.k0s(),e.EFF(299," Behind the scenes the "),e.j41(300,"code"),e.EFF(301,"TypeOrmHealthIndicator"),e.k0s(),e.EFF(302," simply executes a "),e.j41(303,"code"),e.EFF(304,"SELECT 1"),e.k0s(),e.EFF(305,"-SQL command which is often used to verify whether the database still alive. In case you are using an Oracle database it uses "),e.j41(306,"code"),e.EFF(307,"SELECT 1 FROM DUAL"),e.k0s(),e.EFF(308,".\n"),e.k0s(),e.j41(309,"app-copy-button",31)(310,"span",32),e.EFF(311),e.nI1(312,"extension"),e.nrm(313,"app-tabs",null,5),e.k0s(),e.j41(315,"pre")(316,"code",33),e.EFF(317,"\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n    ]);\n  }\n}\n"),e.k0s()(),e.j41(318,"pre")(319,"code",33),e.EFF(320,"\n@Controller('health')\n@Dependencies(HealthCheckService, TypeOrmHealthIndicator)\nexport class HealthController {\n  constructor(\n    private health,\n    private db,\n  ) { }\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n    ])\n  }\n}\n"),e.k0s()()(),e.j41(321,"p"),e.EFF(322,"If your database is reachable, you should now see the following JSON-result when requesting "),e.j41(323,"code"),e.EFF(324,"http://localhost:3000/health"),e.k0s(),e.EFF(325," with a "),e.j41(326,"code"),e.EFF(327,"GET"),e.k0s(),e.EFF(328," request:"),e.k0s(),e.j41(329,"pre")(330,"code",37),e.EFF(331,'\n{\n  "status": "ok",\n  "info": {\n    "database": {\n      "status": "up"\n    }\n  },\n  "error": {},\n  "details": {\n    "database": {\n      "status": "up"\n    }\n  }\n}\n'),e.k0s()(),e.j41(332,"p"),e.EFF(333,"In case your app uses "),e.j41(334,"a",41),e.EFF(335,"multiple databases"),e.k0s(),e.EFF(336,", you need to inject each\nconnection into your "),e.j41(337,"code"),e.EFF(338,"HealthController"),e.k0s(),e.EFF(339,". Then, you can simply pass the connection reference to the "),e.j41(340,"code"),e.EFF(341,"TypeOrmHealthIndicator"),e.k0s(),e.EFF(342,"."),e.k0s(),e.j41(343,"app-copy-button",31)(344,"span",32),e.EFF(345),e.nI1(346,"extension"),e.nrm(347,"app-tabs",null,6),e.k0s(),e.j41(349,"pre")(350,"code",33),e.EFF(351,"\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n    @InjectConnection('albumsConnection')\n    private albumsConnection: Connection,\n    @InjectConnection()\n    private defaultConnection: Connection,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('albums-database', { connection: this.albumsConnection }),\n      () => this.db.pingCheck('database', { connection: this.defaultConnection }),\n    ]);\n  }\n}\n"),e.k0s()()(),e.j41(352,"h4",42)(353,"span"),e.EFF(354,"Disk health indicator"),e.k0s()(),e.j41(355,"p"),e.EFF(356,"With the "),e.j41(357,"code"),e.EFF(358,"DiskHealthIndicator"),e.k0s(),e.EFF(359," we can check how much storage is in use. To get started, make sure to inject the "),e.j41(360,"code"),e.EFF(361,"DiskHealthIndicator"),e.k0s(),e.EFF(362,"\ninto your "),e.j41(363,"code"),e.EFF(364,"HealthController"),e.k0s(),e.EFF(365,". The following example checks the storage used of the path "),e.j41(366,"code"),e.EFF(367,"/"),e.k0s(),e.EFF(368," (or on Windows you can use "),e.j41(369,"code"),e.EFF(370,"C:\\\\"),e.k0s(),e.EFF(371,").\nIf that exceeds more than 50% of the total storage space it would response with an unhealthy Health Check."),e.k0s(),e.j41(372,"app-copy-button",31)(373,"span",32),e.EFF(374),e.nI1(375,"extension"),e.nrm(376,"app-tabs",null,7),e.k0s(),e.j41(378,"pre")(379,"code",33),e.EFF(380,"\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private readonly health: HealthCheckService,\n    private readonly disk: DiskHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.disk.checkStorage('storage', { path: '/', thresholdPercent: 0.5 }),\n    ]);\n  }\n}\n"),e.k0s()(),e.j41(381,"pre")(382,"code",33),e.EFF(383,"\n@Controller('health')\n@Dependencies(HealthCheckService, DiskHealthIndicator)\nexport class HealthController {\n  constructor(health, disk) {}\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.disk.checkStorage('storage', { path: '/', thresholdPercent: 0.5 }),\n    ])\n  }\n}\n"),e.k0s()()(),e.j41(384,"p"),e.EFF(385,"With the "),e.j41(386,"code"),e.EFF(387,"DiskHealthIndicator.checkStorage"),e.k0s(),e.EFF(388," function you also have the possibility to check for a fixed amount of space.\nThe following example would be unhealthy in case the path "),e.j41(389,"code"),e.EFF(390,"/my-app/"),e.k0s(),e.EFF(391," would exceed 250GB."),e.k0s(),e.j41(392,"app-copy-button",31)(393,"span",32),e.EFF(394),e.nI1(395,"extension"),e.nrm(396,"app-tabs",null,8),e.k0s(),e.j41(398,"pre")(399,"code",33),e.EFF(400,"\n// Within the `HealthController`-class\n\n@Get()\n@HealthCheck()\ncheck() {\n  return this.health.check([\n    () => this.disk.checkStorage('storage', {  path: '/', threshold: 250 * 1024 * 1024 * 1024, })\n  ]);\n}\n"),e.k0s()()(),e.j41(401,"h4",43)(402,"span"),e.EFF(403,"Memory health indicator"),e.k0s()(),e.j41(404,"p"),e.EFF(405,"To make sure your process does not exceed a certain memory limit the "),e.j41(406,"code"),e.EFF(407,"MemoryHealthIndicator"),e.k0s(),e.EFF(408," can be used. The following example can be used to check the heap of your process."),e.k0s(),e.j41(409,"blockquote",29)(410,"strong"),e.EFF(411,"Hint"),e.k0s(),e.EFF(412," Heap is the portion of memory where dynamically allocated memory resides (i.e. memory allocated via malloc). Memory allocated from the heap will remain allocated until one of the following occurs:\n"),e.j41(413,"ul")(414,"li"),e.EFF(415,"The memory is "),e.j41(416,"em"),e.EFF(417,"free"),e.k0s(),e.EFF(418,"'d"),e.k0s(),e.j41(419,"li"),e.EFF(420,"The program terminates"),e.k0s()()(),e.j41(421,"app-copy-button",31)(422,"span",32),e.EFF(423),e.nI1(424,"extension"),e.nrm(425,"app-tabs",null,9),e.k0s(),e.j41(427,"pre")(428,"code",33),e.EFF(429,"\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private memory: MemoryHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n    ]);\n  }\n}\n"),e.k0s()(),e.j41(430,"pre")(431,"code",33),e.EFF(432,"\n@Controller('health')\n@Dependencies(HealthCheckService, MemoryHealthIndicator)\nexport class HealthController {\n  constructor(health, memory) {}\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n    ])\n  }\n}\n"),e.k0s()()(),e.j41(433,"p"),e.EFF(434,"It is also possible to verify the memory RSS of your process with "),e.j41(435,"code"),e.EFF(436,"MemoryHealthIndicator.checkRSS"),e.k0s(),e.EFF(437,". This example\nwould return an unhealthy response code in case your process does have more than 150MB allocated."),e.k0s(),e.j41(438,"blockquote",29)(439,"strong"),e.EFF(440,"Hint"),e.k0s(),e.EFF(441," RSS is the Resident Set Size and is used to show how much memory is allocated to that process and is in RAM.\nIt does not include memory that is swapped out. It does include memory from shared libraries as long as the pages from\nthose libraries are actually in memory. It does include all stack and heap memory.\n"),e.k0s(),e.j41(442,"app-copy-button",31)(443,"span",32),e.EFF(444),e.nI1(445,"extension"),e.nrm(446,"app-tabs",null,10),e.k0s(),e.j41(448,"pre")(449,"code",33),e.EFF(450,"\n// Within the `HealthController`-class\n\n@Get()\n@HealthCheck()\ncheck() {\n  return this.health.check([\n    () => this.memory.checkRSS('memory_rss', 150 * 1024 * 1024),\n  ]);\n}\n"),e.k0s()()(),e.j41(451,"h4",44)(452,"span"),e.EFF(453,"Custom health indicator"),e.k0s()(),e.j41(454,"p"),e.EFF(455,"In some cases, the predefined health indicators provided by "),e.j41(456,"code"),e.EFF(457,"@nestjs/terminus"),e.k0s(),e.EFF(458," do not cover all of your health check requirements. In that case, you can set up a custom health indicator according to your needs."),e.k0s(),e.j41(459,"p"),e.EFF(460,"Let's get started by creating a service that will represent our custom indicator. To get a basic understanding of how an indicator is structured, we will create an example "),e.j41(461,"code"),e.EFF(462,"DogHealthIndicator"),e.k0s(),e.EFF(463,". This service should have the state "),e.j41(464,"code"),e.EFF(465,"'up'"),e.k0s(),e.EFF(466," if every "),e.j41(467,"code"),e.EFF(468,"Dog"),e.k0s(),e.EFF(469," object has the type "),e.j41(470,"code"),e.EFF(471,"'goodboy'"),e.k0s(),e.EFF(472,". If that condition is not satisfied then it should throw an error."),e.k0s(),e.j41(473,"app-copy-button",31)(474,"span",32),e.EFF(475),e.nI1(476,"extension"),e.nrm(477,"app-tabs",null,11),e.k0s(),e.j41(479,"pre")(480,"code",33),e.EFF(481,"\nimport { Injectable } from '@nestjs/common';\nimport { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';\n\nexport interface Dog {\n  name: string;\n  type: string;\n}\n\n@Injectable()\nexport class DogHealthIndicator extends HealthIndicator {\n  private dogs: Dog[] = [\n    { name: 'Fido', type: 'goodboy' },\n    { name: 'Rex', type: 'badboy' },\n  ];\n\n  async isHealthy(key: string): Promise<HealthIndicatorResult> {\n    const badboys = this.dogs.filter(dog => dog.type === 'badboy');\n    const isHealthy = badboys.length === 0;\n    const result = this.getStatus(key, isHealthy, { badboys: badboys.length });\n\n    if (isHealthy) {\n      return result;\n    }\n    throw new HealthCheckError('Dogcheck failed', result);\n  }\n}\n"),e.k0s()(),e.j41(482,"pre")(483,"code",33),e.EFF(484,"\nimport { Injectable } from '@nestjs/common';\nimport { HealthCheckError } from '@godaddy/terminus';\n\n@Injectable()\nexport class DogHealthIndicator extends HealthIndicator {\n  dogs = [\n    { name: 'Fido', type: 'goodboy' },\n    { name: 'Rex', type: 'badboy' },\n  ];\n\n  async isHealthy(key) {\n    const badboys = this.dogs.filter(dog => dog.type === 'badboy');\n    const isHealthy = badboys.length === 0;\n    const result = this.getStatus(key, isHealthy, { badboys: badboys.length });\n\n    if (isHealthy) {\n      return result;\n    }\n    throw new HealthCheckError('Dogcheck failed', result);\n  }\n}\n"),e.k0s()()(),e.j41(485,"p"),e.EFF(486,"The next thing we need to do is register the health indicator as a provider."),e.k0s(),e.j41(487,"app-copy-button",31)(488,"span",32),e.EFF(489),e.nI1(490,"extension"),e.nrm(491,"app-tabs",null,12),e.k0s(),e.j41(493,"pre")(494,"code",33),e.EFF(495,"\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { DogHealthIndicator } from './dog.health';\n\n@Module({\n  controllers: [HealthController],\n  imports: [TerminusModule],\n  providers: [DogHealthIndicator]\n})\nexport class HealthModule { }\n"),e.k0s()()(),e.j41(496,"blockquote",29)(497,"strong"),e.EFF(498,"Hint"),e.k0s(),e.EFF(499," In a real-world application the "),e.j41(500,"code"),e.EFF(501,"DogHealthIndicator"),e.k0s(),e.EFF(502," should be provided in a separate module, for example, "),e.j41(503,"code"),e.EFF(504,"DogModule"),e.k0s(),e.EFF(505,", which then will be imported by the "),e.j41(506,"code"),e.EFF(507,"HealthModule"),e.k0s(),e.EFF(508,".\n"),e.k0s(),e.j41(509,"p"),e.EFF(510,"The last required step is to add the now available health indicator in the required health check endpoint. For that, we go back to our "),e.j41(511,"code"),e.EFF(512,"HealthController"),e.k0s(),e.EFF(513," and add it to our "),e.j41(514,"code"),e.EFF(515,"check"),e.k0s(),e.EFF(516," function."),e.k0s(),e.j41(517,"app-copy-button",31)(518,"span",32),e.EFF(519),e.nI1(520,"extension"),e.nrm(521,"app-tabs",null,13),e.k0s(),e.j41(523,"pre")(524,"code",33),e.EFF(525,"\nimport { HealthCheckService, HealthCheck } from '@nestjs/terminus';\nimport { Injectable, Dependencies, Get } from '@nestjs/common';\nimport { DogHealthIndicator } from './dog.health';\n\n@Injectable()\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private dogHealthIndicator: DogHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.dogHealthIndicator.isHealthy('dog'),\n    ])\n  }\n}\n"),e.k0s()(),e.j41(526,"pre")(527,"code",33),e.EFF(528,"\nimport { HealthCheckService, HealthCheck } from '@nestjs/terminus';\nimport { Injectable, Get } from '@nestjs/common';\nimport { DogHealthIndicator } from './dog.health';\n\n@Injectable()\n@Dependencies(HealthCheckService, DogHealthIndicator)\nexport class HealthController {\n  constructor(\n    private health,\n    private dogHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.dogHealthIndicator.isHealthy('dog'),\n    ])\n  }\n}\n"),e.k0s()()(),e.j41(529,"h4",45)(530,"span"),e.EFF(531,"Logging"),e.k0s()(),e.j41(532,"p"),e.EFF(533,"Terminus only logs error messages, for instance when a Healthcheck has failed. With the "),e.j41(534,"code"),e.EFF(535,"TerminusModule.forRoot()"),e.k0s(),e.EFF(536," method you have more control over how errors are being logged\nas well as completely take over the logging itself."),e.k0s(),e.j41(537,"p"),e.EFF(538,"In this section, we are going to walk you through how you create a custom logger "),e.j41(539,"code"),e.EFF(540,"TerminusLogger"),e.k0s(),e.EFF(541,". This logger extends the built-in logger.\nTherefore you can pick and choose which part of the logger you would like to overwrite"),e.k0s(),e.j41(542,"blockquote",29)(543,"strong"),e.EFF(544,"Info"),e.k0s(),e.EFF(545," If you want to learn more about custom loggers in NestJS, "),e.j41(546,"a",46),e.EFF(547,"read more here"),e.k0s(),e.EFF(548,".\n"),e.k0s(),e.j41(549,"app-copy-button",31)(550,"span",32),e.EFF(551),e.nI1(552,"extension"),e.nrm(553,"app-tabs",null,14),e.k0s(),e.j41(555,"pre")(556,"code",33),e.EFF(557,"\nimport { Injectable, Scope, ConsoleLogger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class TerminusLogger extends ConsoleLogger {\n  error(message: any, stack?: string, context?: string): void;\n  error(message: any, ...optionalParams: any[]): void;\n  error(\n    message: unknown,\n    stack?: unknown,\n    context?: unknown,\n    ...rest: unknown[]\n  ): void {\n    // Overwrite here how error messages should be logged\n  }\n}\n"),e.k0s()()(),e.j41(558,"p"),e.EFF(559,"Once you have created your custom logger, all you need to do is simply pass it into the "),e.j41(560,"code"),e.EFF(561,"TerminusModule.forRoot()"),e.k0s(),e.EFF(562," as such."),e.k0s(),e.j41(563,"app-copy-button",31)(564,"span",32),e.EFF(565),e.nI1(566,"extension"),e.nrm(567,"app-tabs",null,15),e.k0s(),e.j41(569,"pre")(570,"code",33),e.EFF(571,"\n@Module({\nimports: [\n  TerminusModule.forRoot({\n    logger: TerminusLogger,\n  }),\n],\n})\nexport class HealthModule {}\n"),e.k0s()()(),e.j41(572,"p"),e.EFF(573,"To completely suppress any log messages coming from Terminus, including error messages, configure Terminus as such."),e.k0s(),e.j41(574,"app-copy-button",31)(575,"span",32),e.EFF(576),e.nI1(577,"extension"),e.nrm(578,"app-tabs",null,16),e.k0s(),e.j41(580,"pre")(581,"code",33),e.EFF(582,"\n@Module({\nimports: [\n  TerminusModule.forRoot({\n    logger: false,\n  }),\n],\n})\nexport class HealthModule {}\n"),e.k0s()()(),e.j41(583,"p"),e.EFF(584,"Terminus allows you to configure how Healthcheck errors should be displayed in your logs."),e.k0s(),e.j41(585,"table")(586,"thead")(587,"tr")(588,"th",47),e.EFF(589,"Error Log Style"),e.k0s(),e.j41(590,"th",47),e.EFF(591,"Description"),e.k0s(),e.j41(592,"th",47),e.EFF(593,"Example"),e.k0s()()(),e.j41(594,"tbody")(595,"tr")(596,"td",47)(597,"code"),e.EFF(598,"json"),e.k0s(),e.EFF(599," (default)"),e.k0s(),e.j41(600,"td",47),e.EFF(601,"Prints a summary of the health check result in case of an error as JSON object"),e.k0s(),e.j41(602,"td",47)(603,"figure"),e.nrm(604,"img",48),e.k0s()()(),e.j41(605,"tr")(606,"td",47)(607,"code"),e.EFF(608,"pretty"),e.k0s()(),e.j41(609,"td",47),e.EFF(610,"Prints a summary of the health check result in case of an error within formatted boxes and highlights successful/erroneous results"),e.k0s(),e.j41(611,"td",47)(612,"figure"),e.nrm(613,"img",49),e.k0s()()()()(),e.j41(614,"p"),e.EFF(615,"You can change the log style using the "),e.j41(616,"code"),e.EFF(617,"errorLogStyle"),e.k0s(),e.EFF(618," configuration option as in the following snippet."),e.k0s(),e.j41(619,"app-copy-button",31)(620,"span",32),e.EFF(621),e.nI1(622,"extension"),e.nrm(623,"app-tabs",null,17),e.k0s(),e.j41(625,"pre")(626,"code",33),e.EFF(627,"\n@Module({\n  imports: [\n    TerminusModule.forRoot({\n      errorLogStyle: 'pretty',\n    }),\n  ]\n})\nexport class HealthModule {}\n"),e.k0s()()(),e.j41(628,"h4",50)(629,"span"),e.EFF(630,"Graceful shutdown timeout"),e.k0s()(),e.j41(631,"p"),e.EFF(632,"If your application requires postponing its shutdown process, Terminus can handle it for you.\nThis setting can prove particularly beneficial when working with an orchestrator such as Kubernetes.\nBy setting a delay slightly longer than the readiness check interval, you can achieve zero downtime when shutting down containers."),e.k0s(),e.j41(633,"app-copy-button",31)(634,"span",32),e.EFF(635),e.nI1(636,"extension"),e.nrm(637,"app-tabs",null,18),e.k0s(),e.j41(639,"pre")(640,"code",33),e.EFF(641,"\n@Module({\n  imports: [\n    TerminusModule.forRoot({\n      gracefulShutdownTimeoutMs: 1000,\n    }),\n  ]\n})\nexport class HealthModule {}\n"),e.k0s()()(),e.j41(642,"h4",51)(643,"span"),e.EFF(644,"More examples"),e.k0s()(),e.j41(645,"p"),e.EFF(646,"More working examples are available "),e.j41(647,"a",52),e.EFF(648,"here"),e.k0s(),e.EFF(649,"."),e.k0s()()),2&s){const a=e.sdS(109),i=e.sdS(163),c=e.sdS(175),p=e.sdS(284),r=e.sdS(314),u=e.sdS(348),h=e.sdS(377),E=e.sdS(397),k=e.sdS(426),v=e.sdS(447),b=e.sdS(478),w=e.sdS(492),y=e.sdS(522),S=e.sdS(554),x=e.sdS(568),A=e.sdS(579),X=e.sdS(624),Z=e.sdS(638);e.R7$(106),e.SpI(" ",e.i5U(107,46,"health.module",a.isJsActive),"\n"),e.R7$(54),e.SpI(" ",e.i5U(161,49,"health.controller",i.isJsActive),"\n"),e.R7$(4),e.AVh("hide",i.isJsActive),e.R7$(3),e.AVh("hide",!i.isJsActive),e.R7$(5),e.SpI(" ",e.i5U(173,52,"health.module",c.isJsActive),"\n"),e.R7$(4),e.AVh("hide",c.isJsActive),e.R7$(3),e.AVh("hide",!c.isJsActive),e.R7$(102),e.SpI(" ",e.i5U(282,55,"health.controller",p.isJsActive),"\n"),e.R7$(30),e.SpI(" ",e.i5U(312,58,"health.controller",r.isJsActive),"\n"),e.R7$(4),e.AVh("hide",r.isJsActive),e.R7$(3),e.AVh("hide",!r.isJsActive),e.R7$(27),e.SpI(" ",e.i5U(346,61,"health.controller",u.isJsActive),"\n"),e.R7$(29),e.SpI(" ",e.i5U(375,64,"health.controller",h.isJsActive),"\n"),e.R7$(4),e.AVh("hide",h.isJsActive),e.R7$(3),e.AVh("hide",!h.isJsActive),e.R7$(13),e.SpI(" ",e.i5U(395,67,"health.controller",E.isJsActive),"\n"),e.R7$(29),e.SpI(" ",e.i5U(424,70,"health.controller",k.isJsActive),"\n"),e.R7$(4),e.AVh("hide",k.isJsActive),e.R7$(3),e.AVh("hide",!k.isJsActive),e.R7$(14),e.SpI(" ",e.i5U(445,73,"health.controller",v.isJsActive),"\n"),e.R7$(31),e.SpI(" ",e.i5U(476,76,"dog.health",b.isJsActive),"\n"),e.R7$(4),e.AVh("hide",b.isJsActive),e.R7$(3),e.AVh("hide",!b.isJsActive),e.R7$(7),e.SpI(" ",e.i5U(490,79,"health.module",w.isJsActive),"\n"),e.R7$(30),e.SpI(" ",e.i5U(520,82,"health.controller",y.isJsActive),"\n"),e.R7$(4),e.AVh("hide",y.isJsActive),e.R7$(3),e.AVh("hide",!y.isJsActive),e.R7$(25),e.SpI(" ",e.i5U(552,85,"terminus-logger.service",S.isJsActive),"\n"),e.R7$(14),e.SpI(" ",e.i5U(566,88,"health.module",x.isJsActive),"\n"),e.R7$(11),e.SpI(" ",e.i5U(577,91,"health.module",A.isJsActive),"\n"),e.R7$(45),e.SpI(" ",e.i5U(622,94,"health.module",X.isJsActive),"\n"),e.R7$(14),e.SpI(" ",e.i5U(636,97,"health.module",Z.isJsActive),"\n")}},dependencies:[g.O,d.a,F.z,j.Wk,f.M],encapsulation:2,changeDetection:0})}return t})(),_=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-router-module"]],features:[e.Vt3],decls:86,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/router-module.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","router-module"],[1,"info"],["href","/controllers#routing"],["routerLink","/faq/global-prefix"],["routerLink","/techniques/versioning"],[1,"language-typescript"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Router module"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Hint"),e.k0s(),e.EFF(10," This chapter is only relevant to HTTP-based applications.\n"),e.k0s(),e.j41(11,"p"),e.EFF(12,"In an HTTP application (for example, REST API), the route path for a handler is determined by concatenating the (optional) prefix declared for the controller (inside the "),e.j41(13,"code"),e.EFF(14,"@Controller"),e.k0s(),e.EFF(15," decorator),\nand any path specified in the method's decorator (e.g, "),e.j41(16,"code"),e.EFF(17,"@Get('users')"),e.k0s(),e.EFF(18,"). You can learn more about that in "),e.j41(19,"a",7),e.EFF(20,"this section"),e.k0s(),e.EFF(21,". Additionally,\nyou can define a "),e.j41(22,"a",8),e.EFF(23,"global prefix"),e.k0s(),e.EFF(24," for all routes registered in your application, or enable "),e.j41(25,"a",9),e.EFF(26,"versioning"),e.k0s(),e.EFF(27,"."),e.k0s(),e.j41(28,"p"),e.EFF(29,'Also, there are edge-cases when defining a prefix at a module-level (and so for all controllers registered inside that module) may come in handy.\nFor example, imagine a REST application that exposes several different endpoints being used by a specific portion of your application called "Dashboard".\nIn such a case, instead of repeating the '),e.j41(30,"code"),e.EFF(31,"/dashboard"),e.k0s(),e.EFF(32," prefix within each controller, you could use a utility "),e.j41(33,"code"),e.EFF(34,"RouterModule"),e.k0s(),e.EFF(35," module, as follows:"),e.k0s(),e.j41(36,"app-copy-button")(37,"pre")(38,"code",10),e.EFF(39,"\n@Module({\n  imports: [\n    DashboardModule,\n    RouterModule.register([\n      {\n        path: 'dashboard',\n        module: DashboardModule,\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(40,"blockquote",6)(41,"strong"),e.EFF(42,"Hint"),e.k0s(),e.EFF(43," The "),e.j41(44,"code"),e.EFF(45,"RouterModule"),e.k0s(),e.EFF(46," class is exported from the "),e.j41(47,"code"),e.EFF(48,"@nestjs/core"),e.k0s(),e.EFF(49," package.\n"),e.k0s(),e.j41(50,"p"),e.EFF(51,"In addition, you can define hierarchical structures. This means each module can have "),e.j41(52,"code"),e.EFF(53,"children"),e.k0s(),e.EFF(54," modules.\nThe children modules will inherit their parent's prefix. In the following example, we'll register the "),e.j41(55,"code"),e.EFF(56,"AdminModule"),e.k0s(),e.EFF(57," as a parent module of "),e.j41(58,"code"),e.EFF(59,"DashboardModule"),e.k0s(),e.EFF(60," and "),e.j41(61,"code"),e.EFF(62,"MetricsModule"),e.k0s(),e.EFF(63,"."),e.k0s(),e.j41(64,"app-copy-button")(65,"pre")(66,"code",10),e.EFF(67,"\n@Module({\n  imports: [\n    AdminModule,\n    DashboardModule,\n    MetricsModule,\n    RouterModule.register([\n      {\n        path: 'admin',\n        module: AdminModule,\n        children: [\n          {\n            path: 'dashboard',\n            module: DashboardModule,\n          },\n          {\n            path: 'metrics',\n            module: MetricsModule,\n          },\n        ],\n      },\n    ])\n  ],\n});\n"),e.k0s()()(),e.j41(68,"blockquote",6)(69,"strong"),e.EFF(70,"Hint"),e.k0s(),e.EFF(71," This feature should be used very carefully, as overusing it can make code difficult to maintain over time.\n"),e.k0s(),e.j41(72,"p"),e.EFF(73,"In the example above, any controller registered inside the "),e.j41(74,"code"),e.EFF(75,"DashboardModule"),e.k0s(),e.EFF(76," will have an extra "),e.j41(77,"code"),e.EFF(78,"/admin/dashboard"),e.k0s(),e.EFF(79," prefix (as the module concatenates paths from top to bottom - recursively - parent to children).\nLikewise, each controller defined inside the "),e.j41(80,"code"),e.EFF(81,"MetricsModule"),e.k0s(),e.EFF(82," will have an additional module-level prefix "),e.j41(83,"code"),e.EFF(84,"/admin/metrics"),e.k0s(),e.EFF(85,"."),e.k0s()())},dependencies:[F.z,j.Wk],encapsulation:2,changeDetection:0})}return t})(),W=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-nest-commander"]],features:[e.Vt3],decls:222,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/nest-commander.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","nest-commander"],["routerLink","/standalone-applications"],["rel","nofollow","target","_blank","href","https://jmcdo29.github.io/nest-commander"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/jmcdo29/nest-commander/issues/new/choose"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","a-command-file"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/docs/handbook/decorators.html"],["appAnchor","","id","running-the-command"],[1,"language-ts"],["appAnchor","","id","testing"],["appAnchor","","id","putting-it-all-together"],["appAnchor","","id","more-information"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Nest Commander"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Expanding on the "),e.j41(9,"a",6),e.EFF(10,"standalone application"),e.k0s(),e.EFF(11," docs there's also the "),e.j41(12,"a",7),e.EFF(13,"nest-commander"),e.k0s(),e.EFF(14," package for writing command line applications in a structure similar to your typical Nest application."),e.k0s(),e.j41(15,"blockquote",8)(16,"strong"),e.EFF(17,"info"),e.k0s(),e.j41(18,"code"),e.EFF(19,"nest-commander"),e.k0s(),e.EFF(20," is a third party package and is not managed by the entirety of the NestJS core team. Please, report any issues found with the library in the "),e.j41(21,"a",9),e.EFF(22,"appropriate repository"),e.k0s()(),e.j41(23,"h4",10)(24,"span"),e.EFF(25,"Installation"),e.k0s()(),e.j41(26,"p"),e.EFF(27,"Just like any other package, you've got to install it before you can use it."),e.k0s(),e.j41(28,"pre")(29,"code",11),e.EFF(30,"\n$ npm i nest-commander\n"),e.k0s()(),e.j41(31,"h4",12)(32,"span"),e.EFF(33,"A Command file"),e.k0s()(),e.j41(34,"p")(35,"code"),e.EFF(36,"nest-commander"),e.k0s(),e.EFF(37," makes it easy to write new command-line applications with "),e.j41(38,"a",13),e.EFF(39,"decorators"),e.k0s(),e.EFF(40," via the "),e.j41(41,"code"),e.EFF(42,"@Command()"),e.k0s(),e.EFF(43," decorator for classes and the "),e.j41(44,"code"),e.EFF(45,"@Option()"),e.k0s(),e.EFF(46," decorator for methods of that class. Every command file should implement the "),e.j41(47,"code"),e.EFF(48,"CommandRunner"),e.k0s(),e.EFF(49," abstract class and should be decorated with a "),e.j41(50,"code"),e.EFF(51,"@Command()"),e.k0s(),e.EFF(52," decorator."),e.k0s(),e.j41(53,"p"),e.EFF(54,"Every command is seen as an "),e.j41(55,"code"),e.EFF(56,"@Injectable()"),e.k0s(),e.EFF(57," by Nest, so your normal Dependency Injection still works as you would expect it to. The only thing to take note of is the abstract class "),e.j41(58,"code"),e.EFF(59,"CommandRunner"),e.k0s(),e.EFF(60,", which should be implemented by each command. The "),e.j41(61,"code"),e.EFF(62,"CommandRunner"),e.k0s(),e.EFF(63," abstract class ensures that all commands have a "),e.j41(64,"code"),e.EFF(65,"run"),e.k0s(),e.EFF(66," method that returns a "),e.j41(67,"code"),e.EFF(68,"Promise<void>"),e.k0s(),e.EFF(69," and takes in the parameters "),e.j41(70,"code"),e.EFF(71,"string[], Record<string, any>"),e.k0s(),e.EFF(72,". The "),e.j41(73,"code"),e.EFF(74,"run"),e.k0s(),e.EFF(75," command is where you can kick all of your logic off from, it will take in whatever parameters did not match option flags and pass them in as an array, just in case you are really meaning to work with multiple parameters. As for the options, the "),e.j41(76,"code"),e.EFF(77,"Record<string, any>"),e.k0s(),e.EFF(78,", the names of these properties match the "),e.j41(79,"code"),e.EFF(80,"name"),e.k0s(),e.EFF(81," property given to the "),e.j41(82,"code"),e.EFF(83,"@Option()"),e.k0s(),e.EFF(84," decorators, while their value matches the return of the option handler. If you'd like better type safety, you are welcome to create an interface for your options as well."),e.k0s(),e.j41(85,"h4",14)(86,"span"),e.EFF(87,"Running the Command"),e.k0s()(),e.j41(88,"p"),e.EFF(89,"Similar to how in a NestJS application we can use the "),e.j41(90,"code"),e.EFF(91,"NestFactory"),e.k0s(),e.EFF(92," to create a server for us, and run it using "),e.j41(93,"code"),e.EFF(94,"listen"),e.k0s(),e.EFF(95,", the "),e.j41(96,"code"),e.EFF(97,"nest-commander"),e.k0s(),e.EFF(98," package exposes a simple to use API to run your server. Import the "),e.j41(99,"code"),e.EFF(100,"CommandFactory"),e.k0s(),e.EFF(101," and use the "),e.j41(102,"code"),e.EFF(103,"static"),e.k0s(),e.EFF(104," method "),e.j41(105,"code"),e.EFF(106,"run"),e.k0s(),e.EFF(107," and pass in the root module of your application. This would probably look like below"),e.k0s(),e.j41(108,"app-copy-button")(109,"pre")(110,"code",15),e.EFF(111,"\nimport { CommandFactory } from 'nest-commander';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  await CommandFactory.run(AppModule);\n}\n\nbootstrap();\n"),e.k0s()()(),e.j41(112,"p"),e.EFF(113,"By default, Nest's logger is disabled when using the "),e.j41(114,"code"),e.EFF(115,"CommandFactory"),e.k0s(),e.EFF(116,". It's possible to provide it though, as the second argument to the "),e.j41(117,"code"),e.EFF(118,"run"),e.k0s(),e.EFF(119," function. You can either provide a custom NestJS logger, or an array of log levels you want to keep - it might be useful to at least provide "),e.j41(120,"code"),e.EFF(121,"['error']"),e.k0s(),e.EFF(122," here, if you only want to print out Nest's error logs."),e.k0s(),e.j41(123,"app-copy-button")(124,"pre")(125,"code",15),e.EFF(126,"\nimport { CommandFactory } from 'nest-commander';\nimport { AppModule } from './app.module';\nimport { LogService } './log.service';\n\nasync function bootstrap() {\n  await CommandFactory.run(AppModule, new LogService());\n\n  // or, if you only want to print Nest's warnings and errors\n  await CommandFactory.run(AppModule, ['warn', 'error']);\n}\n\nbootstrap();\n"),e.k0s()()(),e.j41(127,"p"),e.EFF(128,"And that's it. Under the hood, "),e.j41(129,"code"),e.EFF(130,"CommandFactory"),e.k0s(),e.EFF(131," will worry about calling "),e.j41(132,"code"),e.EFF(133,"NestFactory"),e.k0s(),e.EFF(134," for you and calling "),e.j41(135,"code"),e.EFF(136,"app.close()"),e.k0s(),e.EFF(137," when necessary, so you shouldn't need to worry about memory leaks there. If you need to add in some error handling, there's always "),e.j41(138,"code"),e.EFF(139,"try/catch"),e.k0s(),e.EFF(140," wrapping the "),e.j41(141,"code"),e.EFF(142,"run"),e.k0s(),e.EFF(143," command, or you can chain on some "),e.j41(144,"code"),e.EFF(145,".catch()"),e.k0s(),e.EFF(146," method to the "),e.j41(147,"code"),e.EFF(148,"bootstrap()"),e.k0s(),e.EFF(149," call."),e.k0s(),e.j41(150,"h4",16)(151,"span"),e.EFF(152,"Testing"),e.k0s()(),e.j41(153,"p"),e.EFF(154,"So what's the use of writing a super awesome command line script if you can't test it super easily, right? Fortunately, "),e.j41(155,"code"),e.EFF(156,"nest-commander"),e.k0s(),e.EFF(157," has some utilities you can make use of that fits in perfectly with the NestJS ecosystem, it'll feel right at home to any Nestlings out there. Instead of using the "),e.j41(158,"code"),e.EFF(159,"CommandFactory"),e.k0s(),e.EFF(160," for building the command in test mode, you can use "),e.j41(161,"code"),e.EFF(162,"CommandTestFactory"),e.k0s(),e.EFF(163," and pass in your metadata, very similarly to how "),e.j41(164,"code"),e.EFF(165,"Test.createTestingModule"),e.k0s(),e.EFF(166," from "),e.j41(167,"code"),e.EFF(168,"@nestjs/testing"),e.k0s(),e.EFF(169," works. In fact, it uses this package under the hood. You're also still able to chain on the "),e.j41(170,"code"),e.EFF(171,"overrideProvider"),e.k0s(),e.EFF(172," methods before calling "),e.j41(173,"code"),e.EFF(174,"compile()"),e.k0s(),e.EFF(175," so you can swap out DI pieces right in the test."),e.k0s(),e.j41(176,"h4",17)(177,"span"),e.EFF(178,"Putting it all together"),e.k0s()(),e.j41(179,"p"),e.EFF(180,"The following class would equate to having a CLI command that can take in the subcommand "),e.j41(181,"code"),e.EFF(182,"basic"),e.k0s(),e.EFF(183," or be called directly, with "),e.j41(184,"code"),e.EFF(185,"-n"),e.k0s(),e.EFF(186,", "),e.j41(187,"code"),e.EFF(188,"-s"),e.k0s(),e.EFF(189,", and "),e.j41(190,"code"),e.EFF(191,"-b"),e.k0s(),e.EFF(192," (along with their long flags) all being supported and with custom parsers for each option. The "),e.j41(193,"code"),e.EFF(194,"--help"),e.k0s(),e.EFF(195," flag is also supported, as is customary with commander."),e.k0s(),e.j41(196,"app-copy-button")(197,"pre")(198,"code",15),e.EFF(199,"\nimport { Command, CommandRunner, Option } from 'nest-commander';\nimport { LogService } from './log.service';\n\ninterface BasicCommandOptions {\n  string?: string;\n  boolean?: boolean;\n  number?: number;\n}\n\n@Command({ name: 'basic', description: 'A parameter parse' })\nexport class BasicCommand extends CommandRunner {\n  constructor(private readonly logService: LogService) {\n    super()\n  }\n\n  async run(\n    passedParam: string[],\n    options?: BasicCommandOptions,\n  ): Promise<void> {\n    if (options?.boolean !== undefined && options?.boolean !== null) {\n      this.runWithBoolean(passedParam, options.boolean);\n    } else if (options?.number) {\n      this.runWithNumber(passedParam, options.number);\n    } else if (options?.string) {\n      this.runWithString(passedParam, options.string);\n    } else {\n      this.runWithNone(passedParam);\n    }\n  }\n\n  @Option({\n    flags: '-n, --number [number]',\n    description: 'A basic number parser',\n  })\n  parseNumber(val: string): number {\n    return Number(val);\n  }\n\n  @Option({\n    flags: '-s, --string [string]',\n    description: 'A string return',\n  })\n  parseString(val: string): string {\n    return val;\n  }\n\n  @Option({\n    flags: '-b, --boolean [boolean]',\n    description: 'A boolean parser',\n  })\n  parseBoolean(val: string): boolean {\n    return JSON.parse(val);\n  }\n\n  runWithString(param: string[], option: string): void {\n    this.logService.log({ param, string: option });\n  }\n\n  runWithNumber(param: string[], option: number): void {\n    this.logService.log({ param, number: option });\n  }\n\n  runWithBoolean(param: string[], option: boolean): void {\n    this.logService.log({ param, boolean: option });\n  }\n\n  runWithNone(param: string[]): void {\n    this.logService.log({ param });\n  }\n}\n"),e.k0s()()(),e.j41(200,"p"),e.EFF(201,"Make sure the command class is added to a module"),e.k0s(),e.j41(202,"app-copy-button")(203,"pre")(204,"code",15),e.EFF(205,"\n@Module({\n  providers: [LogService, BasicCommand],\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(206,"p"),e.EFF(207,"And now to be able to run the CLI in your main.ts you can do the following"),e.k0s(),e.j41(208,"app-copy-button")(209,"pre")(210,"code",15),e.EFF(211,"\nasync function bootstrap() {\n  await CommandFactory.run(AppModule);\n}\n\nbootstrap();\n"),e.k0s()()(),e.j41(212,"p"),e.EFF(213,"And just like that, you've got a command line application."),e.k0s(),e.j41(214,"h4",18)(215,"span"),e.EFF(216,"More Information"),e.k0s()(),e.j41(217,"p"),e.EFF(218,"Visit the "),e.j41(219,"a",7),e.EFF(220,"nest-commander docs site"),e.k0s(),e.EFF(221," for more information, examples, and API documentation."),e.k0s()())},dependencies:[d.a,F.z,j.Wk],encapsulation:2,changeDetection:0})}return t})(),G=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-async-local-storage"]],features:[e.Vt3],decls:274,vars:32,consts:[["contentReference",""],["app64896fefbfc056f2a1cbfe7f7f7de16005812f96",""],["appe362c5e2bf5f471948ccfe4c0a8abffdd5a58aa2",""],["app0e1269415fcdcbc6f3133de59f2f93ecfa3a89b2",""],["app4ee6c54503d1543c09709e4ea479ed1ef151aa2b",""],["app82bcd7746866f0e4e6548d734a2c0a899222efe4",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/async-local-storage.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","async-local-storage"],["rel","nofollow","target","_blank","href","https://nodejs.org/api/async_context.html#async_context_class_asynclocalstorage"],["appAnchor","","id","custom-implementation"],[1,"info"],["href","recipes/async-local-storage#nestjs-cls"],[1,"with-heading"],[1,"filename"],[1,"language-ts"],["start","2"],[1,"language-typescript"],["start","3"],["start","4"],[1,"warning"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/God_object"],["id","nestjs-cls"],["rel","nofollow","target","_blank","href","https://github.com/Papooch/nestjs-cls"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/nestjs-cls#proxy-providers"],["rel","nofollow","target","_blank","href","https://github.com/Papooch/nestjs-cls/issues"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","usage"],["href","recipes/async-local-storage#custom-implementation"],["appAnchor","","id","testing"],["appAnchor","","id","more-information"]],template:function(s,o){if(1&s&&(e.j41(0,"div",6,0)(2,"div",7)(3,"a",8),e.nrm(4,"i",9),e.k0s()(),e.j41(5,"h3",10),e.EFF(6,"Async Local Storage"),e.k0s(),e.j41(7,"p")(8,"code"),e.EFF(9,"AsyncLocalStorage"),e.k0s(),e.EFF(10," is a "),e.j41(11,"a",11),e.EFF(12,"Node.js API"),e.k0s(),e.EFF(13," (based on the "),e.j41(14,"code"),e.EFF(15,"async_hooks"),e.k0s(),e.EFF(16," API) that provides an alternative way of propagating local state through the application without the need to explicitly pass it as a function parameter. It is similar to a thread-local storage in other languages."),e.k0s(),e.j41(17,"p"),e.EFF(18,"The main idea of Async Local Storage is that we can "),e.j41(19,"em"),e.EFF(20,"wrap"),e.k0s(),e.EFF(21," some function call with the "),e.j41(22,"code"),e.EFF(23,"AsyncLocalStorage#run"),e.k0s(),e.EFF(24," call. All code that is invoked within the wrapped call gets access to the same "),e.j41(25,"code"),e.EFF(26,"store"),e.k0s(),e.EFF(27,", which will be unique to each call chain."),e.k0s(),e.j41(28,"p"),e.EFF(29,"In the context of NestJS, that means if we can find a place within the request's lifecycle where we can wrap the rest of the request's code, we will be able to access and modify state visible only to that request, which may serve as an alternative to REQUEST-scoped providers and some of their limitations."),e.k0s(),e.j41(30,"p"),e.EFF(31,"Alternatively, we can use ALS to propagate context for only a part of the system (for example the "),e.j41(32,"em"),e.EFF(33,"transaction"),e.k0s(),e.EFF(34," object) without passing it around explicitly across services, which can increase isolation and encapsulation."),e.k0s(),e.j41(35,"h4",12)(36,"span"),e.EFF(37,"Custom implementation"),e.k0s()(),e.j41(38,"p"),e.EFF(39,"NestJS itself does not provide any built-in abstraction for "),e.j41(40,"code"),e.EFF(41,"AsyncLocalStorage"),e.k0s(),e.EFF(42,", so let's walk through how we could implement it ourselves for the simplest HTTP case to get a better understanding of the whole concept:"),e.k0s(),e.j41(43,"blockquote",13)(44,"strong"),e.EFF(45,"info"),e.k0s(),e.EFF(46," For a ready-made "),e.j41(47,"a",14),e.EFF(48,"dedicated package"),e.k0s(),e.EFF(49,", continue reading below.\n"),e.k0s(),e.j41(50,"ol")(51,"li"),e.EFF(52,"First, create a new instance of the "),e.j41(53,"code"),e.EFF(54,"AsyncLocalStorage"),e.k0s(),e.EFF(55," in some shared source file. Since we're using NestJS, let's also turn it into a module with a custom provider."),e.k0s()(),e.j41(56,"app-copy-button",15)(57,"span",16),e.EFF(58),e.nI1(59,"extension"),e.nrm(60,"app-tabs",null,1),e.k0s(),e.j41(62,"pre")(63,"code",17),e.EFF(64,"\n@Module({\n  providers: [\n    {\n      provide: AsyncLocalStorage,\n      useValue: new AsyncLocalStorage(),\n    },\n  ],\n  exports: [AsyncLocalStorage],\n})\nexport class AlsModule {}\n"),e.k0s()()(),e.j41(65,"blockquote",13)(66,"strong"),e.EFF(67,"Hint"),e.k0s(),e.j41(68,"code"),e.EFF(69,"AsyncLocalStorage"),e.k0s(),e.EFF(70," is imported from "),e.j41(71,"code"),e.EFF(72,"async_hooks"),e.k0s(),e.EFF(73,".\n"),e.k0s(),e.j41(74,"ol",18)(75,"li"),e.EFF(76,"We're only concerned with HTTP, so let's use a middleware to wrap the "),e.j41(77,"code"),e.EFF(78,"next"),e.k0s(),e.EFF(79," function with "),e.j41(80,"code"),e.EFF(81,"AsyncLocalStorage#run"),e.k0s(),e.EFF(82,". Since a middleware is the first thing that the request hits, this will make the "),e.j41(83,"code"),e.EFF(84,"store"),e.k0s(),e.EFF(85," available in all enhancers and the rest of the system."),e.k0s()(),e.j41(86,"app-copy-button",15)(87,"span",16),e.EFF(88),e.nI1(89,"extension"),e.nrm(90,"app-tabs",null,2),e.k0s(),e.j41(92,"pre")(93,"code",19),e.EFF(94,"\n@Module({\n  imports: [AlsModule]\n  providers: [CatService],\n  controllers: [CatController],\n})\nexport class AppModule implements NestModule {\n  constructor(\n    // inject the AsyncLocalStorage in the module constructor,\n    private readonly als: AsyncLocalStorage\n  ) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    // bind the middleware,\n    consumer\n      .apply((req, res, next) => {\n        // populate the store with some default values\n        // based on the request,\n        const store = {\n          userId: req.headers['x-user-id'],\n        };\n        // and pass the \"next\" function as callback\n        // to the \"als.run\" method together with the store.\n        this.als.run(store, () => next());\n      })\n      // and register it for all routes (in case of Fastify use '(.*)')\n      .forRoutes('*');\n  }\n}\n"),e.k0s()(),e.j41(95,"pre")(96,"code",19),e.EFF(97,"\n@Module({\n  imports: [AlsModule]\n  providers: [CatService],\n  controllers: [CatController],\n})\n@Dependencies(AsyncLocalStorage)\nexport class AppModule {\n  constructor(als) {\n    // inject the AsyncLocalStorage in the module constructor,\n    this.als = als\n  }\n\n  configure(consumer) {\n    // bind the middleware,\n    consumer\n      .apply((req, res, next) => {\n        // populate the store with some default values\n        // based on the request,\n        const store = {\n          userId: req.headers['x-user-id'],\n        };\n        // and pass the \"next\" function as callback\n        // to the \"als.run\" method together with the store.\n        this.als.run(store, () => next());\n      })\n      // and register it for all routes (in case of Fastify use '(.*)')\n      .forRoutes('*');\n  }\n}\n"),e.k0s()()(),e.j41(98,"ol",20)(99,"li"),e.EFF(100,"Now, anywhere within the lifecycle of a request, we can access the local store instance."),e.k0s()(),e.j41(101,"app-copy-button",15)(102,"span",16),e.EFF(103),e.nI1(104,"extension"),e.nrm(105,"app-tabs",null,3),e.k0s(),e.j41(107,"pre")(108,"code",19),e.EFF(109,'\n@Injectable()\nexport class CatService {\n  constructor(\n    // We can inject the provided ALS instance.\n    private readonly als: AsyncLocalStorage,\n    private readonly catRepository: CatRepository,\n  ) {}\n\n  getCatForUser() {\n    // The "getStore" method will always return the\n    // store instance associated with the given request.\n    const userId = this.als.getStore()["userId"] as number;\n    return this.catRepository.getForUser(userId);\n  }\n}\n'),e.k0s()(),e.j41(110,"pre")(111,"code",19),e.EFF(112,'\n@Injectable()\n@Dependencies(AsyncLocalStorage, CatRepository)\nexport class CatService {\n  constructor(als, catRepository) {\n    // We can inject the provided ALS instance.\n    this.als = als\n    this.catRepository = catRepository\n  }\n\n  getCatForUser() {\n    // The "getStore" method will always return the\n    // store instance associated with the given request.\n    const userId = this.als.getStore()["userId"] as number;\n    return this.catRepository.getForUser(userId);\n  }\n}\n'),e.k0s()()(),e.j41(113,"ol",21)(114,"li"),e.EFF(115,"That's it. Now we have a way to share request related state without needing to inject the whole "),e.j41(116,"code"),e.EFF(117,"REQUEST"),e.k0s(),e.EFF(118," object."),e.k0s()(),e.j41(119,"blockquote",22)(120,"strong"),e.EFF(121,"warning"),e.k0s(),e.EFF(122,' Please be aware that while the technique is useful for many use-cases, it inherently obfuscates the code flow (creating implicit context), so use it responsibly and especially avoid creating contextual "'),e.j41(123,"a",23),e.EFF(124,"God objects"),e.k0s(),e.EFF(125,'".\n'),e.k0s(),e.j41(126,"h3",24),e.EFF(127,"NestJS CLS"),e.k0s(),e.j41(128,"p"),e.EFF(129,"The "),e.j41(130,"a",25),e.EFF(131,"nestjs-cls"),e.k0s(),e.EFF(132," package provides several DX improvements over using plain "),e.j41(133,"code"),e.EFF(134,"AsyncLocalStorage"),e.k0s(),e.EFF(135," ("),e.j41(136,"code"),e.EFF(137,"CLS"),e.k0s(),e.EFF(138," is an abbreviation of the term "),e.j41(139,"em"),e.EFF(140,"continuation-local storage"),e.k0s(),e.EFF(141,"). It abstracts the implementation into a "),e.j41(142,"code"),e.EFF(143,"ClsModule"),e.k0s(),e.EFF(144," that offers various ways of initializing the "),e.j41(145,"code"),e.EFF(146,"store"),e.k0s(),e.EFF(147," for different transports (not only HTTP), as well as a strong-typing support."),e.k0s(),e.j41(148,"p"),e.EFF(149,"The store can then be accessed with an injectable "),e.j41(150,"code"),e.EFF(151,"ClsService"),e.k0s(),e.EFF(152,", or entirely abstracted away from the business logic by using "),e.j41(153,"a",26),e.EFF(154,"Proxy Providers"),e.k0s(),e.EFF(155,"."),e.k0s(),e.j41(156,"blockquote",13)(157,"strong"),e.EFF(158,"info"),e.k0s(),e.j41(159,"code"),e.EFF(160,"nestjs-cls"),e.k0s(),e.EFF(161," is a third party package and is not managed by the NestJS core team. Please, report any issues found with the library in the "),e.j41(162,"a",27),e.EFF(163,"appropriate repository"),e.k0s(),e.EFF(164,".\n"),e.k0s(),e.j41(165,"h4",28)(166,"span"),e.EFF(167,"Installation"),e.k0s()(),e.j41(168,"p"),e.EFF(169,"Apart from a peer dependency on the "),e.j41(170,"code"),e.EFF(171,"@nestjs"),e.k0s(),e.EFF(172," libs, it only uses the built-in Node.js API. Install it as any other package."),e.k0s(),e.j41(173,"pre")(174,"code",29),e.EFF(175,"\nnpm i nestjs-cls\n"),e.k0s()(),e.j41(176,"h4",30)(177,"span"),e.EFF(178,"Usage"),e.k0s()(),e.j41(179,"p"),e.EFF(180,"A similar functionality as described "),e.j41(181,"a",31),e.EFF(182,"above"),e.k0s(),e.EFF(183," can be implemented using "),e.j41(184,"code"),e.EFF(185,"nestjs-cls"),e.k0s(),e.EFF(186," as follows:"),e.k0s(),e.j41(187,"ol")(188,"li"),e.EFF(189,"Import the "),e.j41(190,"code"),e.EFF(191,"ClsModule"),e.k0s(),e.EFF(192," in the root module."),e.k0s()(),e.j41(193,"app-copy-button",15)(194,"span",16),e.EFF(195),e.nI1(196,"extension"),e.nrm(197,"app-tabs",null,4),e.k0s(),e.j41(199,"pre")(200,"code",17),e.EFF(201,"\n@Module({\n  imports: [\n    // Register the ClsModule,\n    ClsModule.forRoot({\n      middleware: {\n        // automatically mount the\n        // ClsMiddleware for all routes\n        mount: true,\n        // and use the setup method to\n        // provide default store values.\n        setup: (cls, req) => {\n          cls.set('userId', req.headers['x-user-id']);\n        },\n      },\n    }),\n  ],\n  providers: [CatService],\n  controllers: [CatController],\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(202,"ol",18)(203,"li"),e.EFF(204,"And then can use the "),e.j41(205,"code"),e.EFF(206,"ClsService"),e.k0s(),e.EFF(207," to access the store values."),e.k0s()(),e.j41(208,"app-copy-button",15)(209,"span",16),e.EFF(210),e.nI1(211,"extension"),e.nrm(212,"app-tabs",null,5),e.k0s(),e.j41(214,"pre")(215,"code",19),e.EFF(216,"\n@Injectable()\nexport class CatService {\n  constructor(\n    // We can inject the provided ClsService instance,\n    private readonly cls: ClsService,\n    private readonly catRepository: CatRepository,\n  ) {}\n\n  getCatForUser() {\n    // and use the \"get\" method to retrieve any stored value.\n    const userId = this.cls.get('userId');\n    return this.catRepository.getForUser(userId);\n  }\n}\n"),e.k0s()(),e.j41(217,"pre")(218,"code",19),e.EFF(219,"\n@Injectable()\n@Dependencies(AsyncLocalStorage, CatRepository)\nexport class CatService {\n  constructor(cls, catRepository) {\n    // We can inject the provided ClsService instance,\n    this.cls = cls\n    this.catRepository = catRepository\n  }\n\n  getCatForUser() {\n    // and use the \"get\" method to retrieve any stored value.\n    const userId = this.cls.get('userId');\n    return this.catRepository.getForUser(userId);\n  }\n}\n"),e.k0s()()(),e.j41(220,"ol",20)(221,"li"),e.EFF(222,"To get strong typing of the store values managed by the "),e.j41(223,"code"),e.EFF(224,"ClsService"),e.k0s(),e.EFF(225," (and also get auto-suggestions of the string keys), we can use an optional type parameter "),e.j41(226,"code"),e.EFF(227,"ClsService<MyClsStore>"),e.k0s(),e.EFF(228," when injecting it."),e.k0s()(),e.j41(229,"app-copy-button")(230,"pre")(231,"code",17),e.EFF(232,"\nexport interface MyClsStore extends ClsStore {\n  userId: number;\n}\n"),e.k0s()()(),e.j41(233,"blockquote",13)(234,"strong"),e.EFF(235,"hint"),e.k0s(),e.EFF(236," It it also possible to let the package automatically generate a Request ID and access it later with "),e.j41(237,"code"),e.EFF(238,"cls.getId()"),e.k0s(),e.EFF(239,", or to get the whole Request object using "),e.j41(240,"code"),e.EFF(241,"cls.get(CLS_REQ)"),e.k0s(),e.EFF(242,".\n"),e.k0s(),e.j41(243,"h4",32)(244,"span"),e.EFF(245,"Testing"),e.k0s()(),e.j41(246,"p"),e.EFF(247,"Since the "),e.j41(248,"code"),e.EFF(249,"ClsService"),e.k0s(),e.EFF(250," is just another injectable provider, it can be entirely mocked out in unit tests."),e.k0s(),e.j41(251,"p"),e.EFF(252,"However, in certain integration tests, we might still want to use the real "),e.j41(253,"code"),e.EFF(254,"ClsService"),e.k0s(),e.EFF(255," implementation. In that case, we will need to wrap the context-aware piece of code with a call to "),e.j41(256,"code"),e.EFF(257,"ClsService#run"),e.k0s(),e.EFF(258," or "),e.j41(259,"code"),e.EFF(260,"ClsService#runWith"),e.k0s(),e.EFF(261,"."),e.k0s(),e.j41(262,"app-copy-button")(263,"pre")(264,"code",17),e.EFF(265,"\ndescribe('CatService', () => {\n  let service: CatService\n  let cls: ClsService\n  const mockCatRepository = createMock<CatRepository>()\n\n  beforeEach(async () => {\n    const module = await Test.createTestingModule({\n      // Set up most of the testing module as we normally would.\n      providers: [\n        CatService,\n        {\n          provide: CatRepository\n          useValue: mockCatRepository\n        }\n      ],\n      imports: [\n        // Import the static version of ClsModule which only provides\n        // the ClsService, but does not set up the store in any way.\n        ClsModule\n      ],\n    }).compile()\n\n    service = module.get(CatService)\n\n    // Also retrieve the ClsService for later use.\n    cls = module.get(ClsService)\n  })\n\n  describe('getCatForUser', () => {\n    it('retrieves cat based on user id', async () => {\n      const expectedUserId = 42\n      mockCatRepository.getForUser.mockImplementationOnce(\n        (id) => ({ userId: id })\n      )\n\n      // Wrap the test call in the `runWith` method\n      // in which we can pass hand-crafted store values.\n      const cat = await cls.runWith(\n        { userId: expectedUserId },\n        () => service.getCatForUser()\n      )\n\n      expect(cat.userId).toEqual(expectedUserId)\n    })\n  })\n})\n"),e.k0s()()(),e.j41(266,"h4",33)(267,"span"),e.EFF(268,"More information"),e.k0s()(),e.j41(269,"p"),e.EFF(270,"Visit the "),e.j41(271,"a",25),e.EFF(272,"NestJS CLS GitHub Page"),e.k0s(),e.EFF(273," for the full API documentation and more code examples."),e.k0s()()),2&s){const a=e.sdS(61),i=e.sdS(91),c=e.sdS(106),p=e.sdS(198),r=e.sdS(213);e.R7$(58),e.SpI(" ",e.i5U(59,17,"als.module",a.isJsActive),"\n"),e.R7$(30),e.SpI(" ",e.i5U(89,20,"app.module",i.isJsActive),"\n"),e.R7$(4),e.AVh("hide",i.isJsActive),e.R7$(3),e.AVh("hide",!i.isJsActive),e.R7$(8),e.SpI(" ",e.i5U(104,23,"cat.service",c.isJsActive),"\n"),e.R7$(4),e.AVh("hide",c.isJsActive),e.R7$(3),e.AVh("hide",!c.isJsActive),e.R7$(85),e.SpI(" ",e.i5U(196,26,"app.module",p.isJsActive),"\n"),e.R7$(15),e.SpI(" ",e.i5U(211,29,"cat.service",r.isJsActive),"\n"),e.R7$(4),e.AVh("hide",r.isJsActive),e.R7$(3),e.AVh("hide",!r.isJsActive)}},dependencies:[g.O,d.a,F.z,f.M],encapsulation:2,changeDetection:0})}return t})(),B=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-suites"]],features:[e.Vt3],decls:539,vars:32,consts:[["contentReference",""],["app6ac020efcc5b300e2a091004068dbda83cadfaf0",""],["app96cd3171a221da4a3c4a87c73a00aeadfe0b8efe",""],["app4cfc930a9ad54804e7927112f7313912e943c78f",""],["appdc029607caa5846b4258210ec9faa1a24af0c6ea",""],["app923ec32e596ae43c4d8e3c862f456fbf83d1013d",""],["app497730bc4e884beacd5eb1472612be43cefb20ad",""],["appbbfcc3a5387f3ce2eec3ad5fe147346acba47e01",""],["appf58eaca6884d76c6dd5b0942316e2228eda1b1b5",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/suites.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","suites-formerly-automock"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/suites-dev/suites"],["appAnchor","","id","introduction"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","example-and-module-setup"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],["appAnchor","","id","testing-catsapiservice-with-testingmodule"],["appAnchor","","id","sociable-testing-example"],["appAnchor","","id","integration-testing-and-database"],["appAnchor","","id","sociable-unit-tests-integration-tests-and-mocking"],["appAnchor","","id","testing-ioc-container-registration"],["appAnchor","","id","comparison-between-solitary-sociable-integration-and-e2e-testing"],["appAnchor","","id","solitary-unit-tests"],["appAnchor","","id","sociable-unit-tests"],["appAnchor","","id","integration-tests"],["appAnchor","","id","e2e-tests"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/testing#end-to-end-testing"]],template:function(s,o){if(1&s&&(e.j41(0,"div",9,0)(2,"div",10)(3,"a",11),e.nrm(4,"i",12),e.k0s()(),e.j41(5,"h3",13),e.EFF(6,"Suites (formerly Automock)"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Suites is an opinionated and flexible testing meta-framework designed to enhance the software testing experience for backend systems. By bringing together a variety of testing tools into a unified framework, Suites streamlines the creation of reliable tests, helping to ensure the development of high-quality software."),e.k0s(),e.j41(9,"blockquote",14)(10,"strong"),e.EFF(11,"Hint"),e.k0s(),e.j41(12,"code"),e.EFF(13,"Suites"),e.k0s(),e.EFF(14," is a third-party package and is not maintained by the NestJS core team. Please report any issues with the library to the "),e.j41(15,"a",15),e.EFF(16,"appropriate repository"),e.k0s(),e.EFF(17,".\n"),e.k0s(),e.j41(18,"h4",16)(19,"span"),e.EFF(20,"Introduction"),e.k0s()(),e.j41(21,"p"),e.EFF(22,"Inversion of Control (IoC) is a fundamental principle in the NestJS framework, enabling a modular, testable architecture. While NestJS offers built-in tools for creating testing modules, Suites provides an alternative approach that emphasizes testing isolated units or small groups of units together. Suites uses a virtual container for dependencies, where mocks are automatically generated, eliminating the need to manually replace each provider with a mock in the IoC (or DI) container. This approach can be used either in place of or alongside NestJS\u2019s "),e.j41(23,"code"),e.EFF(24,"Test.createTestingModule"),e.k0s(),e.EFF(25," method, offering more flexibility for unit testing based on your needs."),e.k0s(),e.j41(26,"h4",17)(27,"span"),e.EFF(28,"Installation"),e.k0s()(),e.j41(29,"p"),e.EFF(30,"To use Suites with NestJS, install the necessary packages:"),e.k0s(),e.j41(31,"pre")(32,"code",18),e.EFF(33,"\n$ npm i -D @suites/unit @suites/di.nestjs @suites/doubles.jest\n"),e.k0s()(),e.j41(34,"blockquote",14)(35,"strong"),e.EFF(36,"Hint"),e.k0s(),e.j41(37,"code"),e.EFF(38,"Suites"),e.k0s(),e.EFF(39," supports Vitest and Sinon as test doubles as well, "),e.j41(40,"code"),e.EFF(41,"@suites/doubles.vitest"),e.k0s(),e.EFF(42," and "),e.j41(43,"code"),e.EFF(44,"@suites/doubles.sinon"),e.k0s(),e.EFF(45," respectively.\n"),e.k0s(),e.j41(46,"h4",19)(47,"span"),e.EFF(48,"Example and module setup"),e.k0s()(),e.j41(49,"p"),e.EFF(50,"Consider a module setup for "),e.j41(51,"code"),e.EFF(52,"CatsService"),e.k0s(),e.EFF(53," that includes "),e.j41(54,"code"),e.EFF(55,"CatsApiService"),e.k0s(),e.EFF(56,", "),e.j41(57,"code"),e.EFF(58,"CatsDAL"),e.k0s(),e.EFF(59,", "),e.j41(60,"code"),e.EFF(61,"HttpClient"),e.k0s(),e.EFF(62,", and "),e.j41(63,"code"),e.EFF(64,"Logger"),e.k0s(),e.EFF(65,". This\nwill be our base for the examples in this recipe:"),e.k0s(),e.j41(66,"app-copy-button",20)(67,"span",21),e.EFF(68),e.nI1(69,"extension"),e.nrm(70,"app-tabs",null,1),e.k0s(),e.j41(72,"pre")(73,"code",22),e.EFF(74,"\nimport { HttpModule } from '@nestjs/axios';\nimport { PrismaModule } from '../prisma.module';\n\n@Module({\n  imports: [HttpModule.register({ baseUrl: 'https://api.cats.com/' }), PrismaModule],\n  providers: [CatsService, CatsApiService, CatsDAL, Logger],\n  exports: [CatsService],\n})\nexport class CatsModule {}\n"),e.k0s()()(),e.j41(75,"p"),e.EFF(76,"Both the "),e.j41(77,"code"),e.EFF(78,"HttpModule"),e.k0s(),e.EFF(79," and "),e.j41(80,"code"),e.EFF(81,"PrismaModule"),e.k0s(),e.EFF(82," are exporting providers to the host module."),e.k0s(),e.j41(83,"p"),e.EFF(84,"Let's start by testing the "),e.j41(85,"code"),e.EFF(86,"CatsHttpService"),e.k0s(),e.EFF(87," in isolation. This service is responsible for fetching cat data from an API and logging the operation."),e.k0s(),e.j41(88,"app-copy-button",20)(89,"span",21),e.EFF(90),e.nI1(91,"extension"),e.nrm(92,"app-tabs",null,2),e.k0s(),e.j41(94,"pre")(95,"code",22),e.EFF(96,"\n@Injectable()\nexport class CatsHttpService {\n  constructor(private httpClient: HttpClient, private logger: Logger) {}\n\n  async fetchCats(): Promise<Cat[]> {\n    this.logger.log('Fetching cats from the API');\n    const response = await this.httpClient.get('/cats');\n    return response.data;\n  }\n}\n"),e.k0s()()(),e.j41(97,"p"),e.EFF(98,"We want to isolate "),e.j41(99,"code"),e.EFF(100,"CatsHttpService"),e.k0s(),e.EFF(101," and mock its dependencies, "),e.j41(102,"code"),e.EFF(103,"HttpClient"),e.k0s(),e.EFF(104," and "),e.j41(105,"code"),e.EFF(106,"Logger"),e.k0s(),e.EFF(107,". Suites allows us to do this\neasily using the "),e.j41(108,"code"),e.EFF(109,".solitary()"),e.k0s(),e.EFF(110," method from "),e.j41(111,"code"),e.EFF(112,"TestBed"),e.k0s(),e.EFF(113,"."),e.k0s(),e.j41(114,"app-copy-button",20)(115,"span",21),e.EFF(116),e.nI1(117,"extension"),e.nrm(118,"app-tabs",null,3),e.k0s(),e.j41(120,"pre")(121,"code",22),e.EFF(122,"\nimport { TestBed, Mocked } from '@suites/unit';\n\ndescribe('Cats Http Service Unit Test', () => {\n  let catsHttpService: CatsHttpService;\n  let httpClient: Mocked<HttpClient>;\n  let logger: Mocked<Logger>;\n\n  beforeAll(async () => {\n    // Isolate CatsHttpService and mock HttpClient and Logger\n    const { unit, unitRef } = await TestBed.solitary(CatsHttpService).compile();\n\n    catsHttpService = unit;\n    httpClient = unitRef.get(HttpClient);\n    logger = unitRef.get(Logger);\n  });\n\n  it('should fetch cats from the API and log the operation', async () => {\n    const catsFixtures: Cat[] = [{ id: 1, name: 'Catty' }, { id: 2, name: 'Mitzy' }];\n    httpClient.get.mockResolvedValue({ data: catsFixtures });\n\n    const cats = await catsHttpService.fetchCats();\n\n    expect(logger.log).toHaveBeenCalledWith('Fetching cats from the API');\n    expect(httpClient.get).toHaveBeenCalledWith('/cats');\n    expect(cats).toEqual<Cat[]>(catsFixtures);\n  });\n});\n"),e.k0s()()(),e.j41(123,"p"),e.EFF(124,"In the example above, Suites automatically mocks the dependencies of "),e.j41(125,"code"),e.EFF(126,"CatsHttpService"),e.k0s(),e.EFF(127," using "),e.j41(128,"code"),e.EFF(129,"TestBed.solitary()"),e.k0s(),e.EFF(130,". This makes the setup easier since you don\u2019t have to manually mock each dependency."),e.k0s(),e.j41(131,"ul")(132,"li"),e.EFF(133,"Auto-Mocking of Dependencies: Suites generates mocks for all dependencies of the unit being tested."),e.k0s(),e.j41(134,"li"),e.EFF(135,"Empty Behavior of Mocks: Initially, these mocks don\u2019t have any predefined behavior. You\u2019ll need to specify their behavior as needed for your tests."),e.k0s(),e.j41(136,"li")(137,"code"),e.EFF(138,"unit"),e.k0s(),e.EFF(139," and "),e.j41(140,"code"),e.EFF(141,"unitRef"),e.k0s(),e.EFF(142," properties:"),e.j41(143,"ul")(144,"li")(145,"code"),e.EFF(146,"unit"),e.k0s(),e.EFF(147," refers to the actual instance of the class being tested, complete with its mocked dependencies."),e.k0s(),e.j41(148,"li")(149,"code"),e.EFF(150,"unitRef"),e.k0s(),e.EFF(151," is a reference that allows you to access the mocked dependencies."),e.k0s()()()(),e.j41(152,"h4",23)(153,"span"),e.EFF(154,"Testing "),e.j41(155,"code"),e.EFF(156,"CatsApiService"),e.k0s(),e.EFF(157," with "),e.j41(158,"code"),e.EFF(159,"TestingModule"),e.k0s()()(),e.j41(160,"p"),e.EFF(161,"For "),e.j41(162,"code"),e.EFF(163,"CatsApiService"),e.k0s(),e.EFF(164,", we want to ensure that the "),e.j41(165,"code"),e.EFF(166,"HttpModule"),e.k0s(),e.EFF(167," is properly imported and configured in the "),e.j41(168,"code"),e.EFF(169,"CatsModule"),e.k0s(),e.EFF(170," host module. This includes verifying that the base URL (and other configurations) for "),e.j41(171,"code"),e.EFF(172,"Axios"),e.k0s(),e.EFF(173," is set correctly."),e.k0s(),e.j41(174,"p"),e.EFF(175,"In this case, we won\u2019t use Suites; instead, we\u2019ll use Nest\u2019s "),e.j41(176,"code"),e.EFF(177,"TestingModule"),e.k0s(),e.EFF(178," to test the actual configuration of "),e.j41(179,"code"),e.EFF(180,"HttpModule"),e.k0s(),e.EFF(181,". We\u2019ll utilize "),e.j41(182,"code"),e.EFF(183,"nock"),e.k0s(),e.EFF(184," to mock HTTP requests without mocking the "),e.j41(185,"code"),e.EFF(186,"HttpClient"),e.k0s(),e.EFF(187," in this scenario."),e.k0s(),e.j41(188,"app-copy-button",20)(189,"span",21),e.EFF(190),e.nI1(191,"extension"),e.nrm(192,"app-tabs",null,4),e.k0s(),e.j41(194,"pre")(195,"code",22),e.EFF(196,"\nimport { HttpClient } from '@nestjs/axios';\n\n@Injectable()\nexport class CatsApiService {\n  constructor(private httpClient: HttpClient) {}\n\n  async getCatById(id: number): Promise<Cat> {\n    const response = await this.httpClient.get(`/cats/${id}`);\n    return response.data;\n  }\n}\n"),e.k0s()()(),e.j41(197,"p"),e.EFF(198,"We need to test "),e.j41(199,"code"),e.EFF(200,"CatsApiService"),e.k0s(),e.EFF(201," with a real, unmocked "),e.j41(202,"code"),e.EFF(203,"HttpClient"),e.k0s(),e.EFF(204," to ensure the DI and configuration of "),e.j41(205,"code"),e.EFF(206,"Axios"),e.k0s(),e.EFF(207," (http)\nare correct. This involves importing the "),e.j41(208,"code"),e.EFF(209,"CatsModule"),e.k0s(),e.EFF(210," and using "),e.j41(211,"code"),e.EFF(212,"nock"),e.k0s(),e.EFF(213," for HTTP request mocking."),e.k0s(),e.j41(214,"app-copy-button",20)(215,"span",21),e.EFF(216),e.nI1(217,"extension"),e.nrm(218,"app-tabs",null,5),e.k0s(),e.j41(220,"pre")(221,"code",22),e.EFF(222,"\nimport { Test } from '@nestjs/testing';\nimport * as nock from 'nock';\n\ndescribe('Cats Api Service Integration Test', () => {\n  let catsApiService: CatsApiService;\n\n  beforeAll(async () => {\n    const moduleRef = await Test.createTestingModule({\n      imports: [CatsModule],\n    }).compile();\n\n    catsApiService = moduleRef.get(CatsApiService);\n  });\n\n  afterEach(() => {\n    nock.cleanAll();\n  });\n\n  it('should fetch cat by id using real HttpClient', async () => {\n    const catFixture: Cat = { id: 1, name: 'Catty' };\n\n    nock('https://api.cats.com') // Making this URL identical to the one in HttpModule registration\n      .get('/cats/1')\n      .reply(200, catFixture);\n\n    const cat = await catsApiService.getCatById(1);\n    expect(cat).toEqual<Cat>(catFixture);\n  });\n});\n"),e.k0s()()(),e.j41(223,"h4",24)(224,"span"),e.EFF(225,"Sociable Testing Example"),e.k0s()(),e.j41(226,"p"),e.EFF(227,"Next, let's test "),e.j41(228,"code"),e.EFF(229,"CatsService"),e.k0s(),e.EFF(230,", which depends on "),e.j41(231,"code"),e.EFF(232,"CatsApiService"),e.k0s(),e.EFF(233," and "),e.j41(234,"code"),e.EFF(235,"CatsDAL"),e.k0s(),e.EFF(236,". We'll mock "),e.j41(237,"code"),e.EFF(238,"CatsApiService"),e.k0s(),e.EFF(239," and\nexpose "),e.j41(240,"code"),e.EFF(241,"CatsDAL"),e.k0s(),e.EFF(242,"."),e.k0s(),e.j41(243,"app-copy-button",20)(244,"span",21),e.EFF(245),e.nI1(246,"extension"),e.nrm(247,"app-tabs",null,6),e.k0s(),e.j41(249,"pre")(250,"code",22),e.EFF(251,"\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class CatsDAL {\n  constructor(private prisma: PrismaClient) {}\n\n  async saveCat(cat: Cat): Promise<Cat> {\n    return this.prisma.cat.create({data: cat});\n  }\n}\n"),e.k0s()()(),e.j41(252,"p"),e.EFF(253,"Next up, we have the "),e.j41(254,"code"),e.EFF(255,"CatsService"),e.k0s(),e.EFF(256,", which depends on "),e.j41(257,"code"),e.EFF(258,"CatsApiService"),e.k0s(),e.EFF(259," and "),e.j41(260,"code"),e.EFF(261,"CatsDAL"),e.k0s(),e.EFF(262,":"),e.k0s(),e.j41(263,"app-copy-button",20)(264,"span",21),e.EFF(265),e.nI1(266,"extension"),e.nrm(267,"app-tabs",null,7),e.k0s(),e.j41(269,"pre")(270,"code",22),e.EFF(271,"\n@Injectable()\nexport class CatsService {\n  constructor(\n    private catsApiService: CatsApiService,\n    private catsDAL: CatsDAL\n  ) {}\n\n  async getAndSaveCat(id: number): Promise<Cat> {\n    const cat = await this.catsApiService.getCatById(id);\n    return this.catsDAL.saveCat(cat);\n  }\n}\n"),e.k0s()()(),e.j41(272,"p"),e.EFF(273,"And now, let's test "),e.j41(274,"code"),e.EFF(275,"CatsService"),e.k0s(),e.EFF(276," using sociable testing with Suites:"),e.k0s(),e.j41(277,"app-copy-button",20)(278,"span",21),e.EFF(279),e.nI1(280,"extension"),e.nrm(281,"app-tabs",null,8),e.k0s(),e.j41(283,"pre")(284,"code",22),e.EFF(285,"\nimport { TestBed, Mocked } from '@suites/unit';\nimport { PrismaClient } from '@prisma/client';\n\ndescribe('Cats Service Sociable Unit Test', () => {\n  let catsService: CatsService;\n  let prisma: Mocked<PrismaClient>;\n  let catsApiService: Mocked<CatsApiService>;\n\n  beforeAll(async () => {\n    // Sociable test setup, exposing CatsDAL and mocking CatsApiService\n    const { unit, unitRef } = await TestBed.sociable(CatsService)\n      .expose(CatsDAL)\n      .mock(CatsApiService)\n      .final({ getCatById: async () => ({ id: 1, name: 'Catty' })})\n      .compile();\n\n    catsService = unit;\n    prisma = unitRef.get(PrismaClient);\n  });\n\n  it('should get cat by id and save it', async () => {\n    const catFixture: Cat = { id: 1, name: 'Catty' };\n    prisma.cat.create.mockResolvedValue(catFixture);\n\n    const savedCat = await catsService.getAndSaveCat(1);\n\n    expect(prisma.cat.create).toHaveBeenCalledWith({ data: catFixture });\n    expect(savedCat).toEqual(catFixture);\n  });\n});\n"),e.k0s()()(),e.j41(286,"p"),e.EFF(287,"In this example, we use the "),e.j41(288,"code"),e.EFF(289,".sociable()"),e.k0s(),e.EFF(290," method to set up the test environment. We utilize the "),e.j41(291,"code"),e.EFF(292,".expose()"),e.k0s(),e.EFF(293," method to allow real interactions with "),e.j41(294,"code"),e.EFF(295,"CatsDAL"),e.k0s(),e.EFF(296,", while mocking "),e.j41(297,"code"),e.EFF(298,"CatsApiService"),e.k0s(),e.EFF(299," with the "),e.j41(300,"code"),e.EFF(301,".mock()"),e.k0s(),e.EFF(302," method. The "),e.j41(303,"code"),e.EFF(304,".final()"),e.k0s(),e.EFF(305," method establishes fixed behavior for "),e.j41(306,"code"),e.EFF(307,"CatsApiService"),e.k0s(),e.EFF(308,", ensuring consistent outcomes across tests."),e.k0s(),e.j41(309,"p"),e.EFF(310,"This approach emphasizes testing "),e.j41(311,"code"),e.EFF(312,"CatsService"),e.k0s(),e.EFF(313," with genuine interactions with "),e.j41(314,"code"),e.EFF(315,"CatsDAL"),e.k0s(),e.EFF(316,", which involves handling "),e.j41(317,"code"),e.EFF(318,"Prisma"),e.k0s(),e.EFF(319,". Suites will use "),e.j41(320,"code"),e.EFF(321,"CatsDAL"),e.k0s(),e.EFF(322," as is, and only its dependencies, like "),e.j41(323,"code"),e.EFF(324,"Prisma"),e.k0s(),e.EFF(325,", will be mocked in this case."),e.k0s(),e.j41(326,"p"),e.EFF(327,"It's important to note that this approach is "),e.j41(328,"strong"),e.EFF(329,"solely for verifying behavior"),e.k0s(),e.EFF(330," and differs from loading the entire testing module. Sociable tests are valuable for confirming the behavior of units in isolation from their direct dependencies, especially when you want to focus on the behavior and interactions of units."),e.k0s(),e.j41(331,"h4",25)(332,"span"),e.EFF(333,"Integration Testing and Database"),e.k0s()(),e.j41(334,"p"),e.EFF(335,"For "),e.j41(336,"code"),e.EFF(337,"CatsDAL"),e.k0s(),e.EFF(338,", it's possible to test against a real database such as SQLite or PostgreSQL (for instance, using Docker Compose). However, for this example, we will mock "),e.j41(339,"code"),e.EFF(340,"Prisma"),e.k0s(),e.EFF(341," and focus on sociable testing. The reason for mocking "),e.j41(342,"code"),e.EFF(343,"Prisma"),e.k0s(),e.EFF(344," is to avoid I/O operations and concentrate on the behavior of "),e.j41(345,"code"),e.EFF(346,"CatsService"),e.k0s(),e.EFF(347," in isolation. That said, you can also conduct tests with real I/O operations and a live database."),e.k0s(),e.j41(348,"h4",26)(349,"span"),e.EFF(350,"Sociable Unit Tests, Integration Tests, and Mocking"),e.k0s()(),e.j41(351,"ul")(352,"li")(353,"p"),e.EFF(354,"Sociable Unit Tests: These focus on testing the interactions and behaviors between units while mocking their deeper dependencies. In this example, we mock "),e.j41(355,"code"),e.EFF(356,"Prisma"),e.k0s(),e.EFF(357," and expose "),e.j41(358,"code"),e.EFF(359,"CatsDAL"),e.k0s(),e.EFF(360,"."),e.k0s()(),e.j41(361,"li")(362,"p"),e.EFF(363,"Integration Tests: These involve real I/O operations and a fully configured dependency injection (DI) setup. Testing "),e.j41(364,"code"),e.EFF(365,"CatsApiService"),e.k0s(),e.EFF(366," with "),e.j41(367,"code"),e.EFF(368,"HttpModule"),e.k0s(),e.EFF(369," and "),e.j41(370,"code"),e.EFF(371,"nock"),e.k0s(),e.EFF(372," is considered an integration test, as it verifies the real configuration and interactions of "),e.j41(373,"code"),e.EFF(374,"HttpClient"),e.k0s(),e.EFF(375,". In this scenario, we will use Nest's "),e.j41(376,"code"),e.EFF(377,"TestingModule"),e.k0s(),e.EFF(378," to load the actual module configuration."),e.k0s()()(),e.j41(379,"p")(380,"strong"),e.EFF(381,"Exercise caution when using mocks."),e.k0s(),e.EFF(382," Be sure to test I/O operations and DI configurations (especially when HTTP or database interactions are involved). After validating these components with integration tests, you can confidently mock them for sociable unit tests to focus on behavior and interactions. Suites sociable tests are geared towards verifying the behavior of units in isolation from their direct dependencies, while integration tests ensure that the overall system configuration and I/O operations function correctly."),e.k0s(),e.j41(383,"h4",27)(384,"span"),e.EFF(385,"Testing IoC Container Registration"),e.k0s()(),e.j41(386,"p"),e.EFF(387,"It's essential to verify that your DI container is properly configured to prevent runtime errors. This includes ensuring that all providers, services, and modules are registered and injected correctly. Testing the DI container configuration helps catch misconfigurations early, preventing issues that might only arise at runtime."),e.k0s(),e.j41(388,"p"),e.EFF(389,"To confirm that the IoC container is set up correctly, let's create an integration test that loads the actual module configuration and verifies that all providers are registered and injected properly."),e.k0s(),e.j41(390,"app-copy-button")(391,"pre")(392,"code",22),e.EFF(393,"\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { CatsModule } from './cats.module';\nimport { CatsService } from './cats.service';\n\ndescribe('Cats Module Integration Test', () => {\n  let moduleRef: TestingModule;\n\n  beforeAll(async () => {\n    moduleRef = await Test.createTestingModule({\n      imports: [CatsModule],\n    }).compile();\n  });\n\n  it('should resolve exported providers from the ioc container', () => {\n    const catsService = moduleRef.get(CatsService);\n    expect(catsService).toBeDefined();\n  });\n});\n"),e.k0s()()(),e.j41(394,"h4",28)(395,"span"),e.EFF(396,"Comparison Between Solitary, Sociable, Integration, and E2E Testing"),e.k0s()(),e.j41(397,"h4",29)(398,"span"),e.EFF(399,"Solitary Unit Tests"),e.k0s()(),e.j41(400,"ul")(401,"li")(402,"strong"),e.EFF(403,"Focus"),e.k0s(),e.EFF(404,": Test single unit (class) in full isolation."),e.k0s(),e.j41(405,"li")(406,"strong"),e.EFF(407,"Use Case"),e.k0s(),e.EFF(408,": Testing "),e.j41(409,"code"),e.EFF(410,"CatsHttpService"),e.k0s(),e.EFF(411,"."),e.k0s(),e.j41(412,"li")(413,"strong"),e.EFF(414,"Tools"),e.k0s(),e.EFF(415,": Suites' "),e.j41(416,"code"),e.EFF(417,"TestBed.solitary()"),e.k0s(),e.EFF(418," method."),e.k0s(),e.j41(419,"li")(420,"strong"),e.EFF(421,"Example"),e.k0s(),e.EFF(422,": Mocking "),e.j41(423,"code"),e.EFF(424,"HttpClient"),e.k0s(),e.EFF(425," and testing "),e.j41(426,"code"),e.EFF(427,"CatsHttpService"),e.k0s(),e.EFF(428,"."),e.k0s()(),e.j41(429,"h4",30)(430,"span"),e.EFF(431,"Sociable Unit Tests"),e.k0s()(),e.j41(432,"ul")(433,"li")(434,"strong"),e.EFF(435,"Focus"),e.k0s(),e.EFF(436,": Verify interactions between units while mocking deeper dependencies."),e.k0s(),e.j41(437,"li")(438,"strong"),e.EFF(439,"Use Case"),e.k0s(),e.EFF(440,": Testing "),e.j41(441,"code"),e.EFF(442,"CatsService"),e.k0s(),e.EFF(443," with a mocked "),e.j41(444,"code"),e.EFF(445,"CatsApiService"),e.k0s(),e.EFF(446," and exposing "),e.j41(447,"code"),e.EFF(448,"CatsDAL"),e.k0s(),e.EFF(449,"."),e.k0s(),e.j41(450,"li")(451,"strong"),e.EFF(452,"Tools"),e.k0s(),e.EFF(453,": Suites' "),e.j41(454,"code"),e.EFF(455,"TestBed.sociable()"),e.k0s(),e.EFF(456," method."),e.k0s(),e.j41(457,"li")(458,"strong"),e.EFF(459,"Example"),e.k0s(),e.EFF(460,": Mocking "),e.j41(461,"code"),e.EFF(462,"Prisma"),e.k0s(),e.EFF(463," and testing "),e.j41(464,"code"),e.EFF(465,"CatsService"),e.k0s(),e.EFF(466,"."),e.k0s()(),e.j41(467,"h4",31)(468,"span"),e.EFF(469,"Integration Tests"),e.k0s()(),e.j41(470,"ul")(471,"li")(472,"strong"),e.EFF(473,"Focus"),e.k0s(),e.EFF(474,": Involve real I/O operations and fully configured modules (IoC container)."),e.k0s(),e.j41(475,"li")(476,"strong"),e.EFF(477,"Use Case"),e.k0s(),e.EFF(478,": Testing "),e.j41(479,"code"),e.EFF(480,"CatsApiService"),e.k0s(),e.EFF(481," with "),e.j41(482,"code"),e.EFF(483,"HttpModule"),e.k0s(),e.EFF(484," and "),e.j41(485,"code"),e.EFF(486,"nock"),e.k0s(),e.EFF(487,"."),e.k0s(),e.j41(488,"li")(489,"strong"),e.EFF(490,"Tools"),e.k0s(),e.EFF(491,": Nest's "),e.j41(492,"code"),e.EFF(493,"TestingModule"),e.k0s(),e.EFF(494,"."),e.k0s(),e.j41(495,"li")(496,"strong"),e.EFF(497,"Example"),e.k0s(),e.EFF(498,": Testing the real configuration and interaction of "),e.j41(499,"code"),e.EFF(500,"HttpClient"),e.k0s(),e.EFF(501,"."),e.k0s()(),e.j41(502,"h4",32)(503,"span"),e.EFF(504,"E2E Tests"),e.k0s()(),e.j41(505,"ul")(506,"li")(507,"strong"),e.EFF(508,"Focus"),e.k0s(),e.EFF(509,": Cover the interaction of classes and modules at a more aggregate level."),e.k0s(),e.j41(510,"li")(511,"strong"),e.EFF(512,"Use Case"),e.k0s(),e.EFF(513,": Testing the full behavior of the system from the perspective of the end-user."),e.k0s(),e.j41(514,"li")(515,"strong"),e.EFF(516,"Tools"),e.k0s(),e.EFF(517,": Nest's "),e.j41(518,"code"),e.EFF(519,"TestingModule"),e.k0s(),e.EFF(520,", "),e.j41(521,"code"),e.EFF(522,"supertest"),e.k0s(),e.EFF(523,"."),e.k0s(),e.j41(524,"li")(525,"strong"),e.EFF(526,"Example"),e.k0s(),e.EFF(527,": Testing the "),e.j41(528,"code"),e.EFF(529,"CatsModule"),e.k0s(),e.EFF(530," using "),e.j41(531,"code"),e.EFF(532,"supertest"),e.k0s(),e.EFF(533," to simulate HTTP requests."),e.k0s()(),e.j41(534,"p"),e.EFF(535,"Refer to the "),e.j41(536,"a",33),e.EFF(537,"NestJS official testing guide"),e.k0s(),e.EFF(538," for more\ndetails on setting up and running E2E tests."),e.k0s()()),2&s){const a=e.sdS(71),i=e.sdS(93),c=e.sdS(119),p=e.sdS(193),r=e.sdS(219),u=e.sdS(248),h=e.sdS(268),E=e.sdS(282);e.R7$(68),e.SpI(" ",e.i5U(69,8,"cats.module",a.isJsActive),"\n"),e.R7$(22),e.SpI(" ",e.i5U(91,11,"cats-http.service",i.isJsActive),"\n"),e.R7$(26),e.SpI(" ",e.i5U(117,14,"cats-http.service.spec",c.isJsActive),"\n"),e.R7$(74),e.SpI(" ",e.i5U(191,17,"cats-api.service",p.isJsActive),"\n"),e.R7$(26),e.SpI(" ",e.i5U(217,20,"cats-api.service.integration.test",r.isJsActive),"\n"),e.R7$(29),e.SpI(" ",e.i5U(246,23,"cats.dal",u.isJsActive),"\n"),e.R7$(20),e.SpI(" ",e.i5U(266,26,"cats.service",h.isJsActive),"\n"),e.R7$(14),e.SpI(" ",e.i5U(280,29,"cats.service.spec",E.isJsActive),"\n")}},dependencies:[g.O,d.a,F.z,f.M],encapsulation:2,changeDetection:0})}return t})(),V=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-swc"]],features:[e.Vt3],decls:403,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/swc.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","swc"],["rel","nofollow","target","_blank","href","https://swc.rs/"],[1,"info"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","getting-started"],["href","/recipes/swc#monorepo"],[1,"language-json"],["appAnchor","","id","type-checking"],["appAnchor","","id","cli-plugins-swc"],["appAnchor","","id","swc-configuration"],["appAnchor","","id","monorepo"],[1,"language-js"],["appAnchor","","id","monorepo-and-cli-plugins"],[1,"language-ts"],["appAnchor","","id","common-pitfalls"],[1,"language-typescript"],["routerLink","/fundamentals/circular-dependency"],["id","jest--swc"],["href","/recipes/swc#monorepo-and-cli-plugins"],["id","vitest"],["rel","nofollow","target","_blank","href","https://vitest.dev/"],["appAnchor","","id","installation-1"],["appAnchor","","id","configuration"],["appAnchor","","id","update-imports-in-e2e-tests"],["rel","nofollow","target","_blank","href","https://github.com/TrilonIO/nest-vitest"]],template:function(s,o){1&s&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"SWC"),e.k0s(),e.j41(7,"p")(8,"a",6),e.EFF(9,"SWC"),e.k0s(),e.EFF(10," (Speedy Web Compiler) is an extensible Rust-based platform that can be used for both compilation and bundling.\nUsing SWC with Nest CLI is a great and simple way to significantly speed up your development process."),e.k0s(),e.j41(11,"blockquote",7)(12,"strong"),e.EFF(13,"Hint"),e.k0s(),e.EFF(14," SWC is approximately "),e.j41(15,"strong"),e.EFF(16,"x20 times faster"),e.k0s(),e.EFF(17," than the default TypeScript compiler.\n"),e.k0s(),e.j41(18,"h4",8)(19,"span"),e.EFF(20,"Installation"),e.k0s()(),e.j41(21,"p"),e.EFF(22,"To get started, first install a few packages:"),e.k0s(),e.j41(23,"pre")(24,"code",9),e.EFF(25,"\n$ npm i --save-dev @swc/cli @swc/core\n"),e.k0s()(),e.j41(26,"h4",10)(27,"span"),e.EFF(28,"Getting started"),e.k0s()(),e.j41(29,"p"),e.EFF(30,"Once the installation process is complete, you can use the "),e.j41(31,"code"),e.EFF(32,"swc"),e.k0s(),e.EFF(33," builder with Nest CLI, as follows:"),e.k0s(),e.j41(34,"pre")(35,"code",9),e.EFF(36,"\n$ nest start -b swc\n# OR nest start --builder swc\n"),e.k0s()(),e.j41(37,"blockquote",7)(38,"strong"),e.EFF(39,"Hint"),e.k0s(),e.EFF(40," If your repository is a monorepo, check out "),e.j41(41,"a",11),e.EFF(42,"this section"),e.k0s(),e.EFF(43,".\n"),e.k0s(),e.j41(44,"p"),e.EFF(45,"Instead of passing the "),e.j41(46,"code"),e.EFF(47,"-b"),e.k0s(),e.EFF(48," flag you can also just set the "),e.j41(49,"code"),e.EFF(50,"compilerOptions.builder"),e.k0s(),e.EFF(51," property to "),e.j41(52,"code"),e.EFF(53,'"swc"'),e.k0s(),e.EFF(54," in your "),e.j41(55,"code"),e.EFF(56,"nest-cli.json"),e.k0s(),e.EFF(57," file, like so:"),e.k0s(),e.j41(58,"pre")(59,"code",12),e.EFF(60,'\n{\n  "compilerOptions": {\n    "builder": "swc"\n  }\n}\n'),e.k0s()(),e.j41(61,"p"),e.EFF(62,"To customize builder's behavior, you can pass an object containing two attributes, "),e.j41(63,"code"),e.EFF(64,"type"),e.k0s(),e.EFF(65," ("),e.j41(66,"code"),e.EFF(67,'"swc"'),e.k0s(),e.EFF(68,") and "),e.j41(69,"code"),e.EFF(70,"options"),e.k0s(),e.EFF(71,", as follows:"),e.k0s(),e.j41(72,"pre")(73,"code",12),e.EFF(74,'\n"compilerOptions": {\n  "builder": {\n    "type": "swc",\n    "options": {\n      "swcrcPath": "infrastructure/.swcrc",\n    }\n  }\n}\n'),e.k0s()(),e.j41(75,"p"),e.EFF(76,"To run the application in watch mode, use the following command:"),e.k0s(),e.j41(77,"pre")(78,"code",9),e.EFF(79,"\n$ nest start -b swc -w\n# OR nest start --builder swc --watch\n"),e.k0s()(),e.j41(80,"h4",13)(81,"span"),e.EFF(82,"Type checking"),e.k0s()(),e.j41(83,"p"),e.EFF(84,"SWC does not perform any type checking itself (as opposed to the default TypeScript compiler), so to turn it on, you need to use the "),e.j41(85,"code"),e.EFF(86,"--type-check"),e.k0s(),e.EFF(87," flag:"),e.k0s(),e.j41(88,"pre")(89,"code",9),e.EFF(90,"\n$ nest start -b swc --type-check\n"),e.k0s()(),e.j41(91,"p"),e.EFF(92,"This command will instruct the Nest CLI to run "),e.j41(93,"code"),e.EFF(94,"tsc"),e.k0s(),e.EFF(95," in "),e.j41(96,"code"),e.EFF(97,"noEmit"),e.k0s(),e.EFF(98," mode alongside SWC, which will asynchronously perform type checking. Again, instead of passing the "),e.j41(99,"code"),e.EFF(100,"--type-check"),e.k0s(),e.EFF(101," flag you can also just set the "),e.j41(102,"code"),e.EFF(103,"compilerOptions.typeCheck"),e.k0s(),e.EFF(104," property to "),e.j41(105,"code"),e.EFF(106,"true"),e.k0s(),e.EFF(107," in your "),e.j41(108,"code"),e.EFF(109,"nest-cli.json"),e.k0s(),e.EFF(110," file, like so:"),e.k0s(),e.j41(111,"pre")(112,"code",12),e.EFF(113,'\n{\n  "compilerOptions": {\n    "builder": "swc",\n    "typeCheck": true\n  }\n}\n'),e.k0s()(),e.j41(114,"h4",14)(115,"span"),e.EFF(116,"CLI Plugins (SWC)"),e.k0s()(),e.j41(117,"p"),e.EFF(118,"The "),e.j41(119,"code"),e.EFF(120,"--type-check"),e.k0s(),e.EFF(121," flag will automatically execute "),e.j41(122,"strong"),e.EFF(123,"NestJS CLI plugins"),e.k0s(),e.EFF(124," and produce a serialized metadata file which then can be loaded by the application at runtime."),e.k0s(),e.j41(125,"h4",15)(126,"span"),e.EFF(127,"SWC configuration"),e.k0s()(),e.j41(128,"p"),e.EFF(129,"SWC builder is pre-configured to match the requirements of NestJS applications. However, you can customize the configuration by creating a "),e.j41(130,"code"),e.EFF(131,".swcrc"),e.k0s(),e.EFF(132," file in the root directory and tweaking the options as you wish."),e.k0s(),e.j41(133,"pre")(134,"code",12),e.EFF(135,'\n{\n  "$schema": "https://json.schemastore.org/swcrc",\n  "sourceMaps": true,\n  "jsc": {\n    "parser": {\n      "syntax": "typescript",\n      "decorators": true,\n      "dynamicImport": true\n    },\n    "baseUrl": "./"\n  },\n  "minify": false\n}\n'),e.k0s()(),e.j41(136,"h4",16)(137,"span"),e.EFF(138,"Monorepo"),e.k0s()(),e.j41(139,"p"),e.EFF(140,"If your repository is a monorepo, then instead of using "),e.j41(141,"code"),e.EFF(142,"swc"),e.k0s(),e.EFF(143," builder you have to configure "),e.j41(144,"code"),e.EFF(145,"webpack"),e.k0s(),e.EFF(146," to use "),e.j41(147,"code"),e.EFF(148,"swc-loader"),e.k0s(),e.EFF(149,"."),e.k0s(),e.j41(150,"p"),e.EFF(151,"First, let's install the required package:"),e.k0s(),e.j41(152,"pre")(153,"code",9),e.EFF(154,"\n$ npm i --save-dev swc-loader\n"),e.k0s()(),e.j41(155,"p"),e.EFF(156,"Once the installation is complete, create a "),e.j41(157,"code"),e.EFF(158,"webpack.config.js"),e.k0s(),e.EFF(159," file in the root directory of your application with the following content:"),e.k0s(),e.j41(160,"pre")(161,"code",17),e.EFF(162,"\nconst swcDefaultConfig = require('@nestjs/cli/lib/compiler/defaults/swc-defaults').swcDefaultsFactory().swcOptions;\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'swc-loader',\n          options: swcDefaultConfig,\n        },\n      },\n    ],\n  },\n};\n"),e.k0s()(),e.j41(163,"h4",18)(164,"span"),e.EFF(165,"Monorepo and CLI plugins"),e.k0s()(),e.j41(166,"p"),e.EFF(167,"Now if you use CLI plugins, "),e.j41(168,"code"),e.EFF(169,"swc-loader"),e.k0s(),e.EFF(170," will not load them automatically. Instead, you have to create a separate file that will load them manually. To do so,\ndeclare a "),e.j41(171,"code"),e.EFF(172,"generate-metadata.ts"),e.k0s(),e.EFF(173," file near the "),e.j41(174,"code"),e.EFF(175,"main.ts"),e.k0s(),e.EFF(176," file with the following content:"),e.k0s(),e.j41(177,"app-copy-button")(178,"pre")(179,"code",19),e.EFF(180,"\nimport { PluginMetadataGenerator } from '@nestjs/cli/lib/compiler/plugins/plugin-metadata-generator';\nimport { ReadonlyVisitor } from '@nestjs/swagger/dist/plugin';\n\nconst generator = new PluginMetadataGenerator();\ngenerator.generate({\n  visitors: [new ReadonlyVisitor({ introspectComments: true, pathToSource: __dirname })],\n  outputDir: __dirname,\n  watch: true,\n  tsconfigPath: 'apps/<name>/tsconfig.app.json',\n});\n"),e.k0s()()(),e.j41(181,"blockquote",7)(182,"strong"),e.EFF(183,"Hint"),e.k0s(),e.EFF(184," In this example we used "),e.j41(185,"code"),e.EFF(186,"@nestjs/swagger"),e.k0s(),e.EFF(187," plugin, but you can use any plugin of your choice.\n"),e.k0s(),e.j41(188,"p"),e.EFF(189,"The "),e.j41(190,"code"),e.EFF(191,"generate()"),e.k0s(),e.EFF(192," method accepts the following options:"),e.k0s(),e.j41(193,"table"),e.nrm(194,"thead"),e.j41(195,"tbody")(196,"tr")(197,"td")(198,"code"),e.EFF(199,"watch"),e.k0s()(),e.j41(200,"td"),e.EFF(201,"Whether to watch the project for changes."),e.k0s()(),e.j41(202,"tr")(203,"td")(204,"code"),e.EFF(205,"tsconfigPath"),e.k0s()(),e.j41(206,"td"),e.EFF(207,"Path to the "),e.j41(208,"code"),e.EFF(209,"tsconfig.json"),e.k0s(),e.EFF(210," file. Relative to the current working directory ("),e.j41(211,"code"),e.EFF(212,"process.cwd()"),e.k0s(),e.EFF(213,")."),e.k0s()(),e.j41(214,"tr")(215,"td")(216,"code"),e.EFF(217,"outputDir"),e.k0s()(),e.j41(218,"td"),e.EFF(219,"Path to the directory where the metadata file will be saved."),e.k0s()(),e.j41(220,"tr")(221,"td")(222,"code"),e.EFF(223,"visitors"),e.k0s()(),e.j41(224,"td"),e.EFF(225,"An array of visitors that will be used to generate metadata."),e.k0s()(),e.j41(226,"tr")(227,"td")(228,"code"),e.EFF(229,"filename"),e.k0s()(),e.j41(230,"td"),e.EFF(231,"The name of the metadata file. Defaults to "),e.j41(232,"code"),e.EFF(233,"metadata.ts"),e.k0s(),e.EFF(234,"."),e.k0s()(),e.j41(235,"tr")(236,"td")(237,"code"),e.EFF(238,"printDiagnostics"),e.k0s()(),e.j41(239,"td"),e.EFF(240,"Whether to print diagnostics to the console. Defaults to "),e.j41(241,"code"),e.EFF(242,"true"),e.k0s(),e.EFF(243,"."),e.k0s()()()(),e.j41(244,"p"),e.EFF(245,"Finally, you can run the "),e.j41(246,"code"),e.EFF(247,"generate-metadata"),e.k0s(),e.EFF(248," script in a separate terminal window with the following command:"),e.k0s(),e.j41(249,"pre")(250,"code",9),e.EFF(251,"\n$ npx ts-node src/generate-metadata.ts\n# OR npx ts-node apps/{YOUR_APP}/src/generate-metadata.ts\n"),e.k0s()(),e.j41(252,"h4",20)(253,"span"),e.EFF(254,"Common pitfalls"),e.k0s()(),e.j41(255,"p"),e.EFF(256,"If you use TypeORM/MikroORM or any other ORM in your application, you may stumble upon circular import issues. SWC doesn't handle "),e.j41(257,"strong"),e.EFF(258,"circular imports"),e.k0s(),e.EFF(259," well, so you should use the following workaround:"),e.k0s(),e.j41(260,"app-copy-button")(261,"pre")(262,"code",21),e.EFF(263,'\n@Entity()\nexport class User {\n  @OneToOne(() => Profile, (profile) => profile.user)\n  profile: Relation<Profile>; // <--- see "Relation<>" type here instead of just "Profile"\n}\n'),e.k0s()()(),e.j41(264,"blockquote",7)(265,"strong"),e.EFF(266,"Hint"),e.k0s(),e.j41(267,"code"),e.EFF(268,"Relation"),e.k0s(),e.EFF(269," type is exported from the "),e.j41(270,"code"),e.EFF(271,"typeorm"),e.k0s(),e.EFF(272," package.\n"),e.k0s(),e.j41(273,"p"),e.EFF(274,"Doing this prevents the type of the property from being saved in the transpiled code in the property metadata, preventing circular dependency issues."),e.k0s(),e.j41(275,"p"),e.EFF(276,"If your ORM does not provide a similar workaround, you can define the wrapper type yourself:"),e.k0s(),e.j41(277,"app-copy-button")(278,"pre")(279,"code",21),e.EFF(280,"\n/**\n * Wrapper type used to circumvent ESM modules circular dependency issue\n * caused by reflection metadata saving the type of the property.\n */\nexport type WrapperType<T> = T; // WrapperType === Relation\n"),e.k0s()()(),e.j41(281,"p"),e.EFF(282,"For all "),e.j41(283,"a",22),e.EFF(284,"circular dependency injections"),e.k0s(),e.EFF(285," in your project, you will also need to use the custom wrapper type described above:"),e.k0s(),e.j41(286,"app-copy-button")(287,"pre")(288,"code",21),e.EFF(289,"\n@Injectable()\nexport class UserService {\n  constructor(\n    @Inject(forwardRef(() => ProfileService))\n    private readonly profileService: WrapperType<ProfileService>,\n  ) {};\n}\n"),e.k0s()()(),e.j41(290,"h3",23),e.EFF(291,"Jest + SWC"),e.k0s(),e.j41(292,"p"),e.EFF(293,"To use SWC with Jest, you need to install the following packages:"),e.k0s(),e.j41(294,"pre")(295,"code",9),e.EFF(296,"\n$ npm i --save-dev jest @swc/core @swc/jest\n"),e.k0s()(),e.j41(297,"p"),e.EFF(298,"Once the installation is complete, update the "),e.j41(299,"code"),e.EFF(300,"package.json"),e.k0s(),e.EFF(301,"/"),e.j41(302,"code"),e.EFF(303,"jest.config.js"),e.k0s(),e.EFF(304," file (depending on your configuration) with the following content:"),e.k0s(),e.j41(305,"pre")(306,"code",12),e.EFF(307,'\n{\n  "jest": {\n    "transform": {\n      "^.+\\\\.(t|j)s?$": ["@swc/jest"]\n    }\n  }\n}\n'),e.k0s()(),e.j41(308,"p"),e.EFF(309,"Additionally you would need to add the following "),e.j41(310,"code"),e.EFF(311,"transform"),e.k0s(),e.EFF(312," properties to your "),e.j41(313,"code"),e.EFF(314,".swcrc"),e.k0s(),e.EFF(315," file: "),e.j41(316,"code"),e.EFF(317,"legacyDecorator"),e.k0s(),e.EFF(318,", "),e.j41(319,"code"),e.EFF(320,"decoratorMetadata"),e.k0s(),e.EFF(321,":"),e.k0s(),e.j41(322,"pre")(323,"code",12),e.EFF(324,'\n{\n  "$schema": "https://json.schemastore.org/swcrc",\n  "sourceMaps": true,\n  "jsc": {\n    "parser": {\n      "syntax": "typescript",\n      "decorators": true,\n      "dynamicImport": true\n    },\n    "transform": {\n      "legacyDecorator": true,\n      "decoratorMetadata": true\n    },\n    "baseUrl": "./"\n  },\n  "minify": false\n}\n'),e.k0s()(),e.j41(325,"p"),e.EFF(326,"If you use NestJS CLI Plugins in your project, you'll have to run "),e.j41(327,"code"),e.EFF(328,"PluginMetadataGenerator"),e.k0s(),e.EFF(329," manually. Navigate to "),e.j41(330,"a",24),e.EFF(331,"this section"),e.k0s(),e.EFF(332," to learn more."),e.k0s(),e.j41(333,"h3",25),e.EFF(334,"Vitest"),e.k0s(),e.j41(335,"p")(336,"a",26),e.EFF(337,"Vitest"),e.k0s(),e.EFF(338," is a fast and lightweight test runner designed to work with Vite. It provides a modern, fast, and easy-to-use testing solution that can be integrated with NestJS projects."),e.k0s(),e.j41(339,"h4",27)(340,"span"),e.EFF(341,"Installation"),e.k0s()(),e.j41(342,"p"),e.EFF(343,"To get started, first install the required packages:"),e.k0s(),e.j41(344,"pre")(345,"code",9),e.EFF(346,"\n$ npm i --save-dev vitest unplugin-swc @swc/core @vitest/coverage-v8\n"),e.k0s()(),e.j41(347,"h4",28)(348,"span"),e.EFF(349,"Configuration"),e.k0s()(),e.j41(350,"p"),e.EFF(351,"Create a "),e.j41(352,"code"),e.EFF(353,"vitest.config.ts"),e.k0s(),e.EFF(354," file in the root directory of your application with the following content:"),e.k0s(),e.j41(355,"app-copy-button")(356,"pre")(357,"code",19),e.EFF(358,"\nimport swc from 'unplugin-swc';\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    globals: true,\n    root: './',\n  },\n  plugins: [\n    // This is required to build the test files with SWC\n    swc.vite({\n      // Explicitly set the module type to avoid inheriting this value from a `.swcrc` config file\n      module: { type: 'es6' },\n    }),\n  ],\n});\n"),e.k0s()()(),e.j41(359,"p"),e.EFF(360,"This configuration file sets up the Vitest environment, root directory, and SWC plugin. You should also create a separate configuration\nfile for e2e tests, with an additional "),e.j41(361,"code"),e.EFF(362,"include"),e.k0s(),e.EFF(363," field that specifies the test path regex:"),e.k0s(),e.j41(364,"app-copy-button")(365,"pre")(366,"code",19),e.EFF(367,"\nimport swc from 'unplugin-swc';\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    include: ['**/*.e2e-spec.ts'],\n    globals: true,\n    root: './',\n  },\n  plugins: [swc.vite()],\n});\n"),e.k0s()()(),e.j41(368,"p"),e.EFF(369,"Additionally, you can set the "),e.j41(370,"code"),e.EFF(371,"alias"),e.k0s(),e.EFF(372," options to support TypeScript paths in your tests:"),e.k0s(),e.j41(373,"app-copy-button")(374,"pre")(375,"code",19),e.EFF(376,"\nimport swc from 'unplugin-swc';\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    include: ['**/*.e2e-spec.ts'],\n    globals: true,\n    alias: {\n      '@src': './src',\n      '@test': './test',\n    },\n    root: './',\n  },\n  resolve: {\n    alias: {\n      '@src': './src',\n      '@test': './test',\n    },\n  },\n  plugins: [swc.vite()],\n});\n"),e.k0s()()(),e.j41(377,"h4",29)(378,"span"),e.EFF(379,"Update imports in E2E tests"),e.k0s()(),e.j41(380,"p"),e.EFF(381,"Change any E2E test imports using "),e.j41(382,"code"),e.EFF(383,"import * as request from 'supertest'"),e.k0s(),e.EFF(384," to "),e.j41(385,"code"),e.EFF(386,"import request from 'supertest'"),e.k0s(),e.EFF(387,". This is necessary because Vitest, when bundled with Vite, expects a default import for supertest. Using a namespace import may cause issues in this specific setup."),e.k0s(),e.j41(388,"p"),e.EFF(389,"Lastly, update the test scripts in your package.json file to the following:"),e.k0s(),e.j41(390,"pre")(391,"code",12),e.EFF(392,'\n{\n  "scripts": {\n    "test": "vitest run",\n    "test:watch": "vitest",\n    "test:cov": "vitest run --coverage",\n    "test:debug": "vitest --inspect-brk --inspect --logHeapUsage --threads=false",\n    "test:e2e": "vitest run --config ./vitest.config.e2e.ts"\n  }\n}\n'),e.k0s()(),e.j41(393,"p"),e.EFF(394,"These scripts configure Vitest for running tests, watching for changes, generating code coverage reports, and debugging. The test:e2e script is specifically for running E2E tests with a custom configuration file."),e.k0s(),e.j41(395,"p"),e.EFF(396,"With this setup, you can now enjoy the benefits of using Vitest in your NestJS project, including faster test execution and a more modern testing experience."),e.k0s(),e.j41(397,"blockquote",7)(398,"strong"),e.EFF(399,"Hint"),e.k0s(),e.EFF(400," You can check out a working example in this "),e.j41(401,"a",30),e.EFF(402,"repository"),e.k0s()()())},dependencies:[d.a,F.z,j.Wk],encapsulation:2,changeDetection:0})}return t})(),z=(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-necord"]],features:[e.Vt3],decls:302,vars:56,consts:[["contentReference",""],["app82adc05e573fe3e0408f576792263bec23397232",""],["app76a57d62136e566d0329a86b30281256e751cc9a",""],["appff40f4f1baf4897ac3fd385b4b2301c7d266bd7c",""],["app0c1a931e2aacbf3b8f3f66e45863f41c67b4c5e0",""],["app48fa527ea376076ccae60527bf4c50d71bc7dd06",""],["app0bdaf1140aed141080abcfcbebe73f011662c9a4",""],["app091b2a225ef58ae4bb574d0d46506e9518eb5b0b",""],["appa68816c730c4d6d928ebc5255b8acd7bdf7154e2",""],["appdfc5f6cf182ec654fda613fa1b190d39eaafb4ab",""],["appebfdefa00d2622b22a37e206bf45f040a5074855",""],["app6254e693fe4de70706e07669ed8637be72f2bbf3",""],["appeb5f2a6d77fcf85451e4fba1acd6bffe63798012",""],["appbb5dd144d454c85be6bf9c0737e0f4618667f65a",""],["app2819d7935e6002557847579ead5ab49ebd970fdd",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/necord.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","necord"],["rel","nofollow","target","_blank","href","https://discord.com"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/necordjs/necord"],["appAnchor","","id","installation"],["rel","nofollow","target","_blank","href","https://discord.js.org"],[1,"language-bash"],["appAnchor","","id","usage"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://discord.com/developers/docs/topics/gateway#gateway-intents"],["id","understanding-context"],["appAnchor","","id","text-commands"],[1,"warning"],["rel","nofollow","target","_blank","href","https://support-dev.discord.com/hc/en-us/articles/4404772028055-Message-Content-Access-Deprecation-for-Verified-Bots"],["appAnchor","","id","application-commands"],["src","https://i.imgur.com/4EmG8G8.png",1,"illustrative-image"],["appAnchor","","id","slash-commands"],["id","options"],["rel","nofollow","target","_blank","href","https://necord.org/interactions/slash-commands#options"],["id","autocomplete"],["appAnchor","","id","user-context-menu"],["appAnchor","","id","message-context-menu"],["appAnchor","","id","buttons"],["rel","nofollow","target","_blank","href","https://discord.com/developers/docs/interactions/message-components#buttons"],["rel","nofollow","target","_blank","href","https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object"],["appAnchor","","id","select-menus"],["rel","nofollow","target","_blank","href","https://discord.com/developers/docs/interactions/message-components#select-menus"],["rel","nofollow","target","_blank","href","https://necord.org/interactions/message-components#select-menu"],["appAnchor","","id","modals"],["appAnchor","","id","more-information"],["rel","nofollow","target","_blank","href","https://necord.org"]],template:function(s,o){if(1&s&&(e.j41(0,"div",15,0)(2,"div",16)(3,"a",17),e.nrm(4,"i",18),e.k0s()(),e.j41(5,"h3",19),e.EFF(6,"Necord"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Necord is a powerful module that simplifies the creation of "),e.j41(9,"a",20),e.EFF(10,"Discord"),e.k0s(),e.EFF(11," bots, allowing for seamless integration with your NestJS application."),e.k0s(),e.j41(12,"blockquote",21)(13,"strong"),e.EFF(14,"Note"),e.k0s(),e.EFF(15," Necord is a third-party package and is not officially maintained by the NestJS core team. If you encounter any issues, please report them in the "),e.j41(16,"a",22),e.EFF(17,"official repository"),e.k0s(),e.EFF(18,".\n"),e.k0s(),e.j41(19,"h4",23)(20,"span"),e.EFF(21,"Installation"),e.k0s()(),e.j41(22,"p"),e.EFF(23,"To get started, you need to install Necord alongside its dependency, "),e.j41(24,"a",24)(25,"code"),e.EFF(26,"Discord.js"),e.k0s()(),e.EFF(27,"."),e.k0s(),e.j41(28,"pre")(29,"code",25),e.EFF(30,"\n$ npm install necord discord.js\n"),e.k0s()(),e.j41(31,"h4",26)(32,"span"),e.EFF(33,"Usage"),e.k0s()(),e.j41(34,"p"),e.EFF(35,"To utilize Necord in your project, import the "),e.j41(36,"code"),e.EFF(37,"NecordModule"),e.k0s(),e.EFF(38," and configure it with the necessary options."),e.k0s(),e.j41(39,"app-copy-button",27)(40,"span",28),e.EFF(41),e.nI1(42,"extension"),e.nrm(43,"app-tabs",null,1),e.k0s(),e.j41(45,"pre")(46,"code",29),e.EFF(47,"\nimport { Module } from '@nestjs/common';\nimport { NecordModule } from 'necord';\nimport { IntentsBitField } from 'discord.js';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [\n    NecordModule.forRoot({\n      token: process.env.DISCORD_TOKEN,\n      intents: [IntentsBitField.Guilds],\n      development: [process.env.DISCORD_DEVELOPMENT_GUILD_ID],\n    }),\n  ],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.k0s()()(),e.j41(48,"blockquote",21)(49,"strong"),e.EFF(50,"Hint"),e.k0s(),e.EFF(51," You can find a comprehensive list of available intents "),e.j41(52,"a",30),e.EFF(53,"here"),e.k0s(),e.EFF(54,".\n"),e.k0s(),e.j41(55,"p"),e.EFF(56,"With this setup, you can inject the "),e.j41(57,"code"),e.EFF(58,"AppService"),e.k0s(),e.EFF(59," into your providers to easily register commands, events, and more."),e.k0s(),e.j41(60,"app-copy-button",27)(61,"span",28),e.EFF(62),e.nI1(63,"extension"),e.nrm(64,"app-tabs",null,2),e.k0s(),e.j41(66,"pre")(67,"code",29),e.EFF(68,"\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Context, On, Once, ContextOf } from 'necord';\nimport { Client } from 'discord.js';\n\n@Injectable()\nexport class AppService {\n  private readonly logger = new Logger(AppService.name);\n\n  @Once('ready')\n  public onReady(@Context() [client]: ContextOf<'ready'>) {\n    this.logger.log(`Bot logged in as ${client.user.username}`);\n  }\n\n  @On('warn')\n  public onWarn(@Context() [message]: ContextOf<'warn'>) {\n    this.logger.warn(message);\n  }\n}\n"),e.k0s()()(),e.j41(69,"h5",31),e.EFF(70,"Understanding context"),e.k0s(),e.j41(71,"p"),e.EFF(72,"You may have noticed the "),e.j41(73,"code"),e.EFF(74,"@Context"),e.k0s(),e.EFF(75," decorator in the examples above. This decorator injects the event context into your method, allowing you to access various event-specific data. Since there are multiple types of events, the context type is inferred using the "),e.j41(76,"code"),e.EFF(77,"ContextOf<type: string>"),e.k0s(),e.EFF(78," type. You can easily access context variables by using the "),e.j41(79,"code"),e.EFF(80,"@Context()"),e.k0s(),e.EFF(81," decorator, which fills the variable with an array of arguments relevant to the event."),e.k0s(),e.j41(82,"h4",32)(83,"span"),e.EFF(84,"Text commands"),e.k0s()(),e.j41(85,"blockquote",33)(86,"strong"),e.EFF(87,"Caution"),e.k0s(),e.EFF(88," Text commands rely on message content, which is set to be deprecated for verified bots and applications with over 100 servers. This means that if your bot is unable to access message content, text commands will not function. Read more about this change "),e.j41(89,"a",34),e.EFF(90,"here"),e.k0s(),e.EFF(91,".\n"),e.k0s(),e.j41(92,"p"),e.EFF(93,"Here's how to create a simple command handler for messages using the "),e.j41(94,"code"),e.EFF(95,"@TextCommand"),e.k0s(),e.EFF(96," decorator."),e.k0s(),e.j41(97,"app-copy-button",27)(98,"span",28),e.EFF(99),e.nI1(100,"extension"),e.nrm(101,"app-tabs",null,3),e.k0s(),e.j41(103,"pre")(104,"code",29),e.EFF(105,"\nimport { Injectable } from '@nestjs/common';\nimport { Context, TextCommand, TextCommandContext, Arguments } from 'necord';\n\n@Injectable()\nexport class AppCommands {\n  @TextCommand({\n    name: 'ping',\n    description: 'Responds with pong!',\n  })\n  public onPing(\n    @Context() [message]: TextCommandContext,\n    @Arguments() args: string[],\n  ) {\n    return message.reply('pong!');\n  }\n}\n"),e.k0s()()(),e.j41(106,"h4",35)(107,"span"),e.EFF(108,"Application commands"),e.k0s()(),e.j41(109,"p"),e.EFF(110,"Application commands provide a native way for users to interact with your app within the Discord client. There are three types of application commands that can be accessed through different interfaces: chat input, message context menu (accessed by right-clicking a message), and user context menu (accessed by right-clicking a user)."),e.k0s(),e.j41(111,"figure"),e.nrm(112,"img",36),e.k0s(),e.j41(113,"h4",37)(114,"span"),e.EFF(115,"Slash commands"),e.k0s()(),e.j41(116,"p"),e.EFF(117,"Slash commands are an excellent way to engage with users in a structured manner. They allow you to create commands with precise arguments and options, enhancing the user experience significantly."),e.k0s(),e.j41(118,"p"),e.EFF(119,"To define a slash command using Necord, you can use the "),e.j41(120,"code"),e.EFF(121,"SlashCommand"),e.k0s(),e.EFF(122," decorator."),e.k0s(),e.j41(123,"app-copy-button",27)(124,"span",28),e.EFF(125),e.nI1(126,"extension"),e.nrm(127,"app-tabs",null,4),e.k0s(),e.j41(129,"pre")(130,"code",29),e.EFF(131,"\nimport { Injectable } from '@nestjs/common';\nimport { Context, SlashCommand, SlashCommandContext } from 'necord';\n\n@Injectable()\nexport class AppCommands {\n  @SlashCommand({\n    name: 'ping',\n    description: 'Responds with pong!',\n  })\n  public async onPing(@Context() [interaction]: SlashCommandContext) {\n    return interaction.reply({ content: 'Pong!' });\n  }\n}\n"),e.k0s()()(),e.j41(132,"blockquote",21)(133,"strong"),e.EFF(134,"Hint"),e.k0s(),e.EFF(135," When your bot client logs in, it will automatically register all defined commands. Note that global commands are cached for up to an hour. To avoid issues with the global cache, utilize the "),e.j41(136,"code"),e.EFF(137,"development"),e.k0s(),e.EFF(138," argument in the Necord module, which restricts command visibility to a single guild.\n"),e.k0s(),e.j41(139,"h5",38),e.EFF(140,"Options"),e.k0s(),e.j41(141,"p"),e.EFF(142,"You can define parameters for your slash commands using option decorators. Let's create a "),e.j41(143,"code"),e.EFF(144,"TextDto"),e.k0s(),e.EFF(145," class for this purpose:"),e.k0s(),e.j41(146,"app-copy-button",27)(147,"span",28),e.EFF(148),e.nI1(149,"extension"),e.nrm(150,"app-tabs",null,5),e.k0s(),e.j41(152,"pre")(153,"code",29),e.EFF(154,"\nimport { StringOption } from 'necord';\n\nexport class TextDto {\n  @StringOption({\n    name: 'text',\n    description: 'Input your text here',\n    required: true,\n  })\n  text: string;\n}\n"),e.k0s()()(),e.j41(155,"p"),e.EFF(156,"You can then use this DTO in the "),e.j41(157,"code"),e.EFF(158,"AppCommands"),e.k0s(),e.EFF(159," class:"),e.k0s(),e.j41(160,"app-copy-button",27)(161,"span",28),e.EFF(162),e.nI1(163,"extension"),e.nrm(164,"app-tabs",null,6),e.k0s(),e.j41(166,"pre")(167,"code",29),e.EFF(168,"\nimport { Injectable } from '@nestjs/common';\nimport { Context, SlashCommand, Options, SlashCommandContext } from 'necord';\nimport { TextDto } from './length.dto';\n\n@Injectable()\nexport class AppCommands {\n  @SlashCommand({\n    name: 'length',\n    description: 'Calculate the length of your text',\n  })\n  public async onLength(\n    @Context() [interaction]: SlashCommandContext,\n    @Options() { text }: TextDto,\n  ) {\n    return interaction.reply({\n      content: `The length of your text is: ${text.length}`,\n    });\n  }\n}\n"),e.k0s()()(),e.j41(169,"p"),e.EFF(170,"For a complete list of built-in option decorators, check out "),e.j41(171,"a",39),e.EFF(172,"this documentation"),e.k0s(),e.EFF(173,"."),e.k0s(),e.j41(174,"h5",40),e.EFF(175,"Autocomplete"),e.k0s(),e.j41(176,"p"),e.EFF(177,"To implement autocomplete functionality for your slash commands, you'll need to create an interceptor. This interceptor will handle requests as users type in the autocomplete field."),e.k0s(),e.j41(178,"app-copy-button",27)(179,"span",28),e.EFF(180),e.nI1(181,"extension"),e.nrm(182,"app-tabs",null,7),e.k0s(),e.j41(184,"pre")(185,"code",29),e.EFF(186,"\nimport { Injectable } from '@nestjs/common';\nimport { AutocompleteInteraction } from 'discord.js';\nimport { AutocompleteInterceptor } from 'necord';\n\n@Injectable()\nclass CatsAutocompleteInterceptor extends AutocompleteInterceptor {\n  public transformOptions(interaction: AutocompleteInteraction) {\n    const focused = interaction.options.getFocused(true);\n    let choices: string[];\n\n    if (focused.name === 'cat') {\n      choices = ['Siamese', 'Persian', 'Maine Coon'];\n    }\n\n    return interaction.respond(\n      choices\n        .filter((choice) => choice.startsWith(focused.value.toString()))\n        .map((choice) => ({ name: choice, value: choice })),\n    );\n  }\n}\n"),e.k0s()()(),e.j41(187,"p"),e.EFF(188,"You will also need to mark your options class with "),e.j41(189,"code"),e.EFF(190,"autocomplete: true"),e.k0s(),e.EFF(191,":"),e.k0s(),e.j41(192,"app-copy-button",27)(193,"span",28),e.EFF(194),e.nI1(195,"extension"),e.nrm(196,"app-tabs",null,8),e.k0s(),e.j41(198,"pre")(199,"code",29),e.EFF(200,"\nimport { StringOption } from 'necord';\n\nexport class CatDto {\n  @StringOption({\n    name: 'cat',\n    description: 'Choose a cat breed',\n    autocomplete: true,\n    required: true,\n  })\n  cat: string;\n}\n"),e.k0s()()(),e.j41(201,"p"),e.EFF(202,"Finally, apply the interceptor to your slash command:"),e.k0s(),e.j41(203,"app-copy-button",27)(204,"span",28),e.EFF(205),e.nI1(206,"extension"),e.nrm(207,"app-tabs",null,9),e.k0s(),e.j41(209,"pre")(210,"code",29),e.EFF(211,"\nimport { Injectable, UseInterceptors } from '@nestjs/common';\nimport { Context, SlashCommand, Options, SlashCommandContext } from 'necord';\nimport { CatDto } from '/cat.dto';\nimport { CatsAutocompleteInterceptor } from './cats-autocomplete.interceptor';\n\n@Injectable()\nexport class CatsCommands {\n  @UseInterceptors(CatsAutocompleteInterceptor)\n  @SlashCommand({\n    name: 'cat',\n    description: 'Retrieve information about a specific cat breed',\n  })\n  public async onSearch(\n    @Context() [interaction]: SlashCommandContext,\n    @Options() { cat }: CatDto,\n  ) {\n    return interaction.reply({\n      content: `I found information on the breed of ${cat} cat!`,\n    });\n  }\n}\n"),e.k0s()()(),e.j41(212,"h4",41)(213,"span"),e.EFF(214,"User context menu"),e.k0s()(),e.j41(215,"p"),e.EFF(216,"User commands appear on the context menu that appears when right-clicking (or tapping) on users. These commands provide quick actions that target users directly."),e.k0s(),e.j41(217,"app-copy-button",27)(218,"span",28),e.EFF(219),e.nI1(220,"extension"),e.nrm(221,"app-tabs",null,10),e.k0s(),e.j41(223,"pre")(224,"code",29),e.EFF(225,"\nimport { Injectable } from '@nestjs/common';\nimport { Context, UserCommand, UserCommandContext, TargetUser } from 'necord';\nimport { User } from 'discord.js';\n\n@Injectable()\nexport class AppCommands {\n  @UserCommand({ name: 'Get avatar' })\n  public async getUserAvatar(\n    @Context() [interaction]: UserCommandContext,\n    @TargetUser() user: User,\n  ) {\n    return interaction.reply({\n      embeds: [\n        new MessageEmbed()\n          .setTitle(`Avatar of ${user.username}`)\n          .setImage(user.displayAvatarURL({ size: 4096, dynamic: true })),\n      ],\n    });\n  }\n}\n"),e.k0s()()(),e.j41(226,"h4",42)(227,"span"),e.EFF(228,"Message context menu"),e.k0s()(),e.j41(229,"p"),e.EFF(230,"Message commands show up in the context menu when right-clicking on messages, allowing for quick actions relevant to those messages."),e.k0s(),e.j41(231,"app-copy-button",27)(232,"span",28),e.EFF(233),e.nI1(234,"extension"),e.nrm(235,"app-tabs",null,11),e.k0s(),e.j41(237,"pre")(238,"code",29),e.EFF(239,"\nimport { Injectable } from '@nestjs/common';\nimport { Context, MessageCommand, MessageCommandContext, TargetMessage } from 'necord';\nimport { Message } from 'discord.js';\n\n@Injectable()\nexport class AppCommands {\n  @MessageCommand({ name: 'Copy Message' })\n  public async copyMessage(\n    @Context() [interaction]: MessageCommandContext,\n    @TargetMessage() message: Message,\n  ) {\n    return interaction.reply({ content: message.content });\n  }\n}\n"),e.k0s()()(),e.j41(240,"h4",43)(241,"span"),e.EFF(242,"Buttons"),e.k0s()(),e.j41(243,"p")(244,"a",44),e.EFF(245,"Buttons"),e.k0s(),e.EFF(246," are interactive elements that can be included in messages. When clicked, they send an "),e.j41(247,"a",45),e.EFF(248,"interaction"),e.k0s(),e.EFF(249," to your application."),e.k0s(),e.j41(250,"app-copy-button",27)(251,"span",28),e.EFF(252),e.nI1(253,"extension"),e.nrm(254,"app-tabs",null,12),e.k0s(),e.j41(256,"pre")(257,"code",29),e.EFF(258,"\nimport { Injectable } from '@nestjs/common';\nimport { Context, Button, ButtonContext } from 'necord';\n\n@Injectable()\nexport class AppComponents {\n  @Button('BUTTON')\n  public onButtonClick(@Context() [interaction]: ButtonContext) {\n    return interaction.reply({ content: 'Button clicked!' });\n  }\n}\n"),e.k0s()()(),e.j41(259,"h4",46)(260,"span"),e.EFF(261,"Select menus"),e.k0s()(),e.j41(262,"p")(263,"a",47),e.EFF(264,"Select menus"),e.k0s(),e.EFF(265," are another type of interactive component that appears on messages. They provide a dropdown-like UI for users to select options."),e.k0s(),e.j41(266,"app-copy-button",27)(267,"span",28),e.EFF(268),e.nI1(269,"extension"),e.nrm(270,"app-tabs",null,13),e.k0s(),e.j41(272,"pre")(273,"code",29),e.EFF(274,"\nimport { Injectable } from '@nestjs/common';\nimport { Context, StringSelect, StringSelectContext, SelectedStrings } from 'necord';\n\n@Injectable()\nexport class AppComponents {\n  @StringSelect('SELECT_MENU')\n  public onSelectMenu(\n    @Context() [interaction]: StringSelectContext,\n    @SelectedStrings() values: string[],\n  ) {\n    return interaction.reply({ content: `You selected: ${values.join(', ')}` });\n  }\n}\n"),e.k0s()()(),e.j41(275,"p"),e.EFF(276,"For a full list of built-in select menu components, visit "),e.j41(277,"a",48),e.EFF(278,"this link"),e.k0s(),e.EFF(279,"."),e.k0s(),e.j41(280,"h4",49)(281,"span"),e.EFF(282,"Modals"),e.k0s()(),e.j41(283,"p"),e.EFF(284,"Modals are pop-up forms that allow users to submit formatted input. Here's how to create and handle modals using Necord:"),e.k0s(),e.j41(285,"app-copy-button",27)(286,"span",28),e.EFF(287),e.nI1(288,"extension"),e.nrm(289,"app-tabs",null,14),e.k0s(),e.j41(291,"pre")(292,"code",29),e.EFF(293,"\nimport { Injectable } from '@nestjs/common';\nimport { Context, Modal, ModalContext } from 'necord';\n\n@Injectable()\nexport class AppModals {\n  @Modal('pizza')\n  public onModal(@Context() [interaction]: ModalContext) {\n    return interaction.reply({\n      content: `Your fav pizza : ${interaction.fields.getTextInputValue('pizza')}`\n    });\n  }\n}\n"),e.k0s()()(),e.j41(294,"h4",50)(295,"span"),e.EFF(296,"More information"),e.k0s()(),e.j41(297,"p"),e.EFF(298,"Visit the "),e.j41(299,"a",51),e.EFF(300,"Necord"),e.k0s(),e.EFF(301," website for more information."),e.k0s()()),2&s){const a=e.sdS(44),i=e.sdS(65),c=e.sdS(102),p=e.sdS(128),r=e.sdS(151),u=e.sdS(165),h=e.sdS(183),E=e.sdS(197),k=e.sdS(208),v=e.sdS(222),b=e.sdS(236),w=e.sdS(255),y=e.sdS(271),S=e.sdS(290);e.R7$(41),e.SpI(" ",e.i5U(42,14,"app.module",a.isJsActive),"\n"),e.R7$(21),e.SpI(" ",e.i5U(63,17,"app.service",i.isJsActive),"\n"),e.R7$(37),e.SpI(" ",e.i5U(100,20,"app.commands",c.isJsActive),"\n"),e.R7$(26),e.SpI(" ",e.i5U(126,23,"app.commands",p.isJsActive),"\n"),e.R7$(23),e.SpI(" ",e.i5U(149,26,"text.dto",r.isJsActive),"\n"),e.R7$(14),e.SpI(" ",e.i5U(163,29,"app.commands",u.isJsActive),"\n"),e.R7$(18),e.SpI(" ",e.i5U(181,32,"cats-autocomplete.interceptor",h.isJsActive),"\n"),e.R7$(14),e.SpI(" ",e.i5U(195,35,"cat.dto",E.isJsActive),"\n"),e.R7$(11),e.SpI(" ",e.i5U(206,38,"cats.commands",k.isJsActive),"\n"),e.R7$(14),e.SpI(" ",e.i5U(220,41,"app.commands",v.isJsActive),"\n"),e.R7$(14),e.SpI(" ",e.i5U(234,44,"app.commands",b.isJsActive),"\n"),e.R7$(19),e.SpI(" ",e.i5U(253,47,"app.components",w.isJsActive),"\n"),e.R7$(16),e.SpI(" ",e.i5U(269,50,"app.components",y.isJsActive),"\n"),e.R7$(19),e.SpI(" ",e.i5U(288,53,"app.modals",S.isJsActive),"\n")}},dependencies:[g.O,d.a,F.z,f.M],encapsulation:2,changeDetection:0})}return t})();var Q=m(9909);const Y=[{path:"mikroorm",component:q,data:{title:"MikroORM"}},{path:"sql-typeorm",component:$,data:{title:"SQL (TypeORM)"}},{path:"mongodb",component:H,data:{title:"MongoDB (Mongoose)"}},{path:"sql-sequelize",component:L,data:{title:"SQL (Sequelize)"}},{path:"cqrs",component:R,data:{title:"CQRS"}},{path:"swagger",redirectTo:"/openapi/introduction"},{path:"prisma",component:D,data:{title:"Prisma"}},{path:"terminus",component:N,data:{title:"Health checks (Terminus)"}},{path:"documentation",component:P,data:{title:"Documentation (Compodoc)"}},{path:"crud-utilities",redirectTo:"/recipes/crud-generator"},{path:"crud",redirectTo:"/recipes/crud-generator"},{path:"crud-generator",component:M,data:{title:"CRUD generator"}},{path:"hot-reload",component:U,data:{title:"Hot reload"}},{path:"serve-static",component:O,data:{title:"Serve static"}},{path:"router-module",component:_,data:{title:"Router module"}},{path:"nest-commander",component:W,data:{title:"Nest Commander"}},{path:"async-local-storage",component:G,data:{title:"Async Local Storage"}},{path:"repl",component:J,data:{title:"REPL"}},{path:"swc",component:V,data:{title:"SWC (fast compiler)"}},{path:"automock",redirectTo:"/recipes/suites"},{path:"suites",component:B,data:{title:"Suites (Automock)"}},{path:"necord",component:z,data:{title:"Necord"}},{path:"passport",component:(()=>{class t extends l.y{static \u0275fac=(()=>{let n;return function(o){return(n||(n=e.xGo(t)))(o||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-passport"]],features:[e.Vt3],decls:1235,vars:122,consts:[["contentReference",""],["appd1e1606e9a2e8868388284dd1185a0a55fe312c2",""],["app0c212dacde6d658d2251cc363fccf90d1e1be012",""],["app892cfa600e5189aeb257cd59a87afcc5c525ba60",""],["appd4e37a65c0022b5cc27445e34af11a4a83f65815",""],["app63c20569ef7911d2a9614e93c0a23888198d68f4",""],["app0cb961cdac833ba2e6482da7fd7b9d8ab1be7cd8",""],["app4fd5ebbaeb93f578863b2000d5237d785e655980",""],["app9afb9dca3e4e1a83844fb1abea5297013e05f76f",""],["appc23c2621dee38df36b73e96e6bdc8eabb0ce82c6",""],["app422962d48fc15d481965944d4e3ce5846c7c3aac",""],["app863cf9b0875545516480e03837c6015a797bb778",""],["appfa398121653aade8a100347abad66de0edb0c859",""],["app48f8f26a358dfaa14163614722ac152928c0c893",""],["appa35529bc77e91be520e0059bf084438ae3f48e39",""],["app71e6447d0288e8fa8d0797f50a0c37deb04de66b",""],["appb57219605a7271f056fc790885f106b8edbf9362",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/passport.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","passport-authentication"],["rel","nofollow","target","_blank","href","https://github.com/jaredhanson/passport"],["rel","nofollow","target","_blank","href","https://jwt.io/"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/session"],["rel","nofollow","target","_blank","href","http://www.passportjs.org/"],["appAnchor","","id","authentication-requirements"],["rel","nofollow","target","_blank","href","https://tools.ietf.org/html/rfc6750"],["rel","nofollow","target","_blank","href","https://github.com/jaredhanson/passport-local"],[1,"language-bash"],[1,"warning"],["appAnchor","","id","implementing-passport-strategies"],[1,"with-heading"],[1,"filename"],[1,"language-typescript"],[1,"Warning"],["rel","nofollow","target","_blank","href","https://github.com/kelektiv/node.bcrypt.js#readme"],["appAnchor","","id","implementing-passport-local"],[1,"info"],["rel","nofollow","target","_blank","href","http://www.passportjs.org/docs/configure/"],["href","exception-filters"],["appAnchor","","id","built-in-passport-guards"],["href","guards"],["appAnchor","","id","login-route"],["rel","nofollow","target","_blank","href","https://curl.haxx.se/"],["appAnchor","","id","logout-route"],["appAnchor","","id","jwt-functionality"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/jwt"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/jwt/blob/master/README.md"],["rel","nofollow","target","_blank","href","https://github.com/auth0/node-jsonwebtoken#usage"],["appAnchor","","id","implementing-passport-jwt"],["rel","nofollow","target","_blank","href","https://github.com/mikenicholson/passport-jwt"],["rel","nofollow","target","_blank","href","https://github.com/mikenicholson/passport-jwt#configure-strategy"],["rel","nofollow","target","_blank","href","https://github.com/mikenicholson/passport-jwt#extracting-the-jwt-from-the-request"],["appAnchor","","id","implement-protected-route-and-jwt-strategy-guards"],["appAnchor","","id","extending-guards"],["appAnchor","","id","enable-authentication-globally"],["href","/guards#binding-guards"],["href","/guards#putting-it-all-together"],["appAnchor","","id","request-scoped-strategies"],["routerLink","/fundamentals/injection-scopes"],["routerLink","/fundamentals/module-ref"],["href","/fundamentals/module-ref#getting-current-sub-tree"],["appAnchor","","id","customize-passport"],["rel","nofollow","target","_blank","href","http://www.passportjs.org/docs/oauth/"],["appAnchor","","id","named-strategies"],["appAnchor","","id","graphql"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/graphql/quick-start"]],template:function(s,o){if(1&s&&(e.j41(0,"div",17,0)(2,"div",18)(3,"a",19),e.nrm(4,"i",20),e.k0s()(),e.j41(5,"h3",21),e.EFF(6,"Passport (authentication)"),e.k0s(),e.j41(7,"p")(8,"a",22),e.EFF(9,"Passport"),e.k0s(),e.EFF(10," is the most popular node.js authentication library, well-known by the community and successfully used in many production applications. It's straightforward to integrate this library with a "),e.j41(11,"strong"),e.EFF(12,"Nest"),e.k0s(),e.EFF(13," application using the "),e.j41(14,"code"),e.EFF(15,"@nestjs/passport"),e.k0s(),e.EFF(16," module. At a high level, Passport executes a series of steps to:"),e.k0s(),e.j41(17,"ul")(18,"li"),e.EFF(19,'Authenticate a user by verifying their "credentials" (such as username/password, JSON Web Token ('),e.j41(20,"a",23),e.EFF(21,"JWT"),e.k0s(),e.EFF(22,"), or identity token from an Identity Provider)"),e.k0s(),e.j41(23,"li"),e.EFF(24,"Manage authenticated state (by issuing a portable token, such as a JWT, or creating an "),e.j41(25,"a",24),e.EFF(26,"Express session"),e.k0s(),e.EFF(27,")"),e.k0s(),e.j41(28,"li"),e.EFF(29,"Attach information about the authenticated user to the "),e.j41(30,"code"),e.EFF(31,"Request"),e.k0s(),e.EFF(32," object for further use in route handlers"),e.k0s()(),e.j41(33,"p"),e.EFF(34,"Passport has a rich ecosystem of "),e.j41(35,"a",25),e.EFF(36,"strategies"),e.k0s(),e.EFF(37," that implement various authentication mechanisms. While simple in concept, the set of Passport strategies you can choose from is large and presents a lot of variety. Passport abstracts these varied steps into a standard pattern, and the "),e.j41(38,"code"),e.EFF(39,"@nestjs/passport"),e.k0s(),e.EFF(40," module wraps and standardizes this pattern into familiar Nest constructs."),e.k0s(),e.j41(41,"p"),e.EFF(42,"In this chapter, we'll implement a complete end-to-end authentication solution for a RESTful API server using these powerful and flexible modules. You can use the concepts described here to implement any Passport strategy to customize your authentication scheme. You can follow the steps in this chapter to build this complete example."),e.k0s(),e.j41(43,"h4",26)(44,"span"),e.EFF(45,"Authentication requirements"),e.k0s()(),e.j41(46,"p"),e.EFF(47,"Let's flesh out our requirements. For this use case, clients will start by authenticating with a username and password. Once authenticated, the server will issue a JWT that can be sent as a "),e.j41(48,"a",27),e.EFF(49,"bearer token in an authorization header"),e.k0s(),e.EFF(50," on subsequent requests to prove authentication. We'll also create a protected route that is accessible only to requests that contain a valid JWT."),e.k0s(),e.j41(51,"p"),e.EFF(52,"We'll start with the first requirement: authenticating a user. We'll then extend that by issuing a JWT. Finally, we'll create a protected route that checks for a valid JWT on the request."),e.k0s(),e.j41(53,"p"),e.EFF(54,"First we need to install the required packages. Passport provides a strategy called "),e.j41(55,"a",28),e.EFF(56,"passport-local"),e.k0s(),e.EFF(57," that implements a username/password authentication mechanism, which suits our needs for this portion of our use case."),e.k0s(),e.j41(58,"pre")(59,"code",29),e.EFF(60,"\n$ npm install --save @nestjs/passport passport passport-local\n$ npm install --save-dev @types/passport-local\n"),e.k0s()(),e.j41(61,"blockquote",30)(62,"strong"),e.EFF(63,"Notice"),e.k0s(),e.EFF(64," For "),e.j41(65,"strong"),e.EFF(66,"any"),e.k0s(),e.EFF(67," Passport strategy you choose, you'll always need the "),e.j41(68,"code"),e.EFF(69,"@nestjs/passport"),e.k0s(),e.EFF(70," and "),e.j41(71,"code"),e.EFF(72,"passport"),e.k0s(),e.EFF(73," packages. Then, you'll need to install the strategy-specific package (e.g., "),e.j41(74,"code"),e.EFF(75,"passport-jwt"),e.k0s(),e.EFF(76," or "),e.j41(77,"code"),e.EFF(78,"passport-local"),e.k0s(),e.EFF(79,") that implements the particular authentication strategy you are building. In addition, you can also install the type definitions for any Passport strategy, as shown above with "),e.j41(80,"code"),e.EFF(81,"@types/passport-local"),e.k0s(),e.EFF(82,", which provides assistance while writing TypeScript code.\n"),e.k0s(),e.j41(83,"h4",31)(84,"span"),e.EFF(85,"Implementing Passport strategies"),e.k0s()(),e.j41(86,"p"),e.EFF(87,"We're now ready to implement the authentication feature. We'll start with an overview of the process used for "),e.j41(88,"strong"),e.EFF(89,"any"),e.k0s(),e.EFF(90," Passport strategy. It's helpful to think of Passport as a mini framework in itself. The elegance of the framework is that it abstracts the authentication process into a few basic steps that you customize based on the strategy you're implementing. It's like a framework because you configure it by supplying customization parameters (as plain JSON objects) and custom code in the form of callback functions, which Passport calls at the appropriate time. The "),e.j41(91,"code"),e.EFF(92,"@nestjs/passport"),e.k0s(),e.EFF(93," module wraps this framework in a Nest style package, making it easy to integrate into a Nest application. We'll use "),e.j41(94,"code"),e.EFF(95,"@nestjs/passport"),e.k0s(),e.EFF(96," below, but first let's consider how "),e.j41(97,"strong"),e.EFF(98,"vanilla Passport"),e.k0s(),e.EFF(99," works."),e.k0s(),e.j41(100,"p"),e.EFF(101,"In vanilla Passport, you configure a strategy by providing two things:"),e.k0s(),e.j41(102,"ol")(103,"li"),e.EFF(104,"A set of options that are specific to that strategy. For example, in a JWT strategy, you might provide a secret to sign tokens."),e.k0s(),e.j41(105,"li"),e.EFF(106,'A "verify callback", which is where you tell Passport how to interact with your user store (where you manage user accounts). Here, you verify whether a user exists (and/or create a new user), and whether their credentials are valid. The Passport library expects this callback to return a full user if the validation succeeds, or a null if it fails (failure is defined as either the user is not found, or, in the case of passport-local, the password does not match).'),e.k0s()(),e.j41(107,"p"),e.EFF(108,"With "),e.j41(109,"code"),e.EFF(110,"@nestjs/passport"),e.k0s(),e.EFF(111,", you configure a Passport strategy by extending the "),e.j41(112,"code"),e.EFF(113,"PassportStrategy"),e.k0s(),e.EFF(114," class. You pass the strategy options (item 1 above) by calling the "),e.j41(115,"code"),e.EFF(116,"super()"),e.k0s(),e.EFF(117," method in your subclass, optionally passing in an options object. You provide the verify callback (item 2 above) by implementing a "),e.j41(118,"code"),e.EFF(119,"validate()"),e.k0s(),e.EFF(120," method in your subclass."),e.k0s(),e.j41(121,"p"),e.EFF(122,"We'll start by generating an "),e.j41(123,"code"),e.EFF(124,"AuthModule"),e.k0s(),e.EFF(125," and in it, an "),e.j41(126,"code"),e.EFF(127,"AuthService"),e.k0s(),e.EFF(128,":"),e.k0s(),e.j41(129,"pre")(130,"code",29),e.EFF(131,"\n$ nest g module auth\n$ nest g service auth\n"),e.k0s()(),e.j41(132,"p"),e.EFF(133,"As we implement the "),e.j41(134,"code"),e.EFF(135,"AuthService"),e.k0s(),e.EFF(136,", we'll find it useful to encapsulate user operations in a "),e.j41(137,"code"),e.EFF(138,"UsersService"),e.k0s(),e.EFF(139,", so let's generate that module and service now:"),e.k0s(),e.j41(140,"pre")(141,"code",29),e.EFF(142,"\n$ nest g module users\n$ nest g service users\n"),e.k0s()(),e.j41(143,"p"),e.EFF(144,"Replace the default contents of these generated files as shown below. For our sample app, the "),e.j41(145,"code"),e.EFF(146,"UsersService"),e.k0s(),e.EFF(147," simply maintains a hard-coded in-memory list of users, and a find method to retrieve one by username. In a real app, this is where you'd build your user model and persistence layer, using your library of choice (e.g., TypeORM, Sequelize, Mongoose, etc.)."),e.k0s(),e.j41(148,"app-copy-button",32)(149,"span",33),e.EFF(150),e.nI1(151,"extension"),e.nrm(152,"app-tabs",null,1),e.k0s(),e.j41(154,"pre")(155,"code",34),e.EFF(156,"\nimport { Injectable } from '@nestjs/common';\n\n// This should be a real class/interface representing a user entity\nexport type User = any;\n\n@Injectable()\nexport class UsersService {\n  private readonly users = [\n    {\n      userId: 1,\n      username: 'john',\n      password: 'changeme',\n    },\n    {\n      userId: 2,\n      username: 'maria',\n      password: 'guess',\n    },\n  ];\n\n  async findOne(username: string): Promise<User | undefined> {\n    return this.users.find(user => user.username === username);\n  }\n}\n"),e.k0s()(),e.j41(157,"pre")(158,"code",34),e.EFF(159,"\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService {\n  constructor() {\n    this.users = [\n      {\n        userId: 1,\n        username: 'john',\n        password: 'changeme',\n      },\n      {\n        userId: 2,\n        username: 'maria',\n        password: 'guess',\n      },\n    ];\n  }\n\n  async findOne(username) {\n    return this.users.find(user => user.username === username);\n  }\n}\n"),e.k0s()()(),e.j41(160,"p"),e.EFF(161,"In the "),e.j41(162,"code"),e.EFF(163,"UsersModule"),e.k0s(),e.EFF(164,", the only change needed is to add the "),e.j41(165,"code"),e.EFF(166,"UsersService"),e.k0s(),e.EFF(167," to the exports array of the "),e.j41(168,"code"),e.EFF(169,"@Module"),e.k0s(),e.EFF(170," decorator so that it is visible outside this module (we'll soon use it in our "),e.j41(171,"code"),e.EFF(172,"AuthService"),e.k0s(),e.EFF(173,")."),e.k0s(),e.j41(174,"app-copy-button",32)(175,"span",33),e.EFF(176),e.nI1(177,"extension"),e.nrm(178,"app-tabs",null,2),e.k0s(),e.j41(180,"pre")(181,"code",34),e.EFF(182,"\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"),e.k0s()(),e.j41(183,"pre")(184,"code",34),e.EFF(185,"\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"),e.k0s()()(),e.j41(186,"p"),e.EFF(187,"Our "),e.j41(188,"code"),e.EFF(189,"AuthService"),e.k0s(),e.EFF(190," has the job of retrieving a user and verifying the password. We create a "),e.j41(191,"code"),e.EFF(192,"validateUser()"),e.k0s(),e.EFF(193," method for this purpose. In the code below, we use a convenient ES6 spread operator to strip the password property from the user object before returning it. We'll be calling into the "),e.j41(194,"code"),e.EFF(195,"validateUser()"),e.k0s(),e.EFF(196," method from our Passport local strategy in a moment."),e.k0s(),e.j41(197,"app-copy-button",32)(198,"span",33),e.EFF(199),e.nI1(200,"extension"),e.nrm(201,"app-tabs",null,3),e.k0s(),e.j41(203,"pre")(204,"code",34),e.EFF(205,"\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async validateUser(username: string, pass: string): Promise<any> {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n}\n"),e.k0s()(),e.j41(206,"pre")(207,"code",34),e.EFF(208,"\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\n@Dependencies(UsersService)\nexport class AuthService {\n  constructor(usersService) {\n    this.usersService = usersService;\n  }\n\n  async validateUser(username, pass) {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n}\n"),e.k0s()()(),e.j41(209,"blockquote",35)(210,"strong"),e.EFF(211,"Warning"),e.k0s(),e.EFF(212," Of course in a real application, you wouldn't store a password in plain text. You'd instead use a library like "),e.j41(213,"a",36),e.EFF(214,"bcrypt"),e.k0s(),e.EFF(215,", with a salted one-way hash algorithm. With that approach, you'd only store hashed passwords, and then compare the stored password to a hashed version of the "),e.j41(216,"strong"),e.EFF(217,"incoming"),e.k0s(),e.EFF(218," password, thus never storing or exposing user passwords in plain text. To keep our sample app simple, we violate that absolute mandate and use plain text. "),e.j41(219,"strong"),e.EFF(220,"Don't do this in your real app!"),e.k0s()(),e.j41(221,"p"),e.EFF(222,"Now, we update our "),e.j41(223,"code"),e.EFF(224,"AuthModule"),e.k0s(),e.EFF(225," to import the "),e.j41(226,"code"),e.EFF(227,"UsersModule"),e.k0s(),e.EFF(228,"."),e.k0s(),e.j41(229,"app-copy-button",32)(230,"span",33),e.EFF(231),e.nI1(232,"extension"),e.nrm(233,"app-tabs",null,4),e.k0s(),e.j41(235,"pre")(236,"code",34),e.EFF(237,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n"),e.k0s()(),e.j41(238,"pre")(239,"code",34),e.EFF(240,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n"),e.k0s()()(),e.j41(241,"h4",37)(242,"span"),e.EFF(243,"Implementing Passport local"),e.k0s()(),e.j41(244,"p"),e.EFF(245,"Now we can implement our Passport "),e.j41(246,"strong"),e.EFF(247,"local authentication strategy"),e.k0s(),e.EFF(248,". Create a file called "),e.j41(249,"code"),e.EFF(250,"local.strategy.ts"),e.k0s(),e.EFF(251," in the "),e.j41(252,"code"),e.EFF(253,"auth"),e.k0s(),e.EFF(254," folder, and add the following code:"),e.k0s(),e.j41(255,"app-copy-button",32)(256,"span",33),e.EFF(257),e.nI1(258,"extension"),e.nrm(259,"app-tabs",null,5),e.k0s(),e.j41(261,"pre")(262,"code",34),e.EFF(263,"\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise<any> {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n"),e.k0s()(),e.j41(264,"pre")(265,"code",34),e.EFF(266,"\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException, Dependencies } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\n@Dependencies(AuthService)\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(authService) {\n    super();\n    this.authService = authService;\n  }\n\n  async validate(username, password) {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n"),e.k0s()()(),e.j41(267,"p"),e.EFF(268,"We've followed the recipe described earlier for all Passport strategies. In our use case with passport-local, there are no configuration options, so our constructor simply calls "),e.j41(269,"code"),e.EFF(270,"super()"),e.k0s(),e.EFF(271,", without an options object."),e.k0s(),e.j41(272,"blockquote",38)(273,"strong"),e.EFF(274,"Hint"),e.k0s(),e.EFF(275," We can pass an options object in the call to "),e.j41(276,"code"),e.EFF(277,"super()"),e.k0s(),e.EFF(278," to customize the behavior of the passport strategy. In this example, the passport-local strategy by default expects properties called "),e.j41(279,"code"),e.EFF(280,"username"),e.k0s(),e.EFF(281," and "),e.j41(282,"code"),e.EFF(283,"password"),e.k0s(),e.EFF(284," in the request body. Pass an options object to specify different property names, for example: "),e.j41(285,"code"),e.EFF(286),e.k0s(),e.EFF(287,". See the "),e.j41(288,"a",39),e.EFF(289,"Passport documentation"),e.k0s(),e.EFF(290," for more information.\n"),e.k0s(),e.j41(291,"p"),e.EFF(292,"We've also implemented the "),e.j41(293,"code"),e.EFF(294,"validate()"),e.k0s(),e.EFF(295," method. For each strategy, Passport will call the verify function (implemented with the "),e.j41(296,"code"),e.EFF(297,"validate()"),e.k0s(),e.EFF(298," method in "),e.j41(299,"code"),e.EFF(300,"@nestjs/passport"),e.k0s(),e.EFF(301,") using an appropriate strategy-specific set of parameters. For the local-strategy, Passport expects a "),e.j41(302,"code"),e.EFF(303,"validate()"),e.k0s(),e.EFF(304," method with the following signature: "),e.j41(305,"code"),e.EFF(306,"validate(username: string, password:string): any"),e.k0s(),e.EFF(307,"."),e.k0s(),e.j41(308,"p"),e.EFF(309,"Most of the validation work is done in our "),e.j41(310,"code"),e.EFF(311,"AuthService"),e.k0s(),e.EFF(312," (with the help of our "),e.j41(313,"code"),e.EFF(314,"UsersService"),e.k0s(),e.EFF(315,"), so this method is quite straightforward. The "),e.j41(316,"code"),e.EFF(317,"validate()"),e.k0s(),e.EFF(318," method for "),e.j41(319,"strong"),e.EFF(320,"any"),e.k0s(),e.EFF(321," Passport strategy will follow a similar pattern, varying only in the details of how credentials are represented. If a user is found and the credentials are valid, the user is returned so Passport can complete its tasks (e.g., creating the "),e.j41(322,"code"),e.EFF(323,"user"),e.k0s(),e.EFF(324," property on the "),e.j41(325,"code"),e.EFF(326,"Request"),e.k0s(),e.EFF(327," object), and the request handling pipeline can continue. If it's not found, we throw an exception and let our "),e.j41(328,"a",40),e.EFF(329,"exceptions layer"),e.k0s(),e.EFF(330," handle it."),e.k0s(),e.j41(331,"p"),e.EFF(332,"Typically, the only significant difference in the "),e.j41(333,"code"),e.EFF(334,"validate()"),e.k0s(),e.EFF(335," method for each strategy is "),e.j41(336,"strong"),e.EFF(337,"how"),e.k0s(),e.EFF(338," you determine if a user exists and is valid. For example, in a JWT strategy, depending on requirements, we may evaluate whether the "),e.j41(339,"code"),e.EFF(340,"userId"),e.k0s(),e.EFF(341," carried in the decoded token matches a record in our user database, or matches a list of revoked tokens. Hence, this pattern of sub-classing and implementing strategy-specific validation is consistent, elegant and extensible."),e.k0s(),e.j41(342,"p"),e.EFF(343,"We need to configure our "),e.j41(344,"code"),e.EFF(345,"AuthModule"),e.k0s(),e.EFF(346," to use the Passport features we just defined. Update "),e.j41(347,"code"),e.EFF(348,"auth.module.ts"),e.k0s(),e.EFF(349," to look like this:"),e.k0s(),e.j41(350,"app-copy-button",32)(351,"span",33),e.EFF(352),e.nI1(353,"extension"),e.nrm(354,"app-tabs",null,6),e.k0s(),e.j41(356,"pre")(357,"code",34),e.EFF(358,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule],\n  providers: [AuthService, LocalStrategy],\n})\nexport class AuthModule {}\n"),e.k0s()(),e.j41(359,"pre")(360,"code",34),e.EFF(361,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule],\n  providers: [AuthService, LocalStrategy],\n})\nexport class AuthModule {}\n"),e.k0s()()(),e.j41(362,"h4",41)(363,"span"),e.EFF(364,"Built-in Passport Guards"),e.k0s()(),e.j41(365,"p"),e.EFF(366,"The "),e.j41(367,"a",42),e.EFF(368,"Guards"),e.k0s(),e.EFF(369," chapter describes the primary function of Guards: to determine whether a request will be handled by the route handler or not. That remains true, and we'll use that standard capability soon. However, in the context of using the "),e.j41(370,"code"),e.EFF(371,"@nestjs/passport"),e.k0s(),e.EFF(372," module, we will also introduce a slight new wrinkle that may at first be confusing, so let's discuss that now. Consider that your app can exist in two states, from an authentication perspective:"),e.k0s(),e.j41(373,"ol")(374,"li"),e.EFF(375,"the user/client is "),e.j41(376,"strong"),e.EFF(377,"not"),e.k0s(),e.EFF(378," logged in (is not authenticated)"),e.k0s(),e.j41(379,"li"),e.EFF(380,"the user/client "),e.j41(381,"strong"),e.EFF(382,"is"),e.k0s(),e.EFF(383," logged in (is authenticated)"),e.k0s()(),e.j41(384,"p"),e.EFF(385,"In the first case (user is not logged in), we need to perform two distinct functions:"),e.k0s(),e.j41(386,"ul")(387,"li")(388,"p"),e.EFF(389,"Restrict the routes an unauthenticated user can access (i.e., deny access to restricted routes). We'll use Guards in their familiar capacity to handle this function, by placing a Guard on the protected routes. As you may anticipate, we'll be checking for the presence of a valid JWT in this Guard, so we'll work on this Guard later, once we are successfully issuing JWTs."),e.k0s()(),e.j41(390,"li")(391,"p"),e.EFF(392,"Initiate the "),e.j41(393,"strong"),e.EFF(394,"authentication step"),e.k0s(),e.EFF(395," itself when a previously unauthenticated user attempts to login. This is the step where we'll "),e.j41(396,"strong"),e.EFF(397,"issue"),e.k0s(),e.EFF(398," a JWT to a valid user. Thinking about this for a moment, we know we'll need to "),e.j41(399,"code"),e.EFF(400,"POST"),e.k0s(),e.EFF(401," username/password credentials to initiate authentication, so we'll set up a "),e.j41(402,"code"),e.EFF(403,"POST /auth/login"),e.k0s(),e.EFF(404," route to handle that. This raises the question: how exactly do we invoke the passport-local strategy in that route?"),e.k0s()()(),e.j41(405,"p"),e.EFF(406,"The answer is straightforward: by using another, slightly different type of Guard. The "),e.j41(407,"code"),e.EFF(408,"@nestjs/passport"),e.k0s(),e.EFF(409," module provides us with a built-in Guard that does this for us. This Guard invokes the Passport strategy and kicks off the steps described above (retrieving credentials, running the verify function, creating the "),e.j41(410,"code"),e.EFF(411,"user"),e.k0s(),e.EFF(412," property, etc)."),e.k0s(),e.j41(413,"p"),e.EFF(414,"The second case enumerated above (logged in user) simply relies on the standard type of Guard we already discussed to enable access to protected routes for logged in users."),e.k0s(),e.j41(415,"p"),e.nrm(416,"app-banner-courses-auth"),e.k0s(),e.j41(417,"h4",43)(418,"span"),e.EFF(419,"Login route"),e.k0s()(),e.j41(420,"p"),e.EFF(421,"With the strategy in place, we can now implement a bare-bones "),e.j41(422,"code"),e.EFF(423,"/auth/login"),e.k0s(),e.EFF(424," route, and apply the built-in Guard to initiate the passport-local flow."),e.k0s(),e.j41(425,"p"),e.EFF(426,"Open the "),e.j41(427,"code"),e.EFF(428,"app.controller.ts"),e.k0s(),e.EFF(429," file and replace its contents with the following:"),e.k0s(),e.j41(430,"app-copy-button",32)(431,"span",33),e.EFF(432),e.nI1(433,"extension"),e.nrm(434,"app-tabs",null,7),e.k0s(),e.j41(436,"pre")(437,"code",34),e.EFF(438,"\nimport { Controller, Request, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller()\nexport class AppController {\n  @UseGuards(AuthGuard('local'))\n  @Post('auth/login')\n  async login(@Request() req) {\n    return req.user;\n  }\n}\n"),e.k0s()(),e.j41(439,"pre")(440,"code",34),e.EFF(441,"\nimport { Controller, Bind, Request, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller()\nexport class AppController {\n  @UseGuards(AuthGuard('local'))\n  @Post('auth/login')\n  @Bind(Request())\n  async login(req) {\n    return req.user;\n  }\n}\n"),e.k0s()()(),e.j41(442,"p"),e.EFF(443,"With "),e.j41(444,"code"),e.EFF(445,"@UseGuards(AuthGuard('local'))"),e.k0s(),e.EFF(446," we are using an "),e.j41(447,"code"),e.EFF(448,"AuthGuard"),e.k0s(),e.EFF(449," that "),e.j41(450,"code"),e.EFF(451,"@nestjs/passport"),e.k0s(),e.j41(452,"strong"),e.EFF(453,"automatically provisioned"),e.k0s(),e.EFF(454," for us when we extended the passport-local strategy. Let's break that down. Our Passport local strategy has a default name of "),e.j41(455,"code"),e.EFF(456,"'local'"),e.k0s(),e.EFF(457,". We reference that name in the "),e.j41(458,"code"),e.EFF(459,"@UseGuards()"),e.k0s(),e.EFF(460," decorator to associate it with code supplied by the "),e.j41(461,"code"),e.EFF(462,"passport-local"),e.k0s(),e.EFF(463," package. This is used to disambiguate which strategy to invoke in case we have multiple Passport strategies in our app (each of which may provision a strategy-specific "),e.j41(464,"code"),e.EFF(465,"AuthGuard"),e.k0s(),e.EFF(466,"). While we only have one such strategy so far, we'll shortly add a second, so this is needed for disambiguation."),e.k0s(),e.j41(467,"p"),e.EFF(468,"In order to test our route we'll have our "),e.j41(469,"code"),e.EFF(470,"/auth/login"),e.k0s(),e.EFF(471," route simply return the user for now. This also lets us demonstrate another Passport feature: Passport automatically creates a "),e.j41(472,"code"),e.EFF(473,"user"),e.k0s(),e.EFF(474," object, based on the value we return from the "),e.j41(475,"code"),e.EFF(476,"validate()"),e.k0s(),e.EFF(477," method, and assigns it to the "),e.j41(478,"code"),e.EFF(479,"Request"),e.k0s(),e.EFF(480," object as "),e.j41(481,"code"),e.EFF(482,"req.user"),e.k0s(),e.EFF(483,". Later, we'll replace this with code to create and return a JWT instead."),e.k0s(),e.j41(484,"p"),e.EFF(485,"Since these are API routes, we'll test them using the commonly available "),e.j41(486,"a",44),e.EFF(487,"cURL"),e.k0s(),e.EFF(488," library. You can test with any of the "),e.j41(489,"code"),e.EFF(490,"user"),e.k0s(),e.EFF(491," objects hard-coded in the "),e.j41(492,"code"),e.EFF(493,"UsersService"),e.k0s(),e.EFF(494,"."),e.k0s(),e.j41(495,"pre")(496,"code",29),e.EFF(497,'\n$ # POST to /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d \'{"username": "john", "password": "changeme"}\' -H "Content-Type: application/json"\n$ # result -> {"userId":1,"username":"john"}\n'),e.k0s()(),e.j41(498,"p"),e.EFF(499,"While this works, passing the strategy name directly to the "),e.j41(500,"code"),e.EFF(501,"AuthGuard()"),e.k0s(),e.EFF(502," introduces magic strings in the codebase. Instead, we recommend creating your own class, as shown below:"),e.k0s(),e.j41(503,"app-copy-button",32)(504,"span",33),e.EFF(505),e.nI1(506,"extension"),e.nrm(507,"app-tabs",null,8),e.k0s(),e.j41(509,"pre")(510,"code",34),e.EFF(511,"\nimport { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n"),e.k0s()()(),e.j41(512,"p"),e.EFF(513,"Now, we can update the "),e.j41(514,"code"),e.EFF(515,"/auth/login"),e.k0s(),e.EFF(516," route handler and use the "),e.j41(517,"code"),e.EFF(518,"LocalAuthGuard"),e.k0s(),e.EFF(519," instead:"),e.k0s(),e.j41(520,"app-copy-button")(521,"pre")(522,"code",34),e.EFF(523,"\n@UseGuards(LocalAuthGuard)\n@Post('auth/login')\nasync login(@Request() req) {\n  return req.user;\n}\n"),e.k0s()()(),e.j41(524,"h4",45)(525,"span"),e.EFF(526,"Logout route"),e.k0s()(),e.j41(527,"p"),e.EFF(528,"To log out, we can create an additional route that invokes "),e.j41(529,"code"),e.EFF(530,"res.logout()"),e.k0s(),e.EFF(531," to clear the user's session. This is a typical approach used in session-based authentication, but it does not apply to JWTs."),e.k0s(),e.j41(532,"app-copy-button")(533,"pre")(534,"code",34),e.EFF(535,"\n@UseGuards(LocalAuthGuard)\n@Post('auth/logout')\nasync logout(@Request() req) {\n  return req.logout();\n}\n"),e.k0s()()(),e.j41(536,"h4",46)(537,"span"),e.EFF(538,"JWT functionality"),e.k0s()(),e.j41(539,"p"),e.EFF(540,"We're ready to move on to the JWT portion of our auth system. Let's review and refine our requirements:"),e.k0s(),e.j41(541,"ul")(542,"li"),e.EFF(543,"Allow users to authenticate with username/password, returning a JWT for use in subsequent calls to protected API endpoints. We're well on our way to meeting this requirement. To complete it, we'll need to write the code that issues a JWT."),e.k0s(),e.j41(544,"li"),e.EFF(545,"Create API routes which are protected based on the presence of a valid JWT as a bearer token"),e.k0s()(),e.j41(546,"p"),e.EFF(547,"We'll need to install a couple more packages to support our JWT requirements:"),e.k0s(),e.j41(548,"pre")(549,"code",29),e.EFF(550,"\n$ npm install --save @nestjs/jwt passport-jwt\n$ npm install --save-dev @types/passport-jwt\n"),e.k0s()(),e.j41(551,"p"),e.EFF(552,"The "),e.j41(553,"code"),e.EFF(554,"@nestjs/jwt"),e.k0s(),e.EFF(555," package (see more "),e.j41(556,"a",47),e.EFF(557,"here"),e.k0s(),e.EFF(558,") is a utility package that helps with JWT manipulation. The "),e.j41(559,"code"),e.EFF(560,"passport-jwt"),e.k0s(),e.EFF(561," package is the Passport package that implements the JWT strategy and "),e.j41(562,"code"),e.EFF(563,"@types/passport-jwt"),e.k0s(),e.EFF(564," provides the TypeScript type definitions."),e.k0s(),e.j41(565,"p"),e.EFF(566,"Let's take a closer look at how a "),e.j41(567,"code"),e.EFF(568,"POST /auth/login"),e.k0s(),e.EFF(569," request is handled. We've decorated the route using the built-in "),e.j41(570,"code"),e.EFF(571,"AuthGuard"),e.k0s(),e.EFF(572," provided by the passport-local strategy. This means that:"),e.k0s(),e.j41(573,"ol")(574,"li"),e.EFF(575,"The route handler "),e.j41(576,"strong"),e.EFF(577,"will only be invoked if the user has been validated"),e.k0s()(),e.j41(578,"li"),e.EFF(579,"The "),e.j41(580,"code"),e.EFF(581,"req"),e.k0s(),e.EFF(582," parameter will contain a "),e.j41(583,"code"),e.EFF(584,"user"),e.k0s(),e.EFF(585," property (populated by Passport during the passport-local authentication flow)"),e.k0s()(),e.j41(586,"p"),e.EFF(587,"With this in mind, we can now finally generate a real JWT, and return it in this route. To keep our services cleanly modularized, we'll handle generating the JWT in the "),e.j41(588,"code"),e.EFF(589,"authService"),e.k0s(),e.EFF(590,". Open the "),e.j41(591,"code"),e.EFF(592,"auth.service.ts"),e.k0s(),e.EFF(593," file in the "),e.j41(594,"code"),e.EFF(595,"auth"),e.k0s(),e.EFF(596," folder, and add the "),e.j41(597,"code"),e.EFF(598,"login()"),e.k0s(),e.EFF(599," method, and import the "),e.j41(600,"code"),e.EFF(601,"JwtService"),e.k0s(),e.EFF(602," as shown:"),e.k0s(),e.j41(603,"app-copy-button",32)(604,"span",33),e.EFF(605),e.nI1(606,"extension"),e.nrm(607,"app-tabs",null,9),e.k0s(),e.j41(609,"pre")(610,"code",34),e.EFF(611,"\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n  ) {}\n\n  async validateUser(username: string, pass: string): Promise<any> {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = { username: user.username, sub: user.userId };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n"),e.k0s()(),e.j41(612,"pre")(613,"code",34),e.EFF(614,"\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Dependencies(UsersService, JwtService)\n@Injectable()\nexport class AuthService {\n  constructor(usersService, jwtService) {\n    this.usersService = usersService;\n    this.jwtService = jwtService;\n  }\n\n  async validateUser(username, pass) {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user) {\n    const payload = { username: user.username, sub: user.userId };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n"),e.k0s()()(),e.j41(615,"p"),e.EFF(616,"We're using the "),e.j41(617,"code"),e.EFF(618,"@nestjs/jwt"),e.k0s(),e.EFF(619," library, which supplies a "),e.j41(620,"code"),e.EFF(621,"sign()"),e.k0s(),e.EFF(622," function to generate our JWT from a subset of the "),e.j41(623,"code"),e.EFF(624,"user"),e.k0s(),e.EFF(625," object properties, which we then return as a simple object with a single "),e.j41(626,"code"),e.EFF(627,"access_token"),e.k0s(),e.EFF(628," property. Note: we choose a property name of "),e.j41(629,"code"),e.EFF(630,"sub"),e.k0s(),e.EFF(631," to hold our "),e.j41(632,"code"),e.EFF(633,"userId"),e.k0s(),e.EFF(634," value to be consistent with JWT standards. Don't forget to inject the JwtService provider into the "),e.j41(635,"code"),e.EFF(636,"AuthService"),e.k0s(),e.EFF(637,"."),e.k0s(),e.j41(638,"p"),e.EFF(639,"We now need to update the "),e.j41(640,"code"),e.EFF(641,"AuthModule"),e.k0s(),e.EFF(642," to import the new dependencies and configure the "),e.j41(643,"code"),e.EFF(644,"JwtModule"),e.k0s(),e.EFF(645,"."),e.k0s(),e.j41(646,"p"),e.EFF(647,"First, create "),e.j41(648,"code"),e.EFF(649,"constants.ts"),e.k0s(),e.EFF(650," in the "),e.j41(651,"code"),e.EFF(652,"auth"),e.k0s(),e.EFF(653," folder, and add the following code:"),e.k0s(),e.j41(654,"app-copy-button",32)(655,"span",33),e.EFF(656),e.nI1(657,"extension"),e.nrm(658,"app-tabs",null,10),e.k0s(),e.j41(660,"pre")(661,"code",34),e.EFF(662,"\nexport const jwtConstants = {\n  secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n};\n"),e.k0s()(),e.j41(663,"pre")(664,"code",34),e.EFF(665,"\nexport const jwtConstants = {\n  secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n};\n"),e.k0s()()(),e.j41(666,"p"),e.EFF(667,"We'll use this to share our key between the JWT signing and verifying steps."),e.k0s(),e.j41(668,"blockquote",35)(669,"strong"),e.EFF(670,"Warning"),e.k0s(),e.j41(671,"strong"),e.EFF(672,"Do not expose this key publicly"),e.k0s(),e.EFF(673,". We have done so here to make it clear what the code is doing, but in a production system "),e.j41(674,"strong"),e.EFF(675,"you must protect this key"),e.k0s(),e.EFF(676," using appropriate measures such as a secrets vault, environment variable, or configuration service.\n"),e.k0s(),e.j41(677,"p"),e.EFF(678,"Now, open "),e.j41(679,"code"),e.EFF(680,"auth.module.ts"),e.k0s(),e.EFF(681," in the "),e.j41(682,"code"),e.EFF(683,"auth"),e.k0s(),e.EFF(684," folder and update it to look like this:"),e.k0s(),e.j41(685,"app-copy-button",32)(686,"span",33),e.EFF(687),e.nI1(688,"extension"),e.nrm(689,"app-tabs",null,11),e.k0s(),e.j41(691,"pre")(692,"code",34),e.EFF(693,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),e.k0s()(),e.j41(694,"pre")(695,"code",34),e.EFF(696,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),e.k0s()()(),e.j41(697,"p"),e.EFF(698,"We configure the "),e.j41(699,"code"),e.EFF(700,"JwtModule"),e.k0s(),e.EFF(701," using "),e.j41(702,"code"),e.EFF(703,"register()"),e.k0s(),e.EFF(704,", passing in a configuration object. See "),e.j41(705,"a",48),e.EFF(706,"here"),e.k0s(),e.EFF(707," for more on the Nest "),e.j41(708,"code"),e.EFF(709,"JwtModule"),e.k0s(),e.EFF(710," and "),e.j41(711,"a",49),e.EFF(712,"here"),e.k0s(),e.EFF(713," for more details on the available configuration options."),e.k0s(),e.j41(714,"p"),e.EFF(715,"Now we can update the "),e.j41(716,"code"),e.EFF(717,"/auth/login"),e.k0s(),e.EFF(718," route to return a JWT."),e.k0s(),e.j41(719,"app-copy-button",32)(720,"span",33),e.EFF(721),e.nI1(722,"extension"),e.nrm(723,"app-tabs",null,12),e.k0s(),e.j41(725,"pre")(726,"code",34),e.EFF(727,"\nimport { Controller, Request, Post, UseGuards } from '@nestjs/common';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n}\n"),e.k0s()(),e.j41(728,"pre")(729,"code",34),e.EFF(730,"\nimport { Controller, Bind, Request, Post, UseGuards } from '@nestjs/common';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  @Bind(Request())\n  async login(req) {\n    return this.authService.login(req.user);\n  }\n}\n"),e.k0s()()(),e.j41(731,"p"),e.EFF(732,"Let's go ahead and test our routes using cURL again. You can test with any of the "),e.j41(733,"code"),e.EFF(734,"user"),e.k0s(),e.EFF(735," objects hard-coded in the "),e.j41(736,"code"),e.EFF(737,"UsersService"),e.k0s(),e.EFF(738,"."),e.k0s(),e.j41(739,"pre")(740,"code",29),e.EFF(741,'\n$ # POST to /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d \'{"username": "john", "password": "changeme"}\' -H "Content-Type: application/json"\n$ # result -> {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}\n$ # Note: above JWT truncated\n'),e.k0s()(),e.j41(742,"h4",50)(743,"span"),e.EFF(744,"Implementing Passport JWT"),e.k0s()(),e.j41(745,"p"),e.EFF(746,"We can now address our final requirement: protecting endpoints by requiring a valid JWT be present on the request. Passport can help us here too. It provides the "),e.j41(747,"a",51),e.EFF(748,"passport-jwt"),e.k0s(),e.EFF(749," strategy for securing RESTful endpoints with JSON Web Tokens. Start by creating a file called "),e.j41(750,"code"),e.EFF(751,"jwt.strategy.ts"),e.k0s(),e.EFF(752," in the "),e.j41(753,"code"),e.EFF(754,"auth"),e.k0s(),e.EFF(755," folder, and add the following code:"),e.k0s(),e.j41(756,"app-copy-button",32)(757,"span",33),e.EFF(758),e.nI1(759,"extension"),e.nrm(760,"app-tabs",null,13),e.k0s(),e.j41(762,"pre")(763,"code",34),e.EFF(764,"\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n"),e.k0s()(),e.j41(765,"pre")(766,"code",34),e.EFF(767,"\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n"),e.k0s()()(),e.j41(768,"p"),e.EFF(769,"With our "),e.j41(770,"code"),e.EFF(771,"JwtStrategy"),e.k0s(),e.EFF(772,", we've followed the same recipe described earlier for all Passport strategies. This strategy requires some initialization, so we do that by passing in an options object in the "),e.j41(773,"code"),e.EFF(774,"super()"),e.k0s(),e.EFF(775," call. You can read more about the available options "),e.j41(776,"a",52),e.EFF(777,"here"),e.k0s(),e.EFF(778,". In our case, these options are:"),e.k0s(),e.j41(779,"ul")(780,"li")(781,"code"),e.EFF(782,"jwtFromRequest"),e.k0s(),e.EFF(783,": supplies the method by which the JWT will be extracted from the "),e.j41(784,"code"),e.EFF(785,"Request"),e.k0s(),e.EFF(786,". We will use the standard approach of supplying a bearer token in the Authorization header of our API requests. Other options are described "),e.j41(787,"a",53),e.EFF(788,"here"),e.k0s(),e.EFF(789,"."),e.k0s(),e.j41(790,"li")(791,"code"),e.EFF(792,"ignoreExpiration"),e.k0s(),e.EFF(793,": just to be explicit, we choose the default "),e.j41(794,"code"),e.EFF(795,"false"),e.k0s(),e.EFF(796," setting, which delegates the responsibility of ensuring that a JWT has not expired to the Passport module. This means that if our route is supplied with an expired JWT, the request will be denied and a "),e.j41(797,"code"),e.EFF(798,"401 Unauthorized"),e.k0s(),e.EFF(799," response sent. Passport conveniently handles this automatically for us."),e.k0s(),e.j41(800,"li")(801,"code"),e.EFF(802,"secretOrKey"),e.k0s(),e.EFF(803,": we are using the expedient option of supplying a symmetric secret for signing the token. Other options, such as a PEM-encoded public key, may be more appropriate for production apps (see "),e.j41(804,"a",52),e.EFF(805,"here"),e.k0s(),e.EFF(806," for more information). In any case, as cautioned earlier, "),e.j41(807,"strong"),e.EFF(808,"do not expose this secret publicly"),e.k0s(),e.EFF(809,"."),e.k0s()(),e.j41(810,"p"),e.EFF(811,"The "),e.j41(812,"code"),e.EFF(813,"validate()"),e.k0s(),e.EFF(814," method deserves some discussion. For the jwt-strategy, Passport first verifies the JWT's signature and decodes the JSON. It then invokes our "),e.j41(815,"code"),e.EFF(816,"validate()"),e.k0s(),e.EFF(817," method passing the decoded JSON as its single parameter. Based on the way JWT signing works, "),e.j41(818,"strong"),e.EFF(819,"we're guaranteed that we're receiving a valid token"),e.k0s(),e.EFF(820," that we have previously signed and issued to a valid user."),e.k0s(),e.j41(821,"p"),e.EFF(822,"As a result of all this, our response to the "),e.j41(823,"code"),e.EFF(824,"validate()"),e.k0s(),e.EFF(825," callback is trivial: we simply return an object containing the "),e.j41(826,"code"),e.EFF(827,"userId"),e.k0s(),e.EFF(828," and "),e.j41(829,"code"),e.EFF(830,"username"),e.k0s(),e.EFF(831," properties. Recall again that Passport will build a "),e.j41(832,"code"),e.EFF(833,"user"),e.k0s(),e.EFF(834," object based on the return value of our "),e.j41(835,"code"),e.EFF(836,"validate()"),e.k0s(),e.EFF(837," method, and attach it as a property on the "),e.j41(838,"code"),e.EFF(839,"Request"),e.k0s(),e.EFF(840," object."),e.k0s(),e.j41(841,"p"),e.EFF(842,"Additionally, you can return an array, where the first value is used to create a "),e.j41(843,"code"),e.EFF(844,"user"),e.k0s(),e.EFF(845," object and the second value is used to create an "),e.j41(846,"code"),e.EFF(847,"authInfo"),e.k0s(),e.EFF(848," object."),e.k0s(),e.j41(849,"p"),e.EFF(850,"It's also worth pointing out that this approach leaves us room ('hooks' as it were) to inject other business logic into the process. For example, we could do a database lookup in our "),e.j41(851,"code"),e.EFF(852,"validate()"),e.k0s(),e.EFF(853," method to extract more information about the user, resulting in a more enriched "),e.j41(854,"code"),e.EFF(855,"user"),e.k0s(),e.EFF(856," object being available in our "),e.j41(857,"code"),e.EFF(858,"Request"),e.k0s(),e.EFF(859,". This is also the place we may decide to do further token validation, such as looking up the "),e.j41(860,"code"),e.EFF(861,"userId"),e.k0s(),e.EFF(862,' in a list of revoked tokens, enabling us to perform token revocation. The model we\'ve implemented here in our sample code is a fast, "stateless JWT" model, where each API call is immediately authorized based on the presence of a valid JWT, and a small bit of information about the requester (its '),e.j41(863,"code"),e.EFF(864,"userId"),e.k0s(),e.EFF(865," and "),e.j41(866,"code"),e.EFF(867,"username"),e.k0s(),e.EFF(868,") is available in our Request pipeline."),e.k0s(),e.j41(869,"p"),e.EFF(870,"Add the new "),e.j41(871,"code"),e.EFF(872,"JwtStrategy"),e.k0s(),e.EFF(873," as a provider in the "),e.j41(874,"code"),e.EFF(875,"AuthModule"),e.k0s(),e.EFF(876,":"),e.k0s(),e.j41(877,"app-copy-button",32)(878,"span",33),e.EFF(879),e.nI1(880,"extension"),e.nrm(881,"app-tabs",null,14),e.k0s(),e.j41(883,"pre")(884,"code",34),e.EFF(885,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),e.k0s()(),e.j41(886,"pre")(887,"code",34),e.EFF(888,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),e.k0s()()(),e.j41(889,"p"),e.EFF(890,"By importing the same secret used when we signed the JWT, we ensure that the "),e.j41(891,"strong"),e.EFF(892,"verify"),e.k0s(),e.EFF(893," phase performed by Passport, and the "),e.j41(894,"strong"),e.EFF(895,"sign"),e.k0s(),e.EFF(896," phase performed in our AuthService, use a common secret."),e.k0s(),e.j41(897,"p"),e.EFF(898,"Finally, we define the "),e.j41(899,"code"),e.EFF(900,"JwtAuthGuard"),e.k0s(),e.EFF(901," class which extends the built-in "),e.j41(902,"code"),e.EFF(903,"AuthGuard"),e.k0s(),e.EFF(904,":"),e.k0s(),e.j41(905,"app-copy-button",32)(906,"span",33),e.EFF(907),e.nI1(908,"extension"),e.nrm(909,"app-tabs",null,15),e.k0s(),e.j41(911,"pre")(912,"code",34),e.EFF(913,"\nimport { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n"),e.k0s()()(),e.j41(914,"h4",54)(915,"span"),e.EFF(916,"Implement protected route and JWT strategy guards"),e.k0s()(),e.j41(917,"p"),e.EFF(918,"We can now implement our protected route and its associated Guard."),e.k0s(),e.j41(919,"p"),e.EFF(920,"Open the "),e.j41(921,"code"),e.EFF(922,"app.controller.ts"),e.k0s(),e.EFF(923," file and update it as shown below:"),e.k0s(),e.j41(924,"app-copy-button",32)(925,"span",33),e.EFF(926),e.nI1(927,"extension"),e.nrm(928,"app-tabs",null,16),e.k0s(),e.j41(930,"pre")(931,"code",34),e.EFF(932,"\nimport { Controller, Get, Request, Post, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n"),e.k0s()(),e.j41(933,"pre")(934,"code",34),e.EFF(935,"\nimport { Controller, Dependencies, Bind, Get, Request, Post, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Dependencies(AuthService)\n@Controller()\nexport class AppController {\n  constructor(authService) {\n    this.authService = authService;\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  @Bind(Request())\n  async login(req) {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @Bind(Request())\n  getProfile(req) {\n    return req.user;\n  }\n}\n"),e.k0s()()(),e.j41(936,"p"),e.EFF(937,"Once again, we're applying the "),e.j41(938,"code"),e.EFF(939,"AuthGuard"),e.k0s(),e.EFF(940," that the "),e.j41(941,"code"),e.EFF(942,"@nestjs/passport"),e.k0s(),e.EFF(943," module has automatically provisioned for us when we configured the passport-jwt module. This Guard is referenced by its default name, "),e.j41(944,"code"),e.EFF(945,"jwt"),e.k0s(),e.EFF(946,". When our "),e.j41(947,"code"),e.EFF(948,"GET /profile"),e.k0s(),e.EFF(949," route is hit, the Guard will automatically invoke our passport-jwt custom configured strategy, validate the JWT, and assign the "),e.j41(950,"code"),e.EFF(951,"user"),e.k0s(),e.EFF(952," property to the "),e.j41(953,"code"),e.EFF(954,"Request"),e.k0s(),e.EFF(955," object."),e.k0s(),e.j41(956,"p"),e.EFF(957,"Ensure the app is running, and test the routes using "),e.j41(958,"code"),e.EFF(959,"cURL"),e.k0s(),e.EFF(960,"."),e.k0s(),e.j41(961,"pre")(962,"code",29),e.EFF(963,'\n$ # GET /profile\n$ curl http://localhost:3000/profile\n$ # result -> {"statusCode":401,"message":"Unauthorized"}\n\n$ # POST /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d \'{"username": "john", "password": "changeme"}\' -H "Content-Type: application/json"\n$ # result -> {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm... }\n\n$ # GET /profile using access_token returned from previous step as bearer code\n$ curl http://localhost:3000/profile -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm..."\n$ # result -> {"userId":1,"username":"john"}\n'),e.k0s()(),e.j41(964,"p"),e.EFF(965,"Note that in the "),e.j41(966,"code"),e.EFF(967,"AuthModule"),e.k0s(),e.EFF(968,", we configured the JWT to have an expiration of "),e.j41(969,"code"),e.EFF(970,"60 seconds"),e.k0s(),e.EFF(971,". This is probably too short an expiration, and dealing with the details of token expiration and refresh is beyond the scope of this article. However, we chose that to demonstrate an important quality of JWTs and the passport-jwt strategy. If you wait 60 seconds after authenticating before attempting a "),e.j41(972,"code"),e.EFF(973,"GET /profile"),e.k0s(),e.EFF(974," request, you'll receive a "),e.j41(975,"code"),e.EFF(976,"401 Unauthorized"),e.k0s(),e.EFF(977," response. This is because Passport automatically checks the JWT for its expiration time, saving you the trouble of doing so in your application."),e.k0s(),e.j41(978,"p"),e.EFF(979,"We've now completed our JWT authentication implementation. JavaScript clients (such as Angular/React/Vue), and other JavaScript apps, can now authenticate and communicate securely with our API Server."),e.k0s(),e.j41(980,"h4",55)(981,"span"),e.EFF(982,"Extending guards"),e.k0s()(),e.j41(983,"p"),e.EFF(984,"In most cases, using a provided "),e.j41(985,"code"),e.EFF(986,"AuthGuard"),e.k0s(),e.EFF(987," class is sufficient. However, there might be use-cases when you would like to simply extend the default error handling or authentication logic. For this, you can extend the built-in class and override methods within a sub-class."),e.k0s(),e.j41(988,"app-copy-button")(989,"pre")(990,"code",34),e.EFF(991,"\nimport {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n"),e.k0s()()(),e.j41(992,"p"),e.EFF(993,"In addition to extending the default error handling and authentication logic, we can allow authentication to go through a chain of strategies. The first strategy to succeed, redirect, or error will halt the chain. Authentication failures will proceed through each strategy in series, ultimately failing if all strategies fail."),e.k0s(),e.j41(994,"app-copy-button")(995,"pre")(996,"code",34),e.EFF(997,"\nexport class JwtAuthGuard extends AuthGuard(['strategy_jwt_1', 'strategy_jwt_2', '...']) { ... }\n"),e.k0s()()(),e.j41(998,"h4",56)(999,"span"),e.EFF(1e3,"Enable authentication globally"),e.k0s()(),e.j41(1001,"p"),e.EFF(1002,"If the vast majority of your endpoints should be protected by default, you can register the authentication guard as a "),e.j41(1003,"a",57),e.EFF(1004,"global guard"),e.k0s(),e.EFF(1005," and instead of using "),e.j41(1006,"code"),e.EFF(1007,"@UseGuards()"),e.k0s(),e.EFF(1008," decorator on top of each controller, you could simply flag which routes should be public."),e.k0s(),e.j41(1009,"p"),e.EFF(1010,"First, register the "),e.j41(1011,"code"),e.EFF(1012,"JwtAuthGuard"),e.k0s(),e.EFF(1013," as a global guard using the following construction (in any module):"),e.k0s(),e.j41(1014,"app-copy-button")(1015,"pre")(1016,"code",34),e.EFF(1017,"\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: JwtAuthGuard,\n  },\n],\n"),e.k0s()()(),e.j41(1018,"p"),e.EFF(1019,"With this in place, Nest will automatically bind "),e.j41(1020,"code"),e.EFF(1021,"JwtAuthGuard"),e.k0s(),e.EFF(1022," to all endpoints."),e.k0s(),e.j41(1023,"p"),e.EFF(1024,"Now we must provide a mechanism for declaring routes as public. For this, we can create a custom decorator using the "),e.j41(1025,"code"),e.EFF(1026,"SetMetadata"),e.k0s(),e.EFF(1027," decorator factory function."),e.k0s(),e.j41(1028,"app-copy-button")(1029,"pre")(1030,"code",34),e.EFF(1031,"\nimport { SetMetadata } from '@nestjs/common';\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n"),e.k0s()()(),e.j41(1032,"p"),e.EFF(1033,"In the file above, we exported two constants. One being our metadata key named "),e.j41(1034,"code"),e.EFF(1035,"IS_PUBLIC_KEY"),e.k0s(),e.EFF(1036,", and the other being our new decorator itself that we\u2019re going to call "),e.j41(1037,"code"),e.EFF(1038,"Public"),e.k0s(),e.EFF(1039," (you can alternatively name it "),e.j41(1040,"code"),e.EFF(1041,"SkipAuth"),e.k0s(),e.EFF(1042," or "),e.j41(1043,"code"),e.EFF(1044,"AllowAnon"),e.k0s(),e.EFF(1045,", whatever fits your project)."),e.k0s(),e.j41(1046,"p"),e.EFF(1047,"Now that we have a custom "),e.j41(1048,"code"),e.EFF(1049,"@Public()"),e.k0s(),e.EFF(1050," decorator, we can use it to decorate any method, as follows:"),e.k0s(),e.j41(1051,"app-copy-button")(1052,"pre")(1053,"code",34),e.EFF(1054,"\n@Public()\n@Get()\nfindAll() {\n  return [];\n}\n"),e.k0s()()(),e.j41(1055,"p"),e.EFF(1056,"Lastly, we need the "),e.j41(1057,"code"),e.EFF(1058,"JwtAuthGuard"),e.k0s(),e.EFF(1059," to return "),e.j41(1060,"code"),e.EFF(1061,"true"),e.k0s(),e.EFF(1062," when the "),e.j41(1063,"code"),e.EFF(1064,'"isPublic"'),e.k0s(),e.EFF(1065," metadata is found. For this, we'll use the "),e.j41(1066,"code"),e.EFF(1067,"Reflector"),e.k0s(),e.EFF(1068," class (read more "),e.j41(1069,"a",58),e.EFF(1070,"here"),e.k0s(),e.EFF(1071,")."),e.k0s(),e.j41(1072,"app-copy-button")(1073,"pre")(1074,"code",34),e.EFF(1075,"\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n"),e.k0s()()(),e.j41(1076,"h4",59)(1077,"span"),e.EFF(1078,"Request-scoped strategies"),e.k0s()(),e.j41(1079,"p"),e.EFF(1080,"The passport API is based on registering strategies to the global instance of the library. Therefore strategies are not designed to have request-dependent options or to be dynamically instantiated per request (read more about the "),e.j41(1081,"a",60),e.EFF(1082,"request-scoped"),e.k0s(),e.EFF(1083,' providers). When you configure your strategy to be request-scoped, Nest will never instantiate it since it\'s not tied to any specific route. There is no physical way to determine which "request-scoped" strategies should be executed per request.'),e.k0s(),e.j41(1084,"p"),e.EFF(1085,"However, there are ways to dynamically resolve request-scoped providers within the strategy. For this, we leverage the "),e.j41(1086,"a",61),e.EFF(1087,"module reference"),e.k0s(),e.EFF(1088," feature."),e.k0s(),e.j41(1089,"p"),e.EFF(1090,"First, open the "),e.j41(1091,"code"),e.EFF(1092,"local.strategy.ts"),e.k0s(),e.EFF(1093," file and inject the "),e.j41(1094,"code"),e.EFF(1095,"ModuleRef"),e.k0s(),e.EFF(1096," in the normal way:"),e.k0s(),e.j41(1097,"app-copy-button")(1098,"pre")(1099,"code",34),e.EFF(1100,"\nconstructor(private moduleRef: ModuleRef) {\n  super({\n    passReqToCallback: true,\n  });\n}\n"),e.k0s()()(),e.j41(1101,"blockquote",38)(1102,"strong"),e.EFF(1103,"Hint"),e.k0s(),e.EFF(1104," The "),e.j41(1105,"code"),e.EFF(1106,"ModuleRef"),e.k0s(),e.EFF(1107," class is imported from the "),e.j41(1108,"code"),e.EFF(1109,"@nestjs/core"),e.k0s(),e.EFF(1110," package.\n"),e.k0s(),e.j41(1111,"p"),e.EFF(1112,"Be sure to set the "),e.j41(1113,"code"),e.EFF(1114,"passReqToCallback"),e.k0s(),e.EFF(1115," configuration property to "),e.j41(1116,"code"),e.EFF(1117,"true"),e.k0s(),e.EFF(1118,", as shown above."),e.k0s(),e.j41(1119,"p"),e.EFF(1120,"In the next step, the request instance will be used to obtain the current context identifier, instead of generating a new one (read more about request context "),e.j41(1121,"a",62),e.EFF(1122,"here"),e.k0s(),e.EFF(1123,")."),e.k0s(),e.j41(1124,"p"),e.EFF(1125,"Now, inside the "),e.j41(1126,"code"),e.EFF(1127,"validate()"),e.k0s(),e.EFF(1128," method of the "),e.j41(1129,"code"),e.EFF(1130,"LocalStrategy"),e.k0s(),e.EFF(1131," class, use the "),e.j41(1132,"code"),e.EFF(1133,"getByRequest()"),e.k0s(),e.EFF(1134," method of the "),e.j41(1135,"code"),e.EFF(1136,"ContextIdFactory"),e.k0s(),e.EFF(1137," class to create a context id based on the request object, and pass this to the "),e.j41(1138,"code"),e.EFF(1139,"resolve()"),e.k0s(),e.EFF(1140," call:"),e.k0s(),e.j41(1141,"app-copy-button")(1142,"pre")(1143,"code",34),e.EFF(1144,'\nasync validate(\n  request: Request,\n  username: string,\n  password: string,\n) {\n  const contextId = ContextIdFactory.getByRequest(request);\n  // "AuthService" is a request-scoped provider\n  const authService = await this.moduleRef.resolve(AuthService, contextId);\n  ...\n}\n'),e.k0s()()(),e.j41(1145,"p"),e.EFF(1146,"In the example above, the "),e.j41(1147,"code"),e.EFF(1148,"resolve()"),e.k0s(),e.EFF(1149," method will asynchronously return the request-scoped instance of the "),e.j41(1150,"code"),e.EFF(1151,"AuthService"),e.k0s(),e.EFF(1152," provider (we assumed that "),e.j41(1153,"code"),e.EFF(1154,"AuthService"),e.k0s(),e.EFF(1155," is marked as a request-scoped provider)."),e.k0s(),e.j41(1156,"h4",63)(1157,"span"),e.EFF(1158,"Customize Passport"),e.k0s()(),e.j41(1159,"p"),e.EFF(1160,"Any standard Passport customization options can be passed the same way, using the "),e.j41(1161,"code"),e.EFF(1162,"register()"),e.k0s(),e.EFF(1163," method. The available options depend on the strategy being implemented. For example:"),e.k0s(),e.j41(1164,"app-copy-button")(1165,"pre")(1166,"code",34),e.EFF(1167,"\nPassportModule.register({ session: true });\n"),e.k0s()()(),e.j41(1168,"p"),e.EFF(1169,"You can also pass strategies an options object in their constructors to configure them.\nFor the local strategy you can pass e.g.:"),e.k0s(),e.j41(1170,"app-copy-button")(1171,"pre")(1172,"code",34),e.EFF(1173,"\nconstructor(private authService: AuthService) {\n  super({\n    usernameField: 'email',\n    passwordField: 'password',\n  });\n}\n"),e.k0s()()(),e.j41(1174,"p"),e.EFF(1175,"Take a look at the official "),e.j41(1176,"a",64),e.EFF(1177,"Passport Website"),e.k0s(),e.EFF(1178," for property names."),e.k0s(),e.j41(1179,"h4",65)(1180,"span"),e.EFF(1181,"Named strategies"),e.k0s()(),e.j41(1182,"p"),e.EFF(1183,"When implementing a strategy, you can provide a name for it by passing a second argument to the "),e.j41(1184,"code"),e.EFF(1185,"PassportStrategy"),e.k0s(),e.EFF(1186," function. If you don't do this, each strategy will have a default name (e.g., 'jwt' for jwt-strategy):"),e.k0s(),e.j41(1187,"app-copy-button")(1188,"pre")(1189,"code",34),e.EFF(1190,"\nexport class JwtStrategy extends PassportStrategy(Strategy, 'myjwt')\n"),e.k0s()()(),e.j41(1191,"p"),e.EFF(1192,"Then, you refer to this via a decorator like "),e.j41(1193,"code"),e.EFF(1194,"@UseGuards(AuthGuard('myjwt'))"),e.k0s(),e.EFF(1195,"."),e.k0s(),e.j41(1196,"h4",66)(1197,"span"),e.EFF(1198,"GraphQL"),e.k0s()(),e.j41(1199,"p"),e.EFF(1200,"In order to use an AuthGuard with "),e.j41(1201,"a",67),e.EFF(1202,"GraphQL"),e.k0s(),e.EFF(1203,", extend the built-in "),e.j41(1204,"code"),e.EFF(1205,"AuthGuard"),e.k0s(),e.EFF(1206," class and override the "),e.j41(1207,"code"),e.EFF(1208,"getRequest()"),e.k0s(),e.EFF(1209," method."),e.k0s(),e.j41(1210,"app-copy-button")(1211,"pre")(1212,"code",34),e.EFF(1213,"\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n"),e.k0s()()(),e.j41(1214,"p"),e.EFF(1215,"To get the current authenticated user in your graphql resolver, you can define a "),e.j41(1216,"code"),e.EFF(1217,"@CurrentUser()"),e.k0s(),e.EFF(1218," decorator:"),e.k0s(),e.j41(1219,"app-copy-button")(1220,"pre")(1221,"code",34),e.EFF(1222,"\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\nexport const CurrentUser = createParamDecorator(\n  (data: unknown, context: ExecutionContext) => {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req.user;\n  },\n);\n"),e.k0s()()(),e.j41(1223,"p"),e.EFF(1224,"To use above decorator in your resolver, be sure to include it as a parameter of your query or mutation:"),e.k0s(),e.j41(1225,"app-copy-button")(1226,"pre")(1227,"code",34),e.EFF(1228,"\n@Query(() => User)\n@UseGuards(GqlAuthGuard)\nwhoAmI(@CurrentUser() user: User) {\n  return this.usersService.findById(user.id);\n}\n"),e.k0s()()(),e.j41(1229,"p"),e.EFF(1230,"For the passport-local strategy, you'll also need to add the GraphQL context's arguments to the request body so Passport can access them for validation. Otherwise, you'll get an Unauthorized error."),e.k0s(),e.j41(1231,"app-copy-button")(1232,"pre")(1233,"code",34),e.EFF(1234,"\n@Injectable()\nexport class GqlLocalAuthGuard extends AuthGuard('local') {\n  getRequest(context: ExecutionContext) {\n    const gqlExecutionContext = GqlExecutionContext.create(context);\n    const gqlContext = gqlExecutionContext.getContext();\n    const gqlArgs = gqlExecutionContext.getArgs();\n\n    gqlContext.req.body = { ...gqlContext.req.body, ...gqlArgs };\n    return gqlContext.req;\n  }\n}\n"),e.k0s()()()()),2&s){const a=e.sdS(153),i=e.sdS(179),c=e.sdS(202),p=e.sdS(234),r=e.sdS(260),u=e.sdS(355),h=e.sdS(435),E=e.sdS(508),k=e.sdS(608),v=e.sdS(659),b=e.sdS(690),w=e.sdS(724),y=e.sdS(761),S=e.sdS(882),x=e.sdS(910),A=e.sdS(929);e.R7$(150),e.SpI(" ",e.i5U(151,74,"users/users.service",a.isJsActive),"\n"),e.R7$(4),e.AVh("hide",a.isJsActive),e.R7$(3),e.AVh("hide",!a.isJsActive),e.R7$(19),e.SpI(" ",e.i5U(177,77,"users/users.module",i.isJsActive),"\n"),e.R7$(4),e.AVh("hide",i.isJsActive),e.R7$(3),e.AVh("hide",!i.isJsActive),e.R7$(16),e.SpI(" ",e.i5U(200,80,"auth/auth.service",c.isJsActive),"\n"),e.R7$(4),e.AVh("hide",c.isJsActive),e.R7$(3),e.AVh("hide",!c.isJsActive),e.R7$(25),e.SpI(" ",e.i5U(232,83,"auth/auth.module",p.isJsActive),"\n"),e.R7$(4),e.AVh("hide",p.isJsActive),e.R7$(3),e.AVh("hide",!p.isJsActive),e.R7$(19),e.SpI(" ",e.i5U(258,86,"auth/local.strategy",r.isJsActive),"\n"),e.R7$(4),e.AVh("hide",r.isJsActive),e.R7$(3),e.AVh("hide",!r.isJsActive),e.R7$(22),e.Lme("super(","{"," usernameField: 'email' ","}",")"),e.R7$(66),e.SpI(" ",e.i5U(353,89,"auth/auth.module",u.isJsActive),"\n"),e.R7$(4),e.AVh("hide",u.isJsActive),e.R7$(3),e.AVh("hide",!u.isJsActive),e.R7$(73),e.SpI(" ",e.i5U(433,92,"app.controller",h.isJsActive),"\n"),e.R7$(4),e.AVh("hide",h.isJsActive),e.R7$(3),e.AVh("hide",!h.isJsActive),e.R7$(66),e.SpI(" ",e.i5U(506,95,"auth/local-auth.guard",E.isJsActive),"\n"),e.R7$(100),e.SpI(" ",e.i5U(606,98,"auth/auth.service",k.isJsActive),"\n"),e.R7$(4),e.AVh("hide",k.isJsActive),e.R7$(3),e.AVh("hide",!k.isJsActive),e.R7$(44),e.SpI(" ",e.i5U(657,101,"auth/constants",v.isJsActive),"\n"),e.R7$(4),e.AVh("hide",v.isJsActive),e.R7$(3),e.AVh("hide",!v.isJsActive),e.R7$(24),e.SpI(" ",e.i5U(688,104,"auth/auth.module",b.isJsActive),"\n"),e.R7$(4),e.AVh("hide",b.isJsActive),e.R7$(3),e.AVh("hide",!b.isJsActive),e.R7$(27),e.SpI(" ",e.i5U(722,107,"app.controller",w.isJsActive),"\n"),e.R7$(4),e.AVh("hide",w.isJsActive),e.R7$(3),e.AVh("hide",!w.isJsActive),e.R7$(30),e.SpI(" ",e.i5U(759,110,"auth/jwt.strategy",y.isJsActive),"\n"),e.R7$(4),e.AVh("hide",y.isJsActive),e.R7$(3),e.AVh("hide",!y.isJsActive),e.R7$(114),e.SpI(" ",e.i5U(880,113,"auth/auth.module",S.isJsActive),"\n"),e.R7$(4),e.AVh("hide",S.isJsActive),e.R7$(3),e.AVh("hide",!S.isJsActive),e.R7$(21),e.SpI(" ",e.i5U(908,116,"auth/jwt-auth.guard",x.isJsActive),"\n"),e.R7$(19),e.SpI(" ",e.i5U(927,119,"app.controller",A.isJsActive),"\n"),e.R7$(4),e.AVh("hide",A.isJsActive),e.R7$(3),e.AVh("hide",!A.isJsActive)}},dependencies:[g.O,d.a,Q.q,F.z,j.Wk,f.M],encapsulation:2,changeDetection:0})}return t})(),data:{title:"passport"}}];let K=(()=>{class t{static \u0275fac=function(s){return new(s||t)};static \u0275mod=e.$C({type:t});static \u0275inj=e.G2t({imports:[I.MD,T.G,j.iI.forChild(Y)]})}return t})()}}]);