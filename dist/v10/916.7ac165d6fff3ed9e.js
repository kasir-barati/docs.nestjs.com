"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[916],{8916:(N,h,i)=>{i.r(h),i.d(h,{GraphqlModule:()=>R});var u=i(177),F=i(2647),m=i(3887),r=i(8050),e=i(4438),a=i(4819);let E=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-migration"]],features:[e.Vt3],decls:176,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/migration.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","migrating-to-v11-from-v10"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/apollo-server/migration/"],["appAnchor","","id","apollo-packages"],[1,"language-bash"],["appAnchor","","id","mercurius-packages"],["id","migrating-to-v10-from-v9"],["appAnchor","","id","introducing-driver-packages"],[1,"language-typescript"],["appAnchor","","id","plugins"],["appAnchor","","id","directives"],["rel","nofollow","target","_blank","href","https://www.graphql-tools.com/docs/schema-directives"],["appAnchor","","id","federation"],[1,"info"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Migrating to v11 from v10"),e.k0s(),e.j41(7,"p"),e.EFF(8,"This chapter provides a set of guidelines for migrating from "),e.j41(9,"code"),e.EFF(10,"@nestjs/graphql"),e.k0s(),e.EFF(11," version 10 to version 11. As part of this major release, we updated the Apollo driver to be compatible with Apollo Server v4 (instead of v3). Note: there are several breaking changes in Apollo Server v4 (especially around plugins and ecosystem packages), so you'll have to update your codebase accordingly. For more information, see the "),e.j41(12,"a",6),e.EFF(13,"Apollo Server v4 migration guide"),e.k0s(),e.EFF(14,"."),e.k0s(),e.j41(15,"h4",7)(16,"span"),e.EFF(17,"Apollo packages"),e.k0s()(),e.j41(18,"p"),e.EFF(19,"Instead of installing the "),e.j41(20,"code"),e.EFF(21,"apollo-server-express"),e.k0s(),e.EFF(22," package, you'll have to install "),e.j41(23,"code"),e.EFF(24,"@apollo/server"),e.k0s(),e.EFF(25,":"),e.k0s(),e.j41(26,"pre")(27,"code",8),e.EFF(28,"\n$ npm uninstall apollo-server-express\n$ npm install @apollo/server\n"),e.k0s()(),e.j41(29,"p"),e.EFF(30,"If you use the Fastify adapter, you'll have to install the "),e.j41(31,"code"),e.EFF(32,"@as-integrations/fastify"),e.k0s(),e.EFF(33," package instead:"),e.k0s(),e.j41(34,"pre")(35,"code",8),e.EFF(36,"\n$ npm uninstall apollo-server-fastify\n$ npm install @apollo/server @as-integrations/fastify\n"),e.k0s()(),e.j41(37,"h4",9)(38,"span"),e.EFF(39,"Mercurius packages"),e.k0s()(),e.j41(40,"p"),e.EFF(41,"Mercurius gateway is no longer a part of the "),e.j41(42,"code"),e.EFF(43,"mercurius"),e.k0s(),e.EFF(44," package. Instead, you'll have to install the "),e.j41(45,"code"),e.EFF(46,"@mercuriusjs/gateway"),e.k0s(),e.EFF(47," package separately:"),e.k0s(),e.j41(48,"pre")(49,"code",8),e.EFF(50,"\n$ npm install @mercuriusjs/gateway\n"),e.k0s()(),e.j41(51,"p"),e.EFF(52,"Similarly, for creating federated schemas, you'll have to install the "),e.j41(53,"code"),e.EFF(54,"@mercuriusjs/federation"),e.k0s(),e.EFF(55," package:"),e.k0s(),e.j41(56,"pre")(57,"code",8),e.EFF(58,"\n$ npm install @mercuriusjs/federation\n"),e.k0s()(),e.j41(59,"h3",10),e.EFF(60,"Migrating to v10 from v9"),e.k0s(),e.j41(61,"p"),e.EFF(62,"This chapter provides a set of guidelines for migrating from "),e.j41(63,"code"),e.EFF(64,"@nestjs/graphql"),e.k0s(),e.EFF(65," version 9 to version 10. The focus of this major-version release is to provide a lighter, platform-agnostic core library."),e.k0s(),e.j41(66,"h4",11)(67,"span"),e.EFF(68,'Introducing "driver" packages'),e.k0s()(),e.j41(69,"p"),e.EFF(70,"In the latest version, we made a decision to break the "),e.j41(71,"code"),e.EFF(72,"@nestjs/graphql"),e.k0s(),e.EFF(73," package up into a few separate libraries, letting you choose whether to use Apollo ("),e.j41(74,"code"),e.EFF(75,"@nestjs/apollo"),e.k0s(),e.EFF(76,"), Mercurius ("),e.j41(77,"code"),e.EFF(78,"@nestjs/mercurius"),e.k0s(),e.EFF(79,"), or another GraphQL library in your project."),e.k0s(),e.j41(80,"p"),e.EFF(81,"This implies that now you have to explicitly specify what driver your application will use."),e.k0s(),e.j41(82,"pre")(83,"code",12),e.EFF(84,"\n// Before\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      autoSchemaFile: 'schema.gql',\n    }),\n  ],\n})\nexport class AppModule {}\n\n// After\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloDriverConfig>({\n      driver: ApolloDriver,\n      autoSchemaFile: 'schema.gql',\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(85,"h4",13)(86,"span"),e.EFF(87,"Plugins"),e.k0s()(),e.j41(88,"p"),e.EFF(89,"Apollo Server plugins let you perform custom operations in response to certain events. Since this is an exclusive Apollo feature, we moved it from the "),e.j41(90,"code"),e.EFF(91,"@nestjs/graphql"),e.k0s(),e.EFF(92," to the newly created "),e.j41(93,"code"),e.EFF(94,"@nestjs/apollo"),e.k0s(),e.EFF(95," package so you'll have to update imports in your application."),e.k0s(),e.j41(96,"pre")(97,"code",12),e.EFF(98,"\n// Before\nimport { Plugin } from '@nestjs/graphql';\n\n// After\nimport { Plugin } from '@nestjs/apollo';\n"),e.k0s()(),e.j41(99,"h4",14)(100,"span"),e.EFF(101,"Directives"),e.k0s()(),e.j41(102,"p")(103,"code"),e.EFF(104,"schemaDirectives"),e.k0s(),e.EFF(105," feature has been replaced with the new "),e.j41(106,"a",15),e.EFF(107,"Schema directives API"),e.k0s(),e.EFF(108," in v8 of "),e.j41(109,"code"),e.EFF(110,"@graphql-tools/schema"),e.k0s(),e.EFF(111," package."),e.k0s(),e.j41(112,"pre")(113,"code",12),e.EFF(114,"\n// Before\nimport { SchemaDirectiveVisitor } from '@graphql-tools/utils';\nimport { defaultFieldResolver, GraphQLField } from 'graphql';\n\nexport class UpperCaseDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field: GraphQLField<any, any>) {\n    const { resolve = defaultFieldResolver } = field;\n    field.resolve = async function (...args) {\n      const result = await resolve.apply(this, args);\n      if (typeof result === 'string') {\n        return result.toUpperCase();\n      }\n      return result;\n    };\n  }\n}\n\n// After\nimport { getDirective, MapperKind, mapSchema } from '@graphql-tools/utils';\nimport { defaultFieldResolver, GraphQLSchema } from 'graphql';\n\nexport function upperDirectiveTransformer(\n  schema: GraphQLSchema,\n  directiveName: string,\n) {\n  return mapSchema(schema, {\n    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {\n      const upperDirective = getDirective(\n        schema,\n        fieldConfig,\n        directiveName,\n      )?.[0];\n\n      if (upperDirective) {\n        const { resolve = defaultFieldResolver } = fieldConfig;\n\n        // Replace the original resolver with a function that *first* calls\n        // the original resolver, then converts its result to upper case\n        fieldConfig.resolve = async function (source, args, context, info) {\n          const result = await resolve(source, args, context, info);\n          if (typeof result === 'string') {\n            return result.toUpperCase();\n          }\n          return result;\n        };\n        return fieldConfig;\n      }\n    },\n  });\n}\n"),e.k0s()(),e.j41(115,"p"),e.EFF(116,"To apply this directive implementation to a schema that contains "),e.j41(117,"code"),e.EFF(118,"@upper"),e.k0s(),e.EFF(119," directives, use the "),e.j41(120,"code"),e.EFF(121,"transformSchema"),e.k0s(),e.EFF(122," function:"),e.k0s(),e.j41(123,"pre")(124,"code",12),e.EFF(125,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  ...\n  transformSchema: schema => upperDirectiveTransformer(schema, 'upper'),\n})\n"),e.k0s()(),e.j41(126,"h4",16)(127,"span"),e.EFF(128,"Federation"),e.k0s()(),e.j41(129,"p")(130,"code"),e.EFF(131,"GraphQLFederationModule"),e.k0s(),e.EFF(132," has been removed and replaced with the corresponding driver class:"),e.k0s(),e.j41(133,"pre")(134,"code",12),e.EFF(135,"\n// Before\nGraphQLFederationModule.forRoot({\n  autoSchemaFile: true,\n});\n\n// After\nGraphQLModule.forRoot<ApolloFederationDriverConfig>({\n  driver: ApolloFederationDriver,\n  autoSchemaFile: true,\n});\n"),e.k0s()(),e.j41(136,"blockquote",17)(137,"strong"),e.EFF(138,"Hint"),e.k0s(),e.EFF(139," Both "),e.j41(140,"code"),e.EFF(141,"ApolloFederationDriver"),e.k0s(),e.EFF(142," class and "),e.j41(143,"code"),e.EFF(144,"ApolloFederationDriverConfig"),e.k0s(),e.EFF(145," are exported from the "),e.j41(146,"code"),e.EFF(147,"@nestjs/apollo"),e.k0s(),e.EFF(148," package.\n"),e.k0s(),e.j41(149,"p"),e.EFF(150,"Likewise, instead of using a dedicated "),e.j41(151,"code"),e.EFF(152,"GraphQLGatewayModule"),e.k0s(),e.EFF(153,", simply pass the appropriate "),e.j41(154,"code"),e.EFF(155,"driver"),e.k0s(),e.EFF(156," class to your "),e.j41(157,"code"),e.EFF(158,"GraphQLModule"),e.k0s(),e.EFF(159," settings:"),e.k0s(),e.j41(160,"pre")(161,"code",12),e.EFF(162,"\n// Before\nGraphQLGatewayModule.forRoot({\n  gateway: {\n    supergraphSdl: new IntrospectAndCompose({\n      subgraphs: [\n        { name: 'users', url: 'http://localhost:3000/graphql' },\n        { name: 'posts', url: 'http://localhost:3001/graphql' },\n      ],\n    }),\n  },\n});\n\n// After\nGraphQLModule.forRoot<ApolloGatewayDriverConfig>({\n  driver: ApolloGatewayDriver,\n  gateway: {\n    supergraphSdl: new IntrospectAndCompose({\n      subgraphs: [\n        { name: 'users', url: 'http://localhost:3000/graphql' },\n        { name: 'posts', url: 'http://localhost:3001/graphql' },\n      ],\n    }),\n  },\n});\n"),e.k0s()(),e.j41(163,"blockquote",17)(164,"strong"),e.EFF(165,"Hint"),e.k0s(),e.EFF(166," Both "),e.j41(167,"code"),e.EFF(168,"ApolloGatewayDriver"),e.k0s(),e.EFF(169," class and "),e.j41(170,"code"),e.EFF(171,"ApolloGatewayDriverConfig"),e.k0s(),e.EFF(172," are exported from the "),e.j41(173,"code"),e.EFF(174,"@nestjs/apollo"),e.k0s(),e.EFF(175," package.\n"),e.k0s()())},dependencies:[a.a],encapsulation:2,changeDetection:0})}return t})();var l=i(5119),d=i(5663);let f=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-cli-plugin"]],features:[e.Vt3],decls:276,vars:8,consts:[["contentReference",""],["appd33b454096e59e9a929a141b90e7eb8a03a5f377",""],["app63adbd9f6e42098ea2deecb75ec8f9aee36844b3",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/cli-plugin.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","cli-plugin"],[1,"warning"],[1,"info"],["appAnchor","","id","overview"],[1,"filename"],[1,"language-typescript"],["appAnchor","","id","comments-introspection"],["appAnchor","","id","using-the-cli-plugin"],["routerLink","/cli/overview"],[1,"language-javascript"],["appAnchor","","id","swc-builder"],["href","/recipes/swc#type-checking"],[1,"language-bash"],["href","/recipes/swc#monorepo-and-cli-plugins"],["appAnchor","","id","integration-with-ts-jest-e2e-tests"],[1,"language-json"]],template:function(o,n){if(1&o&&(e.j41(0,"div",3,0)(2,"div",4)(3,"a",5),e.nrm(4,"i",6),e.k0s()(),e.j41(5,"h3",7),e.EFF(6,"CLI Plugin"),e.k0s(),e.j41(7,"blockquote",8)(8,"strong"),e.EFF(9,"Warning"),e.k0s(),e.EFF(10," This chapter applies only to the code first approach.\n"),e.k0s(),e.j41(11,"p"),e.EFF(12,"TypeScript's metadata reflection system has several limitations which make it impossible to, for instance, determine what properties a class consists of or recognize whether a given property is optional or required. However, some of these constraints can be addressed at compilation time. Nest provides a plugin that enhances the TypeScript compilation process to reduce the amount of boilerplate code required."),e.k0s(),e.j41(13,"blockquote",9)(14,"strong"),e.EFF(15,"Hint"),e.k0s(),e.EFF(16," This plugin is "),e.j41(17,"strong"),e.EFF(18,"opt-in"),e.k0s(),e.EFF(19,". If you prefer, you can declare all decorators manually, or only specific decorators where you need them.\n"),e.k0s(),e.j41(20,"h4",10)(21,"span"),e.EFF(22,"Overview"),e.k0s()(),e.j41(23,"p"),e.EFF(24,"The GraphQL plugin will automatically:"),e.k0s(),e.j41(25,"ul")(26,"li"),e.EFF(27,"annotate all input object, object type and args classes properties with "),e.j41(28,"code"),e.EFF(29,"@Field"),e.k0s(),e.EFF(30," unless "),e.j41(31,"code"),e.EFF(32,"@HideField"),e.k0s(),e.EFF(33," is used"),e.k0s(),e.j41(34,"li"),e.EFF(35,"set the "),e.j41(36,"code"),e.EFF(37,"nullable"),e.k0s(),e.EFF(38," property depending on the question mark (e.g. "),e.j41(39,"code"),e.EFF(40,"name?: string"),e.k0s(),e.EFF(41," will set "),e.j41(42,"code"),e.EFF(43,"nullable: true"),e.k0s(),e.EFF(44,")"),e.k0s(),e.j41(45,"li"),e.EFF(46,"set the "),e.j41(47,"code"),e.EFF(48,"type"),e.k0s(),e.EFF(49," property depending on the type (supports arrays as well)"),e.k0s(),e.j41(50,"li"),e.EFF(51,"generate descriptions for properties based on comments (if "),e.j41(52,"code"),e.EFF(53,"introspectComments"),e.k0s(),e.EFF(54," set to "),e.j41(55,"code"),e.EFF(56,"true"),e.k0s(),e.EFF(57,")"),e.k0s()(),e.j41(58,"p"),e.EFF(59,"Please, note that your filenames "),e.j41(60,"strong"),e.EFF(61,"must have"),e.k0s(),e.EFF(62," one of the following suffixes in order to be analyzed by the plugin: "),e.j41(63,"code"),e.EFF(64,"['.input.ts', '.args.ts', '.entity.ts', '.model.ts']"),e.k0s(),e.EFF(65," (e.g., "),e.j41(66,"code"),e.EFF(67,"author.entity.ts"),e.k0s(),e.EFF(68,"). If you are using a different suffix, you can adjust the plugin's behavior by specifying the "),e.j41(69,"code"),e.EFF(70,"typeFileNameSuffix"),e.k0s(),e.EFF(71," option (see below)."),e.k0s(),e.j41(72,"p"),e.EFF(73,"With what we've learned so far, you have to duplicate a lot of code to let the package know how your type should be declared in GraphQL. For example, you could define a simple "),e.j41(74,"code"),e.EFF(75,"Author"),e.k0s(),e.EFF(76," class as follows:"),e.k0s(),e.j41(77,"span",11),e.EFF(78),e.nI1(79,"extension"),e.nrm(80,"app-tabs",null,1),e.k0s(),e.j41(82,"pre")(83,"code",12),e.EFF(84,"\n@ObjectType()\nexport class Author {\n  @Field(type => ID)\n  id: number;\n\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ nullable: true })\n  lastName?: string;\n\n  @Field(type => [Post])\n  posts: Post[];\n}\n"),e.k0s()(),e.j41(85,"p"),e.EFF(86,"While not a significant issue with medium-sized projects, it becomes verbose & hard to maintain once you have a large set of classes."),e.k0s(),e.j41(87,"p"),e.EFF(88,"By enabling the GraphQL plugin, the above class definition can be declared simply:"),e.k0s(),e.j41(89,"span",11),e.EFF(90),e.nI1(91,"extension"),e.nrm(92,"app-tabs",null,2),e.k0s(),e.j41(94,"pre")(95,"code",12),e.EFF(96,"\n@ObjectType()\nexport class Author {\n  @Field(type => ID)\n  id: number;\n  firstName?: string;\n  lastName?: string;\n  posts: Post[];\n}\n"),e.k0s()(),e.j41(97,"p"),e.EFF(98,"The plugin adds appropriate decorators on-the-fly based on the "),e.j41(99,"strong"),e.EFF(100,"Abstract Syntax Tree"),e.k0s(),e.EFF(101,". Thus, you won't have to struggle with "),e.j41(102,"code"),e.EFF(103,"@Field"),e.k0s(),e.EFF(104," decorators scattered throughout the code."),e.k0s(),e.j41(105,"blockquote",9)(106,"strong"),e.EFF(107,"Hint"),e.k0s(),e.EFF(108," The plugin will automatically generate any missing GraphQL properties, but if you need to override them, simply set them explicitly via "),e.j41(109,"code"),e.EFF(110,"@Field()"),e.k0s(),e.EFF(111,".\n"),e.k0s(),e.j41(112,"h4",13)(113,"span"),e.EFF(114,"Comments introspection"),e.k0s()(),e.j41(115,"p"),e.EFF(116,"With the comments introspection feature enabled, CLI plugin will generate descriptions for fields based on comments."),e.k0s(),e.j41(117,"p"),e.EFF(118,"For example, given an example "),e.j41(119,"code"),e.EFF(120,"roles"),e.k0s(),e.EFF(121," property:"),e.k0s(),e.j41(122,"pre")(123,"code",12),e.EFF(124,"\n/**\n * A list of user's roles\n */\n@Field(() => [String], {\n  description: `A list of user's roles`\n})\nroles: string[];\n"),e.k0s()(),e.j41(125,"p"),e.EFF(126,"You must duplicate description values. With "),e.j41(127,"code"),e.EFF(128,"introspectComments"),e.k0s(),e.EFF(129," enabled, the CLI plugin can extract these comments and automatically provide descriptions for properties. Now, the above field can be declared simply as follows:"),e.k0s(),e.j41(130,"pre")(131,"code",12),e.EFF(132,"\n/**\n * A list of user's roles\n */\nroles: string[];\n"),e.k0s()(),e.j41(133,"h4",14)(134,"span"),e.EFF(135,"Using the CLI plugin"),e.k0s()(),e.j41(136,"p"),e.EFF(137,"To enable the plugin, open "),e.j41(138,"code"),e.EFF(139,"nest-cli.json"),e.k0s(),e.EFF(140," (if you use "),e.j41(141,"a",15),e.EFF(142,"Nest CLI"),e.k0s(),e.EFF(143,") and add the following "),e.j41(144,"code"),e.EFF(145,"plugins"),e.k0s(),e.EFF(146," configuration:"),e.k0s(),e.j41(147,"pre")(148,"code",16),e.EFF(149,'\n{\n  "collection": "@nestjs/schematics",\n  "sourceRoot": "src",\n  "compilerOptions": {\n    "plugins": ["@nestjs/graphql"]\n  }\n}\n'),e.k0s()(),e.j41(150,"p"),e.EFF(151,"You can use the "),e.j41(152,"code"),e.EFF(153,"options"),e.k0s(),e.EFF(154," property to customize the behavior of the plugin."),e.k0s(),e.j41(155,"pre")(156,"code",16),e.EFF(157,'\n"plugins": [\n  {\n    "name": "@nestjs/graphql",\n    "options": {\n      "typeFileNameSuffix": [".input.ts", ".args.ts"],\n      "introspectComments": true\n    }\n  }\n]\n'),e.k0s()(),e.j41(158,"p"),e.EFF(159,"The "),e.j41(160,"code"),e.EFF(161,"options"),e.k0s(),e.EFF(162," property has to fulfill the following interface:"),e.k0s(),e.j41(163,"pre")(164,"code",12),e.EFF(165,"\nexport interface PluginOptions {\n  typeFileNameSuffix?: string[];\n  introspectComments?: boolean;\n}\n"),e.k0s()(),e.j41(166,"table")(167,"tr")(168,"th"),e.EFF(169,"Option"),e.k0s(),e.j41(170,"th"),e.EFF(171,"Default"),e.k0s(),e.j41(172,"th"),e.EFF(173,"Description"),e.k0s()(),e.j41(174,"tr")(175,"td")(176,"code"),e.EFF(177,"typeFileNameSuffix"),e.k0s()(),e.j41(178,"td")(179,"code"),e.EFF(180,"['.input.ts', '.args.ts', '.entity.ts', '.model.ts']"),e.k0s()(),e.j41(181,"td"),e.EFF(182,"GraphQL types files suffix"),e.k0s()(),e.j41(183,"tr")(184,"td")(185,"code"),e.EFF(186,"introspectComments"),e.k0s()(),e.j41(187,"td")(188,"code"),e.EFF(189,"false"),e.k0s()(),e.j41(190,"td"),e.EFF(191,"If set to true, plugin will generate descriptions for properties based on comments"),e.k0s()()(),e.j41(192,"p"),e.EFF(193,"If you don't use the CLI but instead have a custom "),e.j41(194,"code"),e.EFF(195,"webpack"),e.k0s(),e.EFF(196," configuration, you can use this plugin in combination with "),e.j41(197,"code"),e.EFF(198,"ts-loader"),e.k0s(),e.EFF(199,":"),e.k0s(),e.j41(200,"pre")(201,"code",16),e.EFF(202,"\ngetCustomTransformers: (program: any) => ({\n  before: [require('@nestjs/graphql/plugin').before({}, program)]\n}),\n"),e.k0s()(),e.j41(203,"h4",17)(204,"span"),e.EFF(205,"SWC builder"),e.k0s()(),e.j41(206,"p"),e.EFF(207,"For standard setups (non-monorepo), to use CLI Plugins with the SWC builder, you need to enable type checking, as described "),e.j41(208,"a",18),e.EFF(209,"here"),e.k0s(),e.EFF(210,"."),e.k0s(),e.j41(211,"pre")(212,"code",19),e.EFF(213,"\n$ nest start -b swc --type-check\n"),e.k0s()(),e.j41(214,"p"),e.EFF(215,"For monorepo setups, follow the instructions "),e.j41(216,"a",20),e.EFF(217,"here"),e.k0s(),e.EFF(218,"."),e.k0s(),e.j41(219,"pre")(220,"code",19),e.EFF(221,"\n$ npx ts-node src/generate-metadata.ts\n# OR npx ts-node apps/{YOUR_APP}/src/generate-metadata.ts\n"),e.k0s()(),e.j41(222,"p"),e.EFF(223,"Now, the serialized metadata file must be loaded by the "),e.j41(224,"code"),e.EFF(225,"GraphQLModule"),e.k0s(),e.EFF(226," method, as shown below:"),e.k0s(),e.j41(227,"pre")(228,"code",12),e.EFF(229,"\nimport metadata from './metadata'; // <-- file auto-generated by the \"PluginMetadataGenerator\"\n\nGraphQLModule.forRoot<...>({\n  ..., // other options\n  metadata,\n}),\n"),e.k0s()(),e.j41(230,"h4",21)(231,"span"),e.EFF(232,"Integration with "),e.j41(233,"code"),e.EFF(234,"ts-jest"),e.k0s(),e.EFF(235," (e2e tests)"),e.k0s()(),e.j41(236,"p"),e.EFF(237,"When running e2e tests with this plugin enabled, you may run into issues with compiling schema. For example, one of the most common errors is:"),e.k0s(),e.j41(238,"pre")(239,"code",22),e.EFF(240,"\nObject type <name> must define one or more fields.\n"),e.k0s()(),e.j41(241,"p"),e.EFF(242,"This happens because "),e.j41(243,"code"),e.EFF(244,"jest"),e.k0s(),e.EFF(245," configuration does not import "),e.j41(246,"code"),e.EFF(247,"@nestjs/graphql/plugin"),e.k0s(),e.EFF(248," plugin anywhere."),e.k0s(),e.j41(249,"p"),e.EFF(250,"To fix this, create the following file in your e2e tests directory:"),e.k0s(),e.j41(251,"pre")(252,"code",16),e.EFF(253,"\nconst transformer = require('@nestjs/graphql/plugin');\n\nmodule.exports.name = 'nestjs-graphql-transformer';\n// you should change the version number anytime you change the configuration below - otherwise, jest will not detect changes\nmodule.exports.version = 1;\n\nmodule.exports.factory = (cs) => {\n  return transformer.before(\n    {\n      // @nestjs/graphql/plugin options (can be empty)\n    },\n    cs.program, // \"cs.tsCompiler.program\" for older versions of Jest (<= v27)\n  );\n};\n"),e.k0s()(),e.j41(254,"p"),e.EFF(255,"With this in place, import AST transformer within your "),e.j41(256,"code"),e.EFF(257,"jest"),e.k0s(),e.EFF(258," configuration file. By default (in the starter application), e2e tests configuration file is located under the "),e.j41(259,"code"),e.EFF(260,"test"),e.k0s(),e.EFF(261," folder and is named "),e.j41(262,"code"),e.EFF(263,"jest-e2e.json"),e.k0s(),e.EFF(264,"."),e.k0s(),e.j41(265,"pre")(266,"code",22),e.EFF(267,'\n{\n  ... // other configuration\n  "globals": {\n    "ts-jest": {\n      "astTransformers": {\n        "before": ["<path to the file created above>"]\n      }\n    }\n  }\n}\n'),e.k0s()(),e.j41(268,"p"),e.EFF(269,"If you use "),e.j41(270,"code"),e.EFF(271,"jest@^29"),e.k0s(),e.EFF(272,", then use the snippet below, as the previous approach got deprecated."),e.k0s(),e.j41(273,"pre")(274,"code",22),e.EFF(275,'\n{\n  ... // other configuration\n  "transform": {\n    "^.+\\\\.(t|j)s$": [\n      "ts-jest",\n      {\n        "astTransformers": {\n          "before": ["<path to the file created above>"]\n        }\n      }\n    ]\n  }\n}\n'),e.k0s()()()),2&o){const c=e.sdS(81),p=e.sdS(93);e.R7$(78),e.SpI(" ",e.i5U(79,2,"authors/models/author.model",c.isJsActive),"\n"),e.R7$(12),e.SpI(" ",e.i5U(91,5,"authors/models/author.model",p.isJsActive),"\n")}},dependencies:[l.O,a.a,F.Wk,d.M],encapsulation:2,changeDetection:0})}return t})(),k=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-complexity"]],features:[e.Vt3],decls:106,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/complexity.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","complexity"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/slicknode/graphql-query-complexity"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","getting-started"],[1,"language-typescript"],[1,"info"],["appAnchor","","id","field-level-complexity"],["appAnchor","","id","querymutation-level-complexity"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Complexity"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Warning"),e.k0s(),e.EFF(10," This chapter applies only to the code first approach.\n"),e.k0s(),e.j41(11,"p"),e.EFF(12,"Query complexity allows you to define how complex certain fields are, and to restrict queries with a "),e.j41(13,"strong"),e.EFF(14,"maximum complexity"),e.k0s(),e.EFF(15,". The idea is to define how complex each field is by using a simple number. A common default is to give each field a complexity of "),e.j41(16,"code"),e.EFF(17,"1"),e.k0s(),e.EFF(18,". In addition, the complexity calculation of a GraphQL query can be customized with so-called complexity estimators. A complexity estimator is a simple function that calculates the complexity for a field. You can add any number of complexity estimators to the rule, which are then executed one after another. The first estimator that returns a numeric complexity value determines the complexity for that field."),e.k0s(),e.j41(19,"p"),e.EFF(20,"The "),e.j41(21,"code"),e.EFF(22,"@nestjs/graphql"),e.k0s(),e.EFF(23," package integrates very well with tools like "),e.j41(24,"a",7),e.EFF(25,"graphql-query-complexity"),e.k0s(),e.EFF(26," that provides a cost analysis-based solution. With this library, you can reject queries to your GraphQL server that are deemed too costly to execute."),e.k0s(),e.j41(27,"h4",8)(28,"span"),e.EFF(29,"Installation"),e.k0s()(),e.j41(30,"p"),e.EFF(31,"To begin using it, we first install the required dependency."),e.k0s(),e.j41(32,"pre")(33,"code",9),e.EFF(34,"\n$ npm install --save graphql-query-complexity\n"),e.k0s()(),e.j41(35,"h4",10)(36,"span"),e.EFF(37,"Getting started"),e.k0s()(),e.j41(38,"p"),e.EFF(39,"Once the installation process is complete, we can define the "),e.j41(40,"code"),e.EFF(41,"ComplexityPlugin"),e.k0s(),e.EFF(42," class:"),e.k0s(),e.j41(43,"pre")(44,"code",11),e.EFF(45,"\nimport { GraphQLSchemaHost } from \"@nestjs/graphql\";\nimport { Plugin } from \"@nestjs/apollo\";\nimport {\n  ApolloServerPlugin,\n  GraphQLRequestListener,\n} from 'apollo-server-plugin-base';\nimport { GraphQLError } from 'graphql';\nimport {\n  fieldExtensionsEstimator,\n  getComplexity,\n  simpleEstimator,\n} from 'graphql-query-complexity';\n\n@Plugin()\nexport class ComplexityPlugin implements ApolloServerPlugin {\n  constructor(private gqlSchemaHost: GraphQLSchemaHost) {}\n\n  async requestDidStart(): Promise<GraphQLRequestListener> {\n    const maxComplexity = 20;\n    const { schema } = this.gqlSchemaHost;\n\n    return {\n      async didResolveOperation({ request, document }) {\n        const complexity = getComplexity({\n          schema,\n          operationName: request.operationName,\n          query: document,\n          variables: request.variables,\n          estimators: [\n            fieldExtensionsEstimator(),\n            simpleEstimator({ defaultComplexity: 1 }),\n          ],\n        });\n        if (complexity > maxComplexity) {\n          throw new GraphQLError(\n            `Query is too complex: ${complexity}. Maximum allowed complexity: ${maxComplexity}`,\n          );\n        }\n        console.log('Query Complexity:', complexity);\n      },\n    };\n  }\n}\n"),e.k0s()(),e.j41(46,"p"),e.EFF(47,"For demonstration purposes, we specified the maximum allowed complexity as "),e.j41(48,"code"),e.EFF(49,"20"),e.k0s(),e.EFF(50,". In the example above, we used 2 estimators, the "),e.j41(51,"code"),e.EFF(52,"simpleEstimator"),e.k0s(),e.EFF(53," and the "),e.j41(54,"code"),e.EFF(55,"fieldExtensionsEstimator"),e.k0s(),e.EFF(56,"."),e.k0s(),e.j41(57,"ul")(58,"li")(59,"code"),e.EFF(60,"simpleEstimator"),e.k0s(),e.EFF(61,": the simple estimator returns a fixed complexity for each field"),e.k0s(),e.j41(62,"li")(63,"code"),e.EFF(64,"fieldExtensionsEstimator"),e.k0s(),e.EFF(65,": the field extensions estimator extracts the complexity value for each field of your schema"),e.k0s()(),e.j41(66,"blockquote",12)(67,"strong"),e.EFF(68,"Hint"),e.k0s(),e.EFF(69," Remember to add this class to the providers array in any module.\n"),e.k0s(),e.j41(70,"h4",13)(71,"span"),e.EFF(72,"Field-level complexity"),e.k0s()(),e.j41(73,"p"),e.EFF(74,"With this plugin in place, we can now define the complexity for any field by specifying the "),e.j41(75,"code"),e.EFF(76,"complexity"),e.k0s(),e.EFF(77," property in the options object passed into the "),e.j41(78,"code"),e.EFF(79,"@Field()"),e.k0s(),e.EFF(80," decorator, as follows:"),e.k0s(),e.j41(81,"pre")(82,"code",11),e.EFF(83,"\n@Field({ complexity: 3 })\ntitle: string;\n"),e.k0s()(),e.j41(84,"p"),e.EFF(85,"Alternatively, you can define the estimator function:"),e.k0s(),e.j41(86,"pre")(87,"code",11),e.EFF(88,"\n@Field({ complexity: (options: ComplexityEstimatorArgs) => ... })\ntitle: string;\n"),e.k0s()(),e.j41(89,"h4",14)(90,"span"),e.EFF(91,"Query/Mutation-level complexity"),e.k0s()(),e.j41(92,"p"),e.EFF(93,"In addition, "),e.j41(94,"code"),e.EFF(95,"@Query()"),e.k0s(),e.EFF(96," and "),e.j41(97,"code"),e.EFF(98,"@Mutation()"),e.k0s(),e.EFF(99," decorators may have a "),e.j41(100,"code"),e.EFF(101,"complexity"),e.k0s(),e.EFF(102," property specified like so:"),e.k0s(),e.j41(103,"pre")(104,"code",11),e.EFF(105,"\n@Query({ complexity: (options: ComplexityEstimatorArgs) => options.args.count * options.childComplexity })\nitems(@Args('count') count: number) {\n  return this.itemsService.getItems({ count });\n}\n"),e.k0s()()())},dependencies:[a.a],encapsulation:2,changeDetection:0})}return t})(),g=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-directives"]],features:[e.Vt3],decls:122,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/directives.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","directives"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/queries/#directives"],["appAnchor","","id","custom-directives"],[1,"language-typescript"],["appAnchor","","id","code-first"],[1,"info"],[1,"warn"],["appAnchor","","id","schema-first"],[1,"language-graphql"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Directives"),e.k0s(),e.j41(7,"p"),e.EFF(8,"A directive can be attached to a field or fragment inclusion, and can affect execution of the query in any way the server desires (read more "),e.j41(9,"a",6),e.EFF(10,"here"),e.k0s(),e.EFF(11,"). The GraphQL specification provides several default directives:"),e.k0s(),e.j41(12,"ul")(13,"li")(14,"code"),e.EFF(15,"@include(if: Boolean)"),e.k0s(),e.EFF(16," - only include this field in the result if the argument is true"),e.k0s(),e.j41(17,"li")(18,"code"),e.EFF(19,"@skip(if: Boolean)"),e.k0s(),e.EFF(20," - skip this field if the argument is true"),e.k0s(),e.j41(21,"li")(22,"code"),e.EFF(23,"@deprecated(reason: String)"),e.k0s(),e.EFF(24," - marks field as deprecated with message"),e.k0s()(),e.j41(25,"p"),e.EFF(26,"A directive is an identifier preceded by a "),e.j41(27,"code"),e.EFF(28,"@"),e.k0s(),e.EFF(29," character, optionally followed by a list of named arguments, which can appear after almost any element in the GraphQL query and schema languages."),e.k0s(),e.j41(30,"h4",7)(31,"span"),e.EFF(32,"Custom directives"),e.k0s()(),e.j41(33,"p"),e.EFF(34,"To instruct what should happen when Apollo/Mercurius encounters your directive, you can create a transformer function. This function uses the "),e.j41(35,"code"),e.EFF(36,"mapSchema"),e.k0s(),e.EFF(37," function to iterate through locations in your schema (field definitions, type definitions, etc.) and perform corresponding transformations."),e.k0s(),e.j41(38,"pre")(39,"code",8),e.EFF(40,"\nimport { getDirective, MapperKind, mapSchema } from '@graphql-tools/utils';\nimport { defaultFieldResolver, GraphQLSchema } from 'graphql';\n\nexport function upperDirectiveTransformer(\n  schema: GraphQLSchema,\n  directiveName: string,\n) {\n  return mapSchema(schema, {\n    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {\n      const upperDirective = getDirective(\n        schema,\n        fieldConfig,\n        directiveName,\n      )?.[0];\n\n      if (upperDirective) {\n        const { resolve = defaultFieldResolver } = fieldConfig;\n\n        // Replace the original resolver with a function that *first* calls\n        // the original resolver, then converts its result to upper case\n        fieldConfig.resolve = async function (source, args, context, info) {\n          const result = await resolve(source, args, context, info);\n          if (typeof result === 'string') {\n            return result.toUpperCase();\n          }\n          return result;\n        };\n        return fieldConfig;\n      }\n    },\n  });\n}\n"),e.k0s()(),e.j41(41,"p"),e.EFF(42,"Now, apply the "),e.j41(43,"code"),e.EFF(44,"upperDirectiveTransformer"),e.k0s(),e.EFF(45," transformation function in the "),e.j41(46,"code"),e.EFF(47,"GraphQLModule#forRoot"),e.k0s(),e.EFF(48," method using the "),e.j41(49,"code"),e.EFF(50,"transformSchema"),e.k0s(),e.EFF(51," function:"),e.k0s(),e.j41(52,"pre")(53,"code",8),e.EFF(54,"\nGraphQLModule.forRoot({\n  // ...\n  transformSchema: (schema) => upperDirectiveTransformer(schema, 'upper'),\n});\n"),e.k0s()(),e.j41(55,"p"),e.EFF(56,"Once registered, the "),e.j41(57,"code"),e.EFF(58,"@upper"),e.k0s(),e.EFF(59," directive can be used in our schema. However, the way you apply the directive will vary depending on the approach you use (code first or schema first)."),e.k0s(),e.j41(60,"h4",9)(61,"span"),e.EFF(62,"Code first"),e.k0s()(),e.j41(63,"p"),e.EFF(64,"In the code first approach, use the "),e.j41(65,"code"),e.EFF(66,"@Directive()"),e.k0s(),e.EFF(67," decorator to apply the directive."),e.k0s(),e.j41(68,"pre")(69,"code",8),e.EFF(70,"\n@Directive('@upper')\n@Field()\ntitle: string;\n"),e.k0s()(),e.j41(71,"blockquote",10)(72,"strong"),e.EFF(73,"Hint"),e.k0s(),e.EFF(74," The "),e.j41(75,"code"),e.EFF(76,"@Directive()"),e.k0s(),e.EFF(77," decorator is exported from the "),e.j41(78,"code"),e.EFF(79,"@nestjs/graphql"),e.k0s(),e.EFF(80," package.\n"),e.k0s(),e.j41(81,"p"),e.EFF(82,"Directives can be applied on fields, field resolvers, input and object types, as well as queries, mutations, and subscriptions. Here's an example of the directive applied on the query handler level:"),e.k0s(),e.j41(83,"pre")(84,"code",8),e.EFF(85,"\n@Directive('@deprecated(reason: \"This query will be removed in the next version\")')\n@Query(returns => Author, { name: 'author' })\nasync getAuthor(@Args({ name: 'id', type: () => Int }) id: number) {\n  return this.authorsService.findOneById(id);\n}\n"),e.k0s()(),e.j41(86,"blockquote",11)(87,"strong"),e.EFF(88,"Warning"),e.k0s(),e.EFF(89," Directives applied through the "),e.j41(90,"code"),e.EFF(91,"@Directive()"),e.k0s(),e.EFF(92," decorator will not be reflected in the generated schema definition file.\n"),e.k0s(),e.j41(93,"p"),e.EFF(94,"Lastly, make sure to declare directives in the "),e.j41(95,"code"),e.EFF(96,"GraphQLModule"),e.k0s(),e.EFF(97,", as follows:"),e.k0s(),e.j41(98,"pre")(99,"code",8),e.EFF(100,"\nGraphQLModule.forRoot({\n  // ...,\n  transformSchema: schema => upperDirectiveTransformer(schema, 'upper'),\n  buildSchemaOptions: {\n    directives: [\n      new GraphQLDirective({\n        name: 'upper',\n        locations: [DirectiveLocation.FIELD_DEFINITION],\n      }),\n    ],\n  },\n}),\n"),e.k0s()(),e.j41(101,"blockquote",10)(102,"strong"),e.EFF(103,"Hint"),e.k0s(),e.EFF(104," Both "),e.j41(105,"code"),e.EFF(106,"GraphQLDirective"),e.k0s(),e.EFF(107," and "),e.j41(108,"code"),e.EFF(109,"DirectiveLocation"),e.k0s(),e.EFF(110," are exported from the "),e.j41(111,"code"),e.EFF(112,"graphql"),e.k0s(),e.EFF(113," package.\n"),e.k0s(),e.j41(114,"h4",12)(115,"span"),e.EFF(116,"Schema first"),e.k0s()(),e.j41(117,"p"),e.EFF(118,"In the schema first approach, apply directives directly in SDL."),e.k0s(),e.j41(119,"pre")(120,"code",13),e.EFF(121,"\ndirective @upper on FIELD_DEFINITION\n\ntype Post {\n  id: Int!\n  title: String! @upper\n  votes: Int\n}\n"),e.k0s()()())},dependencies:[a.a],encapsulation:2,changeDetection:0})}return t})(),j=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-extensions"]],features:[e.Vt3],decls:70,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/extensions.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","extensions"],[1,"warning"],["appAnchor","","id","adding-custom-metadata"],[1,"language-typescript"],["appAnchor","","id","using-custom-metadata"],["routerLink","/graphql/field-middleware"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Extensions"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Warning"),e.k0s(),e.EFF(10," This chapter applies only to the code first approach.\n"),e.k0s(),e.j41(11,"p"),e.EFF(12,"Extensions is an "),e.j41(13,"strong"),e.EFF(14,"advanced, low-level feature"),e.k0s(),e.EFF(15," that lets you define arbitrary data in the types configuration. Attaching custom metadata to certain fields allows you to create more sophisticated, generic solutions. For example, with extensions, you can define field-level roles required to access particular fields. Such roles can be reflected at runtime to determine whether the caller has sufficient permissions to retrieve a specific field."),e.k0s(),e.j41(16,"h4",7)(17,"span"),e.EFF(18,"Adding custom metadata"),e.k0s()(),e.j41(19,"p"),e.EFF(20,"To attach custom metadata for a field, use the "),e.j41(21,"code"),e.EFF(22,"@Extensions()"),e.k0s(),e.EFF(23," decorator exported from the "),e.j41(24,"code"),e.EFF(25,"@nestjs/graphql"),e.k0s(),e.EFF(26," package."),e.k0s(),e.j41(27,"pre")(28,"code",8),e.EFF(29,"\n@Field()\n@Extensions({ role: Role.ADMIN })\npassword: string;\n"),e.k0s()(),e.j41(30,"p"),e.EFF(31,"In the example above, we assigned the "),e.j41(32,"code"),e.EFF(33,"role"),e.k0s(),e.EFF(34," metadata property the value of "),e.j41(35,"code"),e.EFF(36,"Role.ADMIN"),e.k0s(),e.EFF(37,". "),e.j41(38,"code"),e.EFF(39,"Role"),e.k0s(),e.EFF(40," is a simple TypeScript enum that groups all the user roles available in our system."),e.k0s(),e.j41(41,"p"),e.EFF(42,"Note, in addition to setting metadata on fields, you can use the "),e.j41(43,"code"),e.EFF(44,"@Extensions()"),e.k0s(),e.EFF(45," decorator at the class level and method level (e.g., on the query handler)."),e.k0s(),e.j41(46,"h4",9)(47,"span"),e.EFF(48,"Using custom metadata"),e.k0s()(),e.j41(49,"p"),e.EFF(50,"Logic that leverages the custom metadata can be as complex as needed. For example, you can create a simple interceptor that stores/logs events per method invocation, or a "),e.j41(51,"a",10),e.EFF(52,"field middleware"),e.k0s(),e.EFF(53," that matches roles required to retrieve a field with the caller permissions (field-level permissions system)."),e.k0s(),e.j41(54,"p"),e.EFF(55,"For illustration purposes, let's define a "),e.j41(56,"code"),e.EFF(57,"checkRoleMiddleware"),e.k0s(),e.EFF(58," that compares a user's role (hardcoded here) with a role required to access a target field:"),e.k0s(),e.j41(59,"pre")(60,"code",8),e.EFF(61,'\nexport const checkRoleMiddleware: FieldMiddleware = async (\n  ctx: MiddlewareContext,\n  next: NextFn,\n) => {\n  const { info } = ctx;\n  const { extensions } = info.parentType.getFields()[info.fieldName];\n\n  /**\n   * In a real-world application, the "userRole" variable\n   * should represent the caller\'s (user) role (for example, "ctx.user.role").\n   */\n  const userRole = Role.USER;\n  if (userRole === extensions.role) {\n    // or just "return null" to ignore\n    throw new ForbiddenException(\n      `User does not have sufficient permissions to access "${info.fieldName}" field.`,\n    );\n  }\n  return next();\n};\n'),e.k0s()(),e.j41(62,"p"),e.EFF(63,"With this in place, we can register a middleware for the "),e.j41(64,"code"),e.EFF(65,"password"),e.k0s(),e.EFF(66," field, as follows:"),e.k0s(),e.j41(67,"pre")(68,"code",8),e.EFF(69,"\n@Field({ middleware: [checkRoleMiddleware] })\n@Extensions({ role: Role.ADMIN })\npassword: string;\n"),e.k0s()()())},dependencies:[a.a,F.Wk],encapsulation:2,changeDetection:0})}return t})(),y=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-federation"]],features:[e.Vt3],decls:610,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/federation.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","federation"],["rel","nofollow","target","_blank","href","https://blog.apollographql.com/apollo-federation-f260cf525d21"],[1,"warning"],["appAnchor","","id","federation-with-apollo"],[1,"language-bash"],["appAnchor","","id","schema-first"],[1,"language-graphql"],[1,"language-typescript"],["appAnchor","","id","code-first"],[1,"language-ts"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/31-graphql-federation-code-first/users-application"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/32-graphql-federation-schema-first/users-application"],["appAnchor","","id","federated-example-posts"],["appAnchor","","id","schema-first-1"],["appAnchor","","id","code-first-1"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/31-graphql-federation-code-first/posts-application"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/32-graphql-federation-schema-first/posts-application"],["appAnchor","","id","federated-example-gateway"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/31-graphql-federation-code-first/gateway"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/32-graphql-federation-schema-first/gateway"],["appAnchor","","id","federation-with-mercurius"],[1,"info"],["appAnchor","","id","schema-first-2"],["appAnchor","","id","code-first-2"],["appAnchor","","id","federated-example-posts-1"],["appAnchor","","id","schema-first-3"],["appAnchor","","id","code-first-3"],["appAnchor","","id","federated-example-gateway-1"],["id","federation-2"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/federation/federation-2/new-in-federation-2"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/federation/supported-subgraphs#javascript--typescript"],["appAnchor","","id","federated-example-users"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/federation/federation-2/new-in-federation-2#entities"],["appAnchor","","id","schema-first-4"],["appAnchor","","id","code-first-4"],["appAnchor","","id","federated-example-posts-2"],["appAnchor","","id","schema-first-5"],["appAnchor","","id","code-first-5"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Federation"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Federation offers a means of splitting your monolithic GraphQL server into independent microservices. It consists of two components: a gateway and one or more federated microservices. Each microservice holds part of the schema and the gateway merges the schemas into a single schema that can be consumed by the client."),e.k0s(),e.j41(9,"p"),e.EFF(10,"To quote the "),e.j41(11,"a",6),e.EFF(12,"Apollo docs"),e.k0s(),e.EFF(13,", Federation is designed with these core principles:"),e.k0s(),e.j41(14,"ul")(15,"li"),e.EFF(16,"Building a graph should be "),e.j41(17,"strong"),e.EFF(18,"declarative."),e.k0s(),e.EFF(19," With federation, you compose a graph declaratively from within your schema instead of writing imperative schema stitching code."),e.k0s(),e.j41(20,"li"),e.EFF(21,"Code should be separated by "),e.j41(22,"strong"),e.EFF(23,"concern"),e.k0s(),e.EFF(24,", not by types. Often no single team controls every aspect of an important type like a User or Product, so the definition of these types should be distributed across teams and codebases, rather than centralized."),e.k0s(),e.j41(25,"li"),e.EFF(26,"The graph should be simple for clients to consume. Together, federated services can form a complete, product-focused graph that accurately reflects how it\u2019s being consumed on the client."),e.k0s(),e.j41(27,"li"),e.EFF(28,"It\u2019s just "),e.j41(29,"strong"),e.EFF(30,"GraphQL"),e.k0s(),e.EFF(31,", using only spec-compliant features of the language. Any language, not just JavaScript, can implement federation."),e.k0s()(),e.j41(32,"blockquote",7)(33,"strong"),e.EFF(34,"Warning"),e.k0s(),e.EFF(35," Federation currently does not support subscriptions.\n"),e.k0s(),e.j41(36,"p"),e.EFF(37,"In the following sections, we'll set up a demo application that consists of a gateway and two federated endpoints: Users service and Posts service."),e.k0s(),e.j41(38,"h4",8)(39,"span"),e.EFF(40,"Federation with Apollo"),e.k0s()(),e.j41(41,"p"),e.EFF(42,"Start by installing the required dependencies:"),e.k0s(),e.j41(43,"pre")(44,"code",9),e.EFF(45,"\n$ npm install --save @apollo/subgraph\n"),e.k0s()(),e.j41(46,"h4",10)(47,"span"),e.EFF(48,"Schema first"),e.k0s()(),e.j41(49,"p"),e.EFF(50,'The "User service" provides a simple schema. Note the '),e.j41(51,"code"),e.EFF(52,"@key"),e.k0s(),e.EFF(53," directive: it instructs the Apollo query planner that a particular instance of "),e.j41(54,"code"),e.EFF(55,"User"),e.k0s(),e.EFF(56," can be fetched if you specify its "),e.j41(57,"code"),e.EFF(58,"id"),e.k0s(),e.EFF(59,". Also, note that we "),e.j41(60,"code"),e.EFF(61,"extend"),e.k0s(),e.EFF(62," the "),e.j41(63,"code"),e.EFF(64,"Query"),e.k0s(),e.EFF(65," type."),e.k0s(),e.j41(66,"pre")(67,"code",11),e.EFF(68,'\ntype User @key(fields: "id") {\n  id: ID!\n  name: String!\n}\n\nextend type Query {\n  getUser(id: ID!): User\n}\n'),e.k0s()(),e.j41(69,"p"),e.EFF(70,"Resolver provides one additional method named "),e.j41(71,"code"),e.EFF(72,"resolveReference()"),e.k0s(),e.EFF(73,". This method is triggered by the Apollo Gateway whenever a related resource requires a User instance. We'll see an example of this in the Posts service later. Please note that the method must be annotated with the "),e.j41(74,"code"),e.EFF(75,"@ResolveReference()"),e.k0s(),e.EFF(76," decorator."),e.k0s(),e.j41(77,"pre")(78,"code",12),e.EFF(79,"\nimport { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';\nimport { UsersService } from './users.service';\n\n@Resolver('User')\nexport class UsersResolver {\n  constructor(private usersService: UsersService) {}\n\n  @Query()\n  getUser(@Args('id') id: string) {\n    return this.usersService.findById(id);\n  }\n\n  @ResolveReference()\n  resolveReference(reference: { __typename: string; id: string }) {\n    return this.usersService.findById(reference.id);\n  }\n}\n"),e.k0s()(),e.j41(80,"p"),e.EFF(81,"Finally, we hook everything up by registering the "),e.j41(82,"code"),e.EFF(83,"GraphQLModule"),e.k0s(),e.EFF(84," passing the "),e.j41(85,"code"),e.EFF(86,"ApolloFederationDriver"),e.k0s(),e.EFF(87," driver in the configuration object:"),e.k0s(),e.j41(88,"pre")(89,"code",12),e.EFF(90,"\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { UsersResolver } from './users.resolver';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      typePaths: ['**/*.graphql'],\n    }),\n  ],\n  providers: [UsersResolver],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(91,"h4",13)(92,"span"),e.EFF(93,"Code first"),e.k0s()(),e.j41(94,"p"),e.EFF(95,"Start by adding some extra decorators to the "),e.j41(96,"code"),e.EFF(97,"User"),e.k0s(),e.EFF(98," entity."),e.k0s(),e.j41(99,"pre")(100,"code",14),e.EFF(101,"\nimport { Directive, Field, ID, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\n@Directive('@key(fields: \"id\")')\nexport class User {\n  @Field((type) => ID)\n  id: number;\n\n  @Field()\n  name: string;\n}\n"),e.k0s()(),e.j41(102,"p"),e.EFF(103,"Resolver provides one additional method named "),e.j41(104,"code"),e.EFF(105,"resolveReference()"),e.k0s(),e.EFF(106,". This method is triggered by the Apollo Gateway whenever a related resource requires a User instance. We'll see an example of this in the Posts service later. Please note that the method must be annotated with the "),e.j41(107,"code"),e.EFF(108,"@ResolveReference()"),e.k0s(),e.EFF(109," decorator."),e.k0s(),e.j41(110,"pre")(111,"code",14),e.EFF(112,"\nimport { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@Resolver((of) => User)\nexport class UsersResolver {\n  constructor(private usersService: UsersService) {}\n\n  @Query((returns) => User)\n  getUser(@Args('id') id: number): User {\n    return this.usersService.findById(id);\n  }\n\n  @ResolveReference()\n  resolveReference(reference: { __typename: string; id: number }): User {\n    return this.usersService.findById(reference.id);\n  }\n}\n"),e.k0s()(),e.j41(113,"p"),e.EFF(114,"Finally, we hook everything up by registering the "),e.j41(115,"code"),e.EFF(116,"GraphQLModule"),e.k0s(),e.EFF(117," passing the "),e.j41(118,"code"),e.EFF(119,"ApolloFederationDriver"),e.k0s(),e.EFF(120," driver in the configuration object:"),e.k0s(),e.j41(121,"pre")(122,"code",12),e.EFF(123,"\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { UsersResolver } from './users.resolver';\nimport { UsersService } from './users.service'; // Not included in this example\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      autoSchemaFile: true,\n    }),\n  ],\n  providers: [UsersResolver, UsersService],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(124,"p"),e.EFF(125,"A working example is available "),e.j41(126,"a",15),e.EFF(127,"here"),e.k0s(),e.EFF(128," in code first mode and "),e.j41(129,"a",16),e.EFF(130,"here"),e.k0s(),e.EFF(131," in schema first mode."),e.k0s(),e.j41(132,"h4",17)(133,"span"),e.EFF(134,"Federated example: Posts"),e.k0s()(),e.j41(135,"p"),e.EFF(136,"Post service is supposed to serve aggregated posts through the "),e.j41(137,"code"),e.EFF(138,"getPosts"),e.k0s(),e.EFF(139," query, but also extend our "),e.j41(140,"code"),e.EFF(141,"User"),e.k0s(),e.EFF(142," type with the "),e.j41(143,"code"),e.EFF(144,"user.posts"),e.k0s(),e.EFF(145," field."),e.k0s(),e.j41(146,"h4",18)(147,"span"),e.EFF(148,"Schema first"),e.k0s()(),e.j41(149,"p"),e.EFF(150,'"Posts service" references the '),e.j41(151,"code"),e.EFF(152,"User"),e.k0s(),e.EFF(153," type in its schema by marking it with the "),e.j41(154,"code"),e.EFF(155,"extend"),e.k0s(),e.EFF(156," keyword. It also declares one additional property on the "),e.j41(157,"code"),e.EFF(158,"User"),e.k0s(),e.EFF(159," type ("),e.j41(160,"code"),e.EFF(161,"posts"),e.k0s(),e.EFF(162,"). Note the "),e.j41(163,"code"),e.EFF(164,"@key"),e.k0s(),e.EFF(165," directive used for matching instances of User, and the "),e.j41(166,"code"),e.EFF(167,"@external"),e.k0s(),e.EFF(168," directive indicating that the "),e.j41(169,"code"),e.EFF(170,"id"),e.k0s(),e.EFF(171," field is managed elsewhere."),e.k0s(),e.j41(172,"pre")(173,"code",11),e.EFF(174,'\ntype Post @key(fields: "id") {\n  id: ID!\n  title: String!\n  body: String!\n  user: User\n}\n\nextend type User @key(fields: "id") {\n  id: ID! @external\n  posts: [Post]\n}\n\nextend type Query {\n  getPosts: [Post]\n}\n'),e.k0s()(),e.j41(175,"p"),e.EFF(176,"In the following example, the "),e.j41(177,"code"),e.EFF(178,"PostsResolver"),e.k0s(),e.EFF(179," provides the "),e.j41(180,"code"),e.EFF(181,"getUser()"),e.k0s(),e.EFF(182," method that returns a reference containing "),e.j41(183,"code"),e.EFF(184,"__typename"),e.k0s(),e.EFF(185," and some additional properties your application may need to resolve the reference, in this case "),e.j41(186,"code"),e.EFF(187,"id"),e.k0s(),e.EFF(188,". "),e.j41(189,"code"),e.EFF(190,"__typename"),e.k0s(),e.EFF(191,' is used by the GraphQL Gateway to pinpoint the microservice responsible for the User type and retrieve the corresponding instance. The "Users service" described above will be requested upon execution of the '),e.j41(192,"code"),e.EFF(193,"resolveReference()"),e.k0s(),e.EFF(194," method."),e.k0s(),e.j41(195,"pre")(196,"code",12),e.EFF(197,"\nimport { Query, Resolver, Parent, ResolveField } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { Post } from './posts.interfaces';\n\n@Resolver('Post')\nexport class PostsResolver {\n  constructor(private postsService: PostsService) {}\n\n  @Query('getPosts')\n  getPosts() {\n    return this.postsService.findAll();\n  }\n\n  @ResolveField('user')\n  getUser(@Parent() post: Post) {\n    return { __typename: 'User', id: post.userId };\n  }\n}\n"),e.k0s()(),e.j41(198,"p"),e.EFF(199,"Lastly, we must register the "),e.j41(200,"code"),e.EFF(201,"GraphQLModule"),e.k0s(),e.EFF(202,', similarly to what we did in the "Users service" section.'),e.k0s(),e.j41(203,"pre")(204,"code",12),e.EFF(205,"\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { PostsResolver } from './posts.resolver';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      typePaths: ['**/*.graphql'],\n    }),\n  ],\n  providers: [PostsResolvers],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(206,"h4",19)(207,"span"),e.EFF(208,"Code first"),e.k0s()(),e.j41(209,"p"),e.EFF(210,"First, we will have to declare a class representing the "),e.j41(211,"code"),e.EFF(212,"User"),e.k0s(),e.EFF(213," entity. Although the entity itself lives in another service, we will be using it (extending its definition) here. Note the "),e.j41(214,"code"),e.EFF(215,"@extends"),e.k0s(),e.EFF(216," and "),e.j41(217,"code"),e.EFF(218,"@external"),e.k0s(),e.EFF(219," directives."),e.k0s(),e.j41(220,"pre")(221,"code",14),e.EFF(222,"\nimport { Directive, ObjectType, Field, ID } from '@nestjs/graphql';\nimport { Post } from './post.entity';\n\n@ObjectType()\n@Directive('@extends')\n@Directive('@key(fields: \"id\")')\nexport class User {\n  @Field((type) => ID)\n  @Directive('@external')\n  id: number;\n\n  @Field((type) => [Post])\n  posts?: Post[];\n}\n"),e.k0s()(),e.j41(223,"p"),e.EFF(224,"Now let's create the corresponding resolver for our extension on the "),e.j41(225,"code"),e.EFF(226,"User"),e.k0s(),e.EFF(227," entity, as follows:"),e.k0s(),e.j41(228,"pre")(229,"code",14),e.EFF(230,"\nimport { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { Post } from './post.entity';\nimport { User } from './user.entity';\n\n@Resolver((of) => User)\nexport class UsersResolver {\n  constructor(private readonly postsService: PostsService) {}\n\n  @ResolveField((of) => [Post])\n  public posts(@Parent() user: User): Post[] {\n    return this.postsService.forAuthor(user.id);\n  }\n}\n"),e.k0s()(),e.j41(231,"p"),e.EFF(232,"We also have to define the "),e.j41(233,"code"),e.EFF(234,"Post"),e.k0s(),e.EFF(235," entity class:"),e.k0s(),e.j41(236,"pre")(237,"code",14),e.EFF(238,"\nimport { Directive, Field, ID, Int, ObjectType } from '@nestjs/graphql';\nimport { User } from './user.entity';\n\n@ObjectType()\n@Directive('@key(fields: \"id\")')\nexport class Post {\n  @Field((type) => ID)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field((type) => Int)\n  authorId: number;\n\n  @Field((type) => User)\n  user?: User;\n}\n"),e.k0s()(),e.j41(239,"p"),e.EFF(240,"And its resolver:"),e.k0s(),e.j41(241,"pre")(242,"code",14),e.EFF(243,"\nimport { Query, Args, ResolveField, Resolver, Parent } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { Post } from './post.entity';\nimport { User } from './user.entity';\n\n@Resolver((of) => Post)\nexport class PostsResolver {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Query((returns) => Post)\n  findPost(@Args('id') id: number): Post {\n    return this.postsService.findOne(id);\n  }\n\n  @Query((returns) => [Post])\n  getPosts(): Post[] {\n    return this.postsService.all();\n  }\n\n  @ResolveField((of) => User)\n  user(@Parent() post: Post): any {\n    return { __typename: 'User', id: post.authorId };\n  }\n}\n"),e.k0s()(),e.j41(244,"p"),e.EFF(245,"And finally, tie it together in a module. Note the schema build options, where we specify that "),e.j41(246,"code"),e.EFF(247,"User"),e.k0s(),e.EFF(248," is an orphaned (external) type."),e.k0s(),e.j41(249,"pre")(250,"code",14),e.EFF(251,"\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { PostsResolvers } from './posts.resolvers';\nimport { UsersResolvers } from './users.resolvers';\nimport { PostsService } from './posts.service'; // Not included in example\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      autoSchemaFile: true,\n      buildSchemaOptions: {\n        orphanedTypes: [User],\n      },\n    }),\n  ],\n  providers: [PostsResolver, UsersResolver, PostsService],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(252,"p"),e.EFF(253,"A working example is available "),e.j41(254,"a",20),e.EFF(255,"here"),e.k0s(),e.EFF(256," for the code first mode and "),e.j41(257,"a",21),e.EFF(258,"here"),e.k0s(),e.EFF(259," for the schema first mode."),e.k0s(),e.j41(260,"h4",22)(261,"span"),e.EFF(262,"Federated example: Gateway"),e.k0s()(),e.j41(263,"p"),e.EFF(264,"Start by installing the required dependency:"),e.k0s(),e.j41(265,"pre")(266,"code",9),e.EFF(267,"\n$ npm install --save @apollo/gateway\n"),e.k0s()(),e.j41(268,"p"),e.EFF(269,"The gateway requires a list of endpoints to be specified and it will auto-discover the corresponding schemas. Therefore the implementation of the gateway service will remain the same for both code and schema first approaches."),e.k0s(),e.j41(270,"pre")(271,"code",12),e.EFF(272,"\nimport { IntrospectAndCompose } from '@apollo/gateway';\nimport { ApolloGatewayDriver, ApolloGatewayDriverConfig } from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloGatewayDriverConfig>({\n      driver: ApolloGatewayDriver,\n      server: {\n        // ... Apollo server options\n        cors: true,\n      },\n      gateway: {\n        supergraphSdl: new IntrospectAndCompose({\n          subgraphs: [\n            { name: 'users', url: 'http://user-service/graphql' },\n            { name: 'posts', url: 'http://post-service/graphql' },\n          ],\n        }),\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(273,"p"),e.EFF(274,"A working example is available "),e.j41(275,"a",23),e.EFF(276,"here"),e.k0s(),e.EFF(277," for the code first mode and "),e.j41(278,"a",24),e.EFF(279,"here"),e.k0s(),e.EFF(280," for the schema first mode."),e.k0s(),e.j41(281,"h4",25)(282,"span"),e.EFF(283,"Federation with Mercurius"),e.k0s()(),e.j41(284,"p"),e.EFF(285,"Start by installing the required dependencies:"),e.k0s(),e.j41(286,"pre")(287,"code",9),e.EFF(288,"\n$ npm install --save @apollo/subgraph @nestjs/mercurius\n"),e.k0s()(),e.j41(289,"blockquote",26)(290,"strong"),e.EFF(291,"Note"),e.k0s(),e.EFF(292," The "),e.j41(293,"code"),e.EFF(294,"@apollo/subgraph"),e.k0s(),e.EFF(295," package is required to build a subgraph schema ("),e.j41(296,"code"),e.EFF(297,"buildSubgraphSchema"),e.k0s(),e.EFF(298,", "),e.j41(299,"code"),e.EFF(300,"printSubgraphSchema"),e.k0s(),e.EFF(301," functions).\n"),e.k0s(),e.j41(302,"h4",27)(303,"span"),e.EFF(304,"Schema first"),e.k0s()(),e.j41(305,"p"),e.EFF(306,'The "User service" provides a simple schema. Note the '),e.j41(307,"code"),e.EFF(308,"@key"),e.k0s(),e.EFF(309," directive: it instructs the Mercurius query planner that a particular instance of "),e.j41(310,"code"),e.EFF(311,"User"),e.k0s(),e.EFF(312," can be fetched if you specify its "),e.j41(313,"code"),e.EFF(314,"id"),e.k0s(),e.EFF(315,". Also, note that we "),e.j41(316,"code"),e.EFF(317,"extend"),e.k0s(),e.EFF(318," the "),e.j41(319,"code"),e.EFF(320,"Query"),e.k0s(),e.EFF(321," type."),e.k0s(),e.j41(322,"pre")(323,"code",11),e.EFF(324,'\ntype User @key(fields: "id") {\n  id: ID!\n  name: String!\n}\n\nextend type Query {\n  getUser(id: ID!): User\n}\n'),e.k0s()(),e.j41(325,"p"),e.EFF(326,"Resolver provides one additional method named "),e.j41(327,"code"),e.EFF(328,"resolveReference()"),e.k0s(),e.EFF(329,". This method is triggered by the Mercurius Gateway whenever a related resource requires a User instance. We'll see an example of this in the Posts service later. Please note that the method must be annotated with the "),e.j41(330,"code"),e.EFF(331,"@ResolveReference()"),e.k0s(),e.EFF(332," decorator."),e.k0s(),e.j41(333,"pre")(334,"code",12),e.EFF(335,"\nimport { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';\nimport { UsersService } from './users.service';\n\n@Resolver('User')\nexport class UsersResolver {\n  constructor(private usersService: UsersService) {}\n\n  @Query()\n  getUser(@Args('id') id: string) {\n    return this.usersService.findById(id);\n  }\n\n  @ResolveReference()\n  resolveReference(reference: { __typename: string; id: string }) {\n    return this.usersService.findById(reference.id);\n  }\n}\n"),e.k0s()(),e.j41(336,"p"),e.EFF(337,"Finally, we hook everything up by registering the "),e.j41(338,"code"),e.EFF(339,"GraphQLModule"),e.k0s(),e.EFF(340," passing the "),e.j41(341,"code"),e.EFF(342,"MercuriusFederationDriver"),e.k0s(),e.EFF(343," driver in the configuration object:"),e.k0s(),e.j41(344,"pre")(345,"code",12),e.EFF(346,"\nimport {\n  MercuriusFederationDriver,\n  MercuriusFederationDriverConfig,\n} from '@nestjs/mercurius';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { UsersResolver } from './users.resolver';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusFederationDriverConfig>({\n      driver: MercuriusFederationDriver,\n      typePaths: ['**/*.graphql'],\n      federationMetadata: true,\n    }),\n  ],\n  providers: [UsersResolver],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(347,"h4",28)(348,"span"),e.EFF(349,"Code first"),e.k0s()(),e.j41(350,"p"),e.EFF(351,"Start by adding some extra decorators to the "),e.j41(352,"code"),e.EFF(353,"User"),e.k0s(),e.EFF(354," entity."),e.k0s(),e.j41(355,"pre")(356,"code",14),e.EFF(357,"\nimport { Directive, Field, ID, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\n@Directive('@key(fields: \"id\")')\nexport class User {\n  @Field((type) => ID)\n  id: number;\n\n  @Field()\n  name: string;\n}\n"),e.k0s()(),e.j41(358,"p"),e.EFF(359,"Resolver provides one additional method named "),e.j41(360,"code"),e.EFF(361,"resolveReference()"),e.k0s(),e.EFF(362,". This method is triggered by the Mercurius Gateway whenever a related resource requires a User instance. We'll see an example of this in the Posts service later. Please note that the method must be annotated with the "),e.j41(363,"code"),e.EFF(364,"@ResolveReference()"),e.k0s(),e.EFF(365," decorator."),e.k0s(),e.j41(366,"pre")(367,"code",14),e.EFF(368,"\nimport { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@Resolver((of) => User)\nexport class UsersResolver {\n  constructor(private usersService: UsersService) {}\n\n  @Query((returns) => User)\n  getUser(@Args('id') id: number): User {\n    return this.usersService.findById(id);\n  }\n\n  @ResolveReference()\n  resolveReference(reference: { __typename: string; id: number }): User {\n    return this.usersService.findById(reference.id);\n  }\n}\n"),e.k0s()(),e.j41(369,"p"),e.EFF(370,"Finally, we hook everything up by registering the "),e.j41(371,"code"),e.EFF(372,"GraphQLModule"),e.k0s(),e.EFF(373," passing the "),e.j41(374,"code"),e.EFF(375,"MercuriusFederationDriver"),e.k0s(),e.EFF(376," driver in the configuration object:"),e.k0s(),e.j41(377,"pre")(378,"code",12),e.EFF(379,"\nimport {\n  MercuriusFederationDriver,\n  MercuriusFederationDriverConfig,\n} from '@nestjs/mercurius';\nimport { Module } from '@nestjs/common';\nimport { UsersResolver } from './users.resolver';\nimport { UsersService } from './users.service'; // Not included in this example\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusFederationDriverConfig>({\n      driver: MercuriusFederationDriver,\n      autoSchemaFile: true,\n      federationMetadata: true,\n    }),\n  ],\n  providers: [UsersResolver, UsersService],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(380,"h4",29)(381,"span"),e.EFF(382,"Federated example: Posts"),e.k0s()(),e.j41(383,"p"),e.EFF(384,"Post service is supposed to serve aggregated posts through the "),e.j41(385,"code"),e.EFF(386,"getPosts"),e.k0s(),e.EFF(387," query, but also extend our "),e.j41(388,"code"),e.EFF(389,"User"),e.k0s(),e.EFF(390," type with the "),e.j41(391,"code"),e.EFF(392,"user.posts"),e.k0s(),e.EFF(393," field."),e.k0s(),e.j41(394,"h4",30)(395,"span"),e.EFF(396,"Schema first"),e.k0s()(),e.j41(397,"p"),e.EFF(398,'"Posts service" references the '),e.j41(399,"code"),e.EFF(400,"User"),e.k0s(),e.EFF(401," type in its schema by marking it with the "),e.j41(402,"code"),e.EFF(403,"extend"),e.k0s(),e.EFF(404," keyword. It also declares one additional property on the "),e.j41(405,"code"),e.EFF(406,"User"),e.k0s(),e.EFF(407," type ("),e.j41(408,"code"),e.EFF(409,"posts"),e.k0s(),e.EFF(410,"). Note the "),e.j41(411,"code"),e.EFF(412,"@key"),e.k0s(),e.EFF(413," directive used for matching instances of User, and the "),e.j41(414,"code"),e.EFF(415,"@external"),e.k0s(),e.EFF(416," directive indicating that the "),e.j41(417,"code"),e.EFF(418,"id"),e.k0s(),e.EFF(419," field is managed elsewhere."),e.k0s(),e.j41(420,"pre")(421,"code",11),e.EFF(422,'\ntype Post @key(fields: "id") {\n  id: ID!\n  title: String!\n  body: String!\n  user: User\n}\n\nextend type User @key(fields: "id") {\n  id: ID! @external\n  posts: [Post]\n}\n\nextend type Query {\n  getPosts: [Post]\n}\n'),e.k0s()(),e.j41(423,"p"),e.EFF(424,"In the following example, the "),e.j41(425,"code"),e.EFF(426,"PostsResolver"),e.k0s(),e.EFF(427," provides the "),e.j41(428,"code"),e.EFF(429,"getUser()"),e.k0s(),e.EFF(430," method that returns a reference containing "),e.j41(431,"code"),e.EFF(432,"__typename"),e.k0s(),e.EFF(433," and some additional properties your application may need to resolve the reference, in this case "),e.j41(434,"code"),e.EFF(435,"id"),e.k0s(),e.EFF(436,". "),e.j41(437,"code"),e.EFF(438,"__typename"),e.k0s(),e.EFF(439,' is used by the GraphQL Gateway to pinpoint the microservice responsible for the User type and retrieve the corresponding instance. The "Users service" described above will be requested upon execution of the '),e.j41(440,"code"),e.EFF(441,"resolveReference()"),e.k0s(),e.EFF(442," method."),e.k0s(),e.j41(443,"pre")(444,"code",12),e.EFF(445,"\nimport { Query, Resolver, Parent, ResolveField } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { Post } from './posts.interfaces';\n\n@Resolver('Post')\nexport class PostsResolver {\n  constructor(private postsService: PostsService) {}\n\n  @Query('getPosts')\n  getPosts() {\n    return this.postsService.findAll();\n  }\n\n  @ResolveField('user')\n  getUser(@Parent() post: Post) {\n    return { __typename: 'User', id: post.userId };\n  }\n}\n"),e.k0s()(),e.j41(446,"p"),e.EFF(447,"Lastly, we must register the "),e.j41(448,"code"),e.EFF(449,"GraphQLModule"),e.k0s(),e.EFF(450,', similarly to what we did in the "Users service" section.'),e.k0s(),e.j41(451,"pre")(452,"code",12),e.EFF(453,"\nimport {\n  MercuriusFederationDriver,\n  MercuriusFederationDriverConfig,\n} from '@nestjs/mercurius';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { PostsResolver } from './posts.resolver';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusFederationDriverConfig>({\n      driver: MercuriusFederationDriver,\n      federationMetadata: true,\n      typePaths: ['**/*.graphql'],\n    }),\n  ],\n  providers: [PostsResolvers],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(454,"h4",31)(455,"span"),e.EFF(456,"Code first"),e.k0s()(),e.j41(457,"p"),e.EFF(458,"First, we will have to declare a class representing the "),e.j41(459,"code"),e.EFF(460,"User"),e.k0s(),e.EFF(461," entity. Although the entity itself lives in another service, we will be using it (extending its definition) here. Note the "),e.j41(462,"code"),e.EFF(463,"@extends"),e.k0s(),e.EFF(464," and "),e.j41(465,"code"),e.EFF(466,"@external"),e.k0s(),e.EFF(467," directives."),e.k0s(),e.j41(468,"pre")(469,"code",14),e.EFF(470,"\nimport { Directive, ObjectType, Field, ID } from '@nestjs/graphql';\nimport { Post } from './post.entity';\n\n@ObjectType()\n@Directive('@extends')\n@Directive('@key(fields: \"id\")')\nexport class User {\n  @Field((type) => ID)\n  @Directive('@external')\n  id: number;\n\n  @Field((type) => [Post])\n  posts?: Post[];\n}\n"),e.k0s()(),e.j41(471,"p"),e.EFF(472,"Now let's create the corresponding resolver for our extension on the "),e.j41(473,"code"),e.EFF(474,"User"),e.k0s(),e.EFF(475," entity, as follows:"),e.k0s(),e.j41(476,"pre")(477,"code",14),e.EFF(478,"\nimport { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { Post } from './post.entity';\nimport { User } from './user.entity';\n\n@Resolver((of) => User)\nexport class UsersResolver {\n  constructor(private readonly postsService: PostsService) {}\n\n  @ResolveField((of) => [Post])\n  public posts(@Parent() user: User): Post[] {\n    return this.postsService.forAuthor(user.id);\n  }\n}\n"),e.k0s()(),e.j41(479,"p"),e.EFF(480,"We also have to define the "),e.j41(481,"code"),e.EFF(482,"Post"),e.k0s(),e.EFF(483," entity class:"),e.k0s(),e.j41(484,"pre")(485,"code",14),e.EFF(486,"\nimport { Directive, Field, ID, Int, ObjectType } from '@nestjs/graphql';\nimport { User } from './user.entity';\n\n@ObjectType()\n@Directive('@key(fields: \"id\")')\nexport class Post {\n  @Field((type) => ID)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field((type) => Int)\n  authorId: number;\n\n  @Field((type) => User)\n  user?: User;\n}\n"),e.k0s()(),e.j41(487,"p"),e.EFF(488,"And its resolver:"),e.k0s(),e.j41(489,"pre")(490,"code",14),e.EFF(491,"\nimport { Query, Args, ResolveField, Resolver, Parent } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { Post } from './post.entity';\nimport { User } from './user.entity';\n\n@Resolver((of) => Post)\nexport class PostsResolver {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Query((returns) => Post)\n  findPost(@Args('id') id: number): Post {\n    return this.postsService.findOne(id);\n  }\n\n  @Query((returns) => [Post])\n  getPosts(): Post[] {\n    return this.postsService.all();\n  }\n\n  @ResolveField((of) => User)\n  user(@Parent() post: Post): any {\n    return { __typename: 'User', id: post.authorId };\n  }\n}\n"),e.k0s()(),e.j41(492,"p"),e.EFF(493,"And finally, tie it together in a module. Note the schema build options, where we specify that "),e.j41(494,"code"),e.EFF(495,"User"),e.k0s(),e.EFF(496," is an orphaned (external) type."),e.k0s(),e.j41(497,"pre")(498,"code",14),e.EFF(499,"\nimport {\n  MercuriusFederationDriver,\n  MercuriusFederationDriverConfig,\n} from '@nestjs/mercurius';\nimport { Module } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { PostsResolvers } from './posts.resolvers';\nimport { UsersResolvers } from './users.resolvers';\nimport { PostsService } from './posts.service'; // Not included in example\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusFederationDriverConfig>({\n      driver: MercuriusFederationDriver,\n      autoSchemaFile: true,\n      federationMetadata: true,\n      buildSchemaOptions: {\n        orphanedTypes: [User],\n      },\n    }),\n  ],\n  providers: [PostsResolver, UsersResolver, PostsService],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(500,"h4",32)(501,"span"),e.EFF(502,"Federated example: Gateway"),e.k0s()(),e.j41(503,"p"),e.EFF(504,"The gateway requires a list of endpoints to be specified and it will auto-discover the corresponding schemas. Therefore the implementation of the gateway service will remain the same for both code and schema first approaches."),e.k0s(),e.j41(505,"pre")(506,"code",12),e.EFF(507,"\nimport {\n  MercuriusGatewayDriver,\n  MercuriusGatewayDriverConfig,\n} from '@nestjs/mercurius';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusGatewayDriverConfig>({\n      driver: MercuriusGatewayDriver,\n      gateway: {\n        services: [\n          { name: 'users', url: 'http://user-service/graphql' },\n          { name: 'posts', url: 'http://post-service/graphql' },\n        ],\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(508,"h3",33),e.EFF(509,"Federation 2"),e.k0s(),e.j41(510,"p"),e.EFF(511,"To quote the "),e.j41(512,"a",34),e.EFF(513,"Apollo docs"),e.k0s(),e.EFF(514,", Federation 2 improves developer experience from the original Apollo Federation (called Federation 1 in this doc), which is backward compatible with most original supergraphs."),e.k0s(),e.j41(515,"blockquote",7)(516,"strong"),e.EFF(517,"Warning"),e.k0s(),e.EFF(518," Mercurius doesn't fully support Federation 2. You can see the list of libraries that support Federation 2 "),e.j41(519,"a",35),e.EFF(520,"here"),e.k0s(),e.EFF(521,".\n"),e.k0s(),e.j41(522,"p"),e.EFF(523,"In the following sections, we'll upgrade the previous example to Federation 2."),e.k0s(),e.j41(524,"h4",36)(525,"span"),e.EFF(526,"Federated example: Users"),e.k0s()(),e.j41(527,"p"),e.EFF(528,"One change in Federation 2 is that entities have no originating subgraph, so we don't need to extend "),e.j41(529,"code"),e.EFF(530,"Query"),e.k0s(),e.EFF(531," anymore. For more detail please refer to "),e.j41(532,"a",37),e.EFF(533,"the entities topic"),e.k0s(),e.EFF(534," in Apollo Federation 2 docs."),e.k0s(),e.j41(535,"h4",38)(536,"span"),e.EFF(537,"Schema first"),e.k0s()(),e.j41(538,"p"),e.EFF(539,"We can simply remove "),e.j41(540,"code"),e.EFF(541,"extend"),e.k0s(),e.EFF(542," keyword from the schema."),e.k0s(),e.j41(543,"pre")(544,"code",11),e.EFF(545,'\ntype User @key(fields: "id") {\n  id: ID!\n  name: String!\n}\n\ntype Query {\n  getUser(id: ID!): User\n}\n'),e.k0s()(),e.j41(546,"h4",39)(547,"span"),e.EFF(548,"Code first"),e.k0s()(),e.j41(549,"p"),e.EFF(550,"To use Federation 2, we need to specify the federation version in "),e.j41(551,"code"),e.EFF(552,"autoSchemaFile"),e.k0s(),e.EFF(553," option."),e.k0s(),e.j41(554,"pre")(555,"code",14),e.EFF(556,"\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { UsersResolver } from './users.resolver';\nimport { UsersService } from './users.service'; // Not included in this example\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      autoSchemaFile: {\n        federation: 2,\n      },\n    }),\n  ],\n  providers: [UsersResolver, UsersService],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(557,"h4",40)(558,"span"),e.EFF(559,"Federated example: Posts"),e.k0s()(),e.j41(560,"p"),e.EFF(561,"With the same reason as above, we don't need to extend "),e.j41(562,"code"),e.EFF(563,"User"),e.k0s(),e.EFF(564," and "),e.j41(565,"code"),e.EFF(566,"Query"),e.k0s(),e.EFF(567," anymore."),e.k0s(),e.j41(568,"h4",41)(569,"span"),e.EFF(570,"Schema first"),e.k0s()(),e.j41(571,"p"),e.EFF(572,"We can simply remove "),e.j41(573,"code"),e.EFF(574,"extend"),e.k0s(),e.EFF(575," and "),e.j41(576,"code"),e.EFF(577,"external"),e.k0s(),e.EFF(578," directives from the schema"),e.k0s(),e.j41(579,"pre")(580,"code",11),e.EFF(581,'\ntype Post @key(fields: "id") {\n  id: ID!\n  title: String!\n  body: String!\n  user: User\n}\n\ntype User @key(fields: "id") {\n  id: ID!\n  posts: [Post]\n}\n\ntype Query {\n  getPosts: [Post]\n}\n'),e.k0s()(),e.j41(582,"h4",42)(583,"span"),e.EFF(584,"Code first"),e.k0s()(),e.j41(585,"p"),e.EFF(586,"Since we don't extend "),e.j41(587,"code"),e.EFF(588,"User"),e.k0s(),e.EFF(589," entity anymore, we can simply remove "),e.j41(590,"code"),e.EFF(591,"extends"),e.k0s(),e.EFF(592," and "),e.j41(593,"code"),e.EFF(594,"external"),e.k0s(),e.EFF(595," directives from "),e.j41(596,"code"),e.EFF(597,"User"),e.k0s(),e.EFF(598,"."),e.k0s(),e.j41(599,"pre")(600,"code",14),e.EFF(601,"\nimport { Directive, ObjectType, Field, ID } from '@nestjs/graphql';\nimport { Post } from './post.entity';\n\n@ObjectType()\n@Directive('@key(fields: \"id\")')\nexport class User {\n  @Field((type) => ID)\n  id: number;\n\n  @Field((type) => [Post])\n  posts?: Post[];\n}\n"),e.k0s()(),e.j41(602,"p"),e.EFF(603,"Also, similarly to the User service, we need to specify in the "),e.j41(604,"code"),e.EFF(605,"GraphQLModule"),e.k0s(),e.EFF(606," to use Federation 2."),e.k0s(),e.j41(607,"pre")(608,"code",14),e.EFF(609,"\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { PostsResolvers } from './posts.resolvers';\nimport { UsersResolvers } from './users.resolvers';\nimport { PostsService } from './posts.service'; // Not included in example\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      autoSchemaFile: {\n        federation: 2,\n      },\n      buildSchemaOptions: {\n        orphanedTypes: [User],\n      },\n    }),\n  ],\n  providers: [PostsResolver, UsersResolver, PostsService],\n})\nexport class AppModule {}\n"),e.k0s()()())},dependencies:[a.a],encapsulation:2,changeDetection:0})}return t})(),v=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-field-middleware"]],features:[e.Vt3],decls:139,vars:2,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/field-middleware.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","field-middleware"],[1,"warning"],["appAnchor","","id","getting-started"],[1,"language-typescript"],[1,"info"],["routerLink","/graphql/extensions"],["href","/graphql/extensions#using-custom-metadata"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/graphql/issues/2446"],["href","/graphql/other-features#execute-enhancers-at-the-field-resolver-level"],["appAnchor","","id","global-field-middleware"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Field middleware"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Warning"),e.k0s(),e.EFF(10," This chapter applies only to the code first approach.\n"),e.k0s(),e.j41(11,"p"),e.EFF(12,"Field Middleware lets you run arbitrary code "),e.j41(13,"strong"),e.EFF(14,"before or after"),e.k0s(),e.EFF(15," a field is resolved. A field middleware can be used to convert the result of a field, validate the arguments of a field, or even check field-level roles (for example, required to access a target field for which a middleware function is executed)."),e.k0s(),e.j41(16,"p"),e.EFF(17,"You can connect multiple middleware functions to a field. In this case, they will be called sequentially along the chain where the previous middleware decides to call the next one. The order of the middleware functions in the "),e.j41(18,"code"),e.EFF(19,"middleware"),e.k0s(),e.EFF(20,' array is important. The first resolver is the "most-outer" layer, so it gets executed first and last (similarly to the '),e.j41(21,"code"),e.EFF(22,"graphql-middleware"),e.k0s(),e.EFF(23,' package). The second resolver is the "second-outer" layer, so it gets executed second and second to last.'),e.k0s(),e.j41(24,"h4",7)(25,"span"),e.EFF(26,"Getting started"),e.k0s()(),e.j41(27,"p"),e.EFF(28,"Let's start off by creating a simple middleware that will log a field value before it's sent back to the client:"),e.k0s(),e.j41(29,"pre")(30,"code",8),e.EFF(31,"\nimport { FieldMiddleware, MiddlewareContext, NextFn } from '@nestjs/graphql';\n\nconst loggerMiddleware: FieldMiddleware = async (\n  ctx: MiddlewareContext,\n  next: NextFn,\n) => {\n  const value = await next();\n  console.log(value);\n  return value;\n};\n"),e.k0s()(),e.j41(32,"blockquote",9)(33,"strong"),e.EFF(34,"Hint"),e.k0s(),e.EFF(35," The "),e.j41(36,"code"),e.EFF(37,"MiddlewareContext"),e.k0s(),e.EFF(38," is an object that consist of the same arguments that are normally received by the GraphQL resolver function ("),e.j41(39,"code"),e.EFF(40),e.k0s(),e.EFF(41,"), while "),e.j41(42,"code"),e.EFF(43,"NextFn"),e.k0s(),e.EFF(44," is a function that let you execute the next middleware in the stack (bound to this field) or the actual field resolver.\n"),e.k0s(),e.j41(45,"blockquote",6)(46,"strong"),e.EFF(47,"Warning"),e.k0s(),e.EFF(48," Field middleware functions cannot inject dependencies nor access Nest's DI container as they are designed to be very lightweight and shouldn't perform any potentially time-consuming operations (like retrieving data from the database). If you need to call external services/query data from the data source, you should do it in a guard/interceptor bounded to a root query/mutation handler and assign it to "),e.j41(49,"code"),e.EFF(50,"context"),e.k0s(),e.EFF(51," object which you can access from within the field middleware (specifically, from the "),e.j41(52,"code"),e.EFF(53,"MiddlewareContext"),e.k0s(),e.EFF(54," object).\n"),e.k0s(),e.j41(55,"p"),e.EFF(56,"Note that field middleware must match the "),e.j41(57,"code"),e.EFF(58,"FieldMiddleware"),e.k0s(),e.EFF(59," interface. In the example above, we first run the "),e.j41(60,"code"),e.EFF(61,"next()"),e.k0s(),e.EFF(62," function (which executes the actual field resolver and returns a field value) and then, we log this value to our terminal. Also, the value returned from the middleware function completely overrides the previous value and since we don't want to perform any changes, we simply return the original value."),e.k0s(),e.j41(63,"p"),e.EFF(64,"With this in place, we can register our middleware directly in the "),e.j41(65,"code"),e.EFF(66,"@Field()"),e.k0s(),e.EFF(67," decorator, as follows:"),e.k0s(),e.j41(68,"pre")(69,"code",8),e.EFF(70,"\n@ObjectType()\nexport class Recipe {\n  @Field({ middleware: [loggerMiddleware] })\n  title: string;\n}\n"),e.k0s()(),e.j41(71,"p"),e.EFF(72,"Now whenever we request the "),e.j41(73,"code"),e.EFF(74,"title"),e.k0s(),e.EFF(75," field of "),e.j41(76,"code"),e.EFF(77,"Recipe"),e.k0s(),e.EFF(78," object type, the original field's value will be logged to the console."),e.k0s(),e.j41(79,"blockquote",9)(80,"strong"),e.EFF(81,"Hint"),e.k0s(),e.EFF(82," To learn how you can implement a field-level permissions system with the use of "),e.j41(83,"a",10),e.EFF(84,"extensions"),e.k0s(),e.EFF(85," feature, check out this "),e.j41(86,"a",11),e.EFF(87,"section"),e.k0s(),e.EFF(88,".\n"),e.k0s(),e.j41(89,"blockquote",6)(90,"strong"),e.EFF(91,"Warning"),e.k0s(),e.EFF(92," Field middleware can be applied only to "),e.j41(93,"code"),e.EFF(94,"ObjectType"),e.k0s(),e.EFF(95," classes. For more details, check out this "),e.j41(96,"a",12),e.EFF(97,"issue"),e.k0s(),e.EFF(98,".\n"),e.k0s(),e.j41(99,"p"),e.EFF(100,"Also, as mentioned above, we can control the field's value from within the middleware function. For demonstration purposes, let's capitalise a recipe's title (if present):"),e.k0s(),e.j41(101,"pre")(102,"code",8),e.EFF(103,"\nconst value = await next();\nreturn value?.toUpperCase();\n"),e.k0s()(),e.j41(104,"p"),e.EFF(105,"In this case, every title will be automatically uppercased, when requested."),e.k0s(),e.j41(106,"p"),e.EFF(107,"Likewise, you can bind a field middleware to a custom field resolver (a method annotated with the "),e.j41(108,"code"),e.EFF(109,"@ResolveField()"),e.k0s(),e.EFF(110," decorator), as follows:"),e.k0s(),e.j41(111,"pre")(112,"code",8),e.EFF(113,"\n@ResolveField(() => String, { middleware: [loggerMiddleware] })\ntitle() {\n  return 'Placeholder';\n}\n"),e.k0s()(),e.j41(114,"blockquote",6)(115,"strong"),e.EFF(116,"Warning"),e.k0s(),e.EFF(117," In case enhancers are enabled at the field resolver level ("),e.j41(118,"a",13),e.EFF(119,"read more"),e.k0s(),e.EFF(120,"), field middleware functions will run before any interceptors, guards, etc., "),e.j41(121,"strong"),e.EFF(122,"bounded to the method"),e.k0s(),e.EFF(123," (but after the root-level enhancers registered for query or mutation handlers).\n"),e.k0s(),e.j41(124,"h4",14)(125,"span"),e.EFF(126,"Global field middleware"),e.k0s()(),e.j41(127,"p"),e.EFF(128,"In addition to binding a middleware directly to a specific field, you can also register one or multiple middleware functions globally. In this case, they will be automatically connected to all fields of your object types."),e.k0s(),e.j41(129,"pre")(130,"code",8),e.EFF(131,"\nGraphQLModule.forRoot({\n  autoSchemaFile: 'schema.gql',\n  buildSchemaOptions: {\n    fieldMiddleware: [loggerMiddleware],\n  },\n}),\n"),e.k0s()(),e.j41(132,"blockquote",9)(133,"strong"),e.EFF(134,"Hint"),e.k0s(),e.EFF(135," Globally registered field middleware functions will be executed "),e.j41(136,"strong"),e.EFF(137,"before"),e.k0s(),e.EFF(138," locally registered ones (those bound directly to specific fields).\n"),e.k0s()()),2&o&&(e.R7$(40),e.Lme("","{"," source, args, context, info ","}",""))},dependencies:[a.a,F.Wk],encapsulation:2,changeDetection:0})}return t})(),b=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-guards-interceptors"]],features:[e.Vt3],decls:236,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/guards-interceptors.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","other-features"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/apollo-server/schema/directives/"],["routerLink","/guards"],["routerLink","/interceptors"],["appAnchor","","id","overview"],["routerLink","/exception-filters"],["routerLink","/pipes"],["routerLink","/custom-decorators"],[1,"language-typescript"],["appAnchor","","id","execution-context"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/execution-context"],["appAnchor","","id","exception-filters"],[1,"info"],["appAnchor","","id","custom-decorators"],["appAnchor","","id","execute-enhancers-at-the-field-resolver-level"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/graphql/issues/320#issuecomment-511193229"],[1,""],["appAnchor","","id","creating-a-custom-driver"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Other features"),e.k0s(),e.j41(7,"p"),e.EFF(8,"In the GraphQL world, there is a lot of debate about handling issues like "),e.j41(9,"strong"),e.EFF(10,"authentication"),e.k0s(),e.EFF(11,", or "),e.j41(12,"strong"),e.EFF(13,"side-effects"),e.k0s(),e.EFF(14," of operations. Should we handle things inside the business logic? Should we use a higher-order function to enhance queries and mutations with authorization logic? Or should we use "),e.j41(15,"a",6),e.EFF(16,"schema directives"),e.k0s(),e.EFF(17,"? There is no single one-size-fits-all answer to these questions."),e.k0s(),e.j41(18,"p"),e.EFF(19,"Nest helps address these issues with its cross-platform features like "),e.j41(20,"a",7),e.EFF(21,"guards"),e.k0s(),e.EFF(22," and "),e.j41(23,"a",8),e.EFF(24,"interceptors"),e.k0s(),e.EFF(25,". The philosophy is to reduce redundancy and provide tooling that helps create well-structured, readable, and consistent applications."),e.k0s(),e.j41(26,"h4",9)(27,"span"),e.EFF(28,"Overview"),e.k0s()(),e.j41(29,"p"),e.EFF(30,"You can use standard "),e.j41(31,"a",7),e.EFF(32,"guards"),e.k0s(),e.EFF(33,", "),e.j41(34,"a",8),e.EFF(35,"interceptors"),e.k0s(),e.EFF(36,", "),e.j41(37,"a",10),e.EFF(38,"filters"),e.k0s(),e.EFF(39," and "),e.j41(40,"a",11),e.EFF(41,"pipes"),e.k0s(),e.EFF(42," in the same fashion with GraphQL as with any RESTful application. Additionally, you can easily create your own decorators by leveraging the "),e.j41(43,"a",12),e.EFF(44,"custom decorators"),e.k0s(),e.EFF(45," feature. Let's take a look at a sample GraphQL query handler."),e.k0s(),e.j41(46,"pre")(47,"code",13),e.EFF(48,"\n@Query('author')\n@UseGuards(AuthGuard)\nasync getAuthor(@Args('id', ParseIntPipe) id: number) {\n  return this.authorsService.findOneById(id);\n}\n"),e.k0s()(),e.j41(49,"p"),e.EFF(50,"As you can see, GraphQL works with both guards and pipes in the same way as HTTP REST handlers. Because of this, you can move your authentication logic to a guard; you can even reuse the same guard class across both a REST and GraphQL API interface. Similarly, interceptors work across both types of applications in the same way:"),e.k0s(),e.j41(51,"pre")(52,"code",13),e.EFF(53,"\n@Mutation()\n@UseInterceptors(EventsInterceptor)\nasync upvotePost(@Args('postId') postId: number) {\n  return this.postsService.upvoteById({ id: postId });\n}\n"),e.k0s()(),e.j41(54,"h4",14)(55,"span"),e.EFF(56,"Execution context"),e.k0s()(),e.j41(57,"p"),e.EFF(58,"Since GraphQL receives a different type of data in the incoming request, the "),e.j41(59,"a",15),e.EFF(60,"execution context"),e.k0s(),e.EFF(61," received by both guards and interceptors is somewhat different with GraphQL vs. REST. GraphQL resolvers have a distinct set of arguments: "),e.j41(62,"code"),e.EFF(63,"root"),e.k0s(),e.EFF(64,", "),e.j41(65,"code"),e.EFF(66,"args"),e.k0s(),e.EFF(67,", "),e.j41(68,"code"),e.EFF(69,"context"),e.k0s(),e.EFF(70,", and "),e.j41(71,"code"),e.EFF(72,"info"),e.k0s(),e.EFF(73,". Thus guards and interceptors must transform the generic "),e.j41(74,"code"),e.EFF(75,"ExecutionContext"),e.k0s(),e.EFF(76," to a "),e.j41(77,"code"),e.EFF(78,"GqlExecutionContext"),e.k0s(),e.EFF(79,". This is straightforward:"),e.k0s(),e.j41(80,"pre")(81,"code",13),e.EFF(82,"\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const ctx = GqlExecutionContext.create(context);\n    return true;\n  }\n}\n"),e.k0s()(),e.j41(83,"p"),e.EFF(84,"The GraphQL context object returned by "),e.j41(85,"code"),e.EFF(86,"GqlExecutionContext.create()"),e.k0s(),e.EFF(87," exposes a "),e.j41(88,"strong"),e.EFF(89,"get"),e.k0s(),e.EFF(90," method for each GraphQL resolver argument (e.g., "),e.j41(91,"code"),e.EFF(92,"getArgs()"),e.k0s(),e.EFF(93,", "),e.j41(94,"code"),e.EFF(95,"getContext()"),e.k0s(),e.EFF(96,", etc). Once transformed, we can easily pick out any GraphQL argument for the current request."),e.k0s(),e.j41(97,"h4",16)(98,"span"),e.EFF(99,"Exception filters"),e.k0s()(),e.j41(100,"p"),e.EFF(101,"Nest standard "),e.j41(102,"a",10),e.EFF(103,"exception filters"),e.k0s(),e.EFF(104," are compatible with GraphQL applications as well. As with "),e.j41(105,"code"),e.EFF(106,"ExecutionContext"),e.k0s(),e.EFF(107,", GraphQL apps should transform the "),e.j41(108,"code"),e.EFF(109,"ArgumentsHost"),e.k0s(),e.EFF(110," object to a "),e.j41(111,"code"),e.EFF(112,"GqlArgumentsHost"),e.k0s(),e.EFF(113," object."),e.k0s(),e.j41(114,"pre")(115,"code",13),e.EFF(116,"\n@Catch(HttpException)\nexport class HttpExceptionFilter implements GqlExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const gqlHost = GqlArgumentsHost.create(host);\n    return exception;\n  }\n}\n"),e.k0s()(),e.j41(117,"blockquote",17)(118,"strong"),e.EFF(119,"Hint"),e.k0s(),e.EFF(120," Both "),e.j41(121,"code"),e.EFF(122,"GqlExceptionFilter"),e.k0s(),e.EFF(123," and "),e.j41(124,"code"),e.EFF(125,"GqlArgumentsHost"),e.k0s(),e.EFF(126," are imported from the "),e.j41(127,"code"),e.EFF(128,"@nestjs/graphql"),e.k0s(),e.EFF(129," package.\n"),e.k0s(),e.j41(130,"p"),e.EFF(131,"Note that unlike the REST case, you don't use the native "),e.j41(132,"code"),e.EFF(133,"response"),e.k0s(),e.EFF(134," object to generate a response."),e.k0s(),e.j41(135,"h4",18)(136,"span"),e.EFF(137,"Custom decorators"),e.k0s()(),e.j41(138,"p"),e.EFF(139,"As mentioned, the "),e.j41(140,"a",12),e.EFF(141,"custom decorators"),e.k0s(),e.EFF(142," feature works as expected with GraphQL resolvers."),e.k0s(),e.j41(143,"pre")(144,"code",13),e.EFF(145,"\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) =>\n    GqlExecutionContext.create(ctx).getContext().user,\n);\n"),e.k0s()(),e.j41(146,"p"),e.EFF(147,"Use the "),e.j41(148,"code"),e.EFF(149,"@User()"),e.k0s(),e.EFF(150," custom decorator as follows:"),e.k0s(),e.j41(151,"pre")(152,"code",13),e.EFF(153,"\n@Mutation()\nasync upvotePost(\n  @User() user: UserEntity,\n  @Args('postId') postId: number,\n) {}\n"),e.k0s()(),e.j41(154,"blockquote",17)(155,"strong"),e.EFF(156,"Hint"),e.k0s(),e.EFF(157," In the above example, we have assumed that the "),e.j41(158,"code"),e.EFF(159,"user"),e.k0s(),e.EFF(160," object is assigned to the context of your GraphQL application.\n"),e.k0s(),e.j41(161,"h4",19)(162,"span"),e.EFF(163,"Execute enhancers at the field resolver level"),e.k0s()(),e.j41(164,"p"),e.EFF(165,"In the GraphQL context, Nest does not run "),e.j41(166,"strong"),e.EFF(167,"enhancers"),e.k0s(),e.EFF(168," (the generic name for interceptors, guards and filters) at the field level "),e.j41(169,"a",20),e.EFF(170,"see this issue"),e.k0s(),e.EFF(171,": they only run for the top level "),e.j41(172,"code"),e.EFF(173,"@Query()"),e.k0s(),e.EFF(174,"/"),e.j41(175,"code"),e.EFF(176,"@Mutation()"),e.k0s(),e.EFF(177," method. You can tell Nest to execute interceptors, guards or filters for methods annotated with "),e.j41(178,"code"),e.EFF(179,"@ResolveField()"),e.k0s(),e.EFF(180," by setting the "),e.j41(181,"code"),e.EFF(182,"fieldResolverEnhancers"),e.k0s(),e.EFF(183," option in "),e.j41(184,"code"),e.EFF(185,"GqlModuleOptions"),e.k0s(),e.EFF(186,". Pass it a list of "),e.j41(187,"code"),e.EFF(188,"'interceptors'"),e.k0s(),e.EFF(189,", "),e.j41(190,"code"),e.EFF(191,"'guards'"),e.k0s(),e.EFF(192,", and/or "),e.j41(193,"code"),e.EFF(194,"'filters'"),e.k0s(),e.EFF(195," as appropriate:"),e.k0s(),e.j41(196,"pre")(197,"code",13),e.EFF(198,"\nGraphQLModule.forRoot({\n  fieldResolverEnhancers: ['interceptors']\n}),\n"),e.k0s()(),e.j41(199,"blockquote",21)(200,"strong"),e.EFF(201,"Warning"),e.k0s(),e.EFF(202," Enabling enhancers for field resolvers can cause performance issues when you are returning lots of records and your field resolver is executed thousands of times. For this reason, when you enable "),e.j41(203,"code"),e.EFF(204,"fieldResolverEnhancers"),e.k0s(),e.EFF(205,", we advise you to skip execution of enhancers that are not strictly necessary for your field resolvers. You can do this using the following helper function:\n"),e.k0s(),e.j41(206,"pre")(207,"code",13),e.EFF(208,"\nexport function isResolvingGraphQLField(context: ExecutionContext): boolean {\n  if (context.getType<GqlContextType>() === 'graphql') {\n    const gqlContext = GqlExecutionContext.create(context);\n    const info = gqlContext.getInfo();\n    const parentType = info.parentType.name;\n    return parentType !== 'Query' && parentType !== 'Mutation';\n  }\n  return false;\n}\n"),e.k0s()(),e.j41(209,"h4",22)(210,"span"),e.EFF(211,"Creating a custom driver"),e.k0s()(),e.j41(212,"p"),e.EFF(213,"Nest provides two official drivers out-of-the-box: "),e.j41(214,"code"),e.EFF(215,"@nestjs/apollo"),e.k0s(),e.EFF(216," and "),e.j41(217,"code"),e.EFF(218,"@nestjs/mercurius"),e.k0s(),e.EFF(219,", as well as an API allowing developers to build new "),e.j41(220,"strong"),e.EFF(221,"custom drivers"),e.k0s(),e.EFF(222,". With a custom driver, you can integrate any GraphQL library or extend the existing integration, adding extra features on top."),e.k0s(),e.j41(223,"p"),e.EFF(224,"For example, to integrate the "),e.j41(225,"code"),e.EFF(226,"express-graphql"),e.k0s(),e.EFF(227," package, you could create the following driver class:"),e.k0s(),e.j41(228,"pre")(229,"code",13),e.EFF(230,"\nimport { AbstractGraphQLDriver, GqlModuleOptions } from '@nestjs/graphql';\nimport { graphqlHTTP } from 'express-graphql';\n\nclass ExpressGraphQLDriver extends AbstractGraphQLDriver {\n  async start(options: GqlModuleOptions<any>): Promise<void> {\n    options = await this.graphQlFactory.mergeWithSchema(options);\n\n    const { httpAdapter } = this.httpAdapterHost;\n    httpAdapter.use(\n      '/graphql',\n      graphqlHTTP({\n        schema: options.schema,\n        graphiql: true,\n      }),\n    );\n  }\n\n  async stop() {}\n}\n"),e.k0s()(),e.j41(231,"p"),e.EFF(232,"And then use it as follows:"),e.k0s(),e.j41(233,"pre")(234,"code",13),e.EFF(235,"\nGraphQLModule.forRoot({\n  driver: ExpressGraphQLDriver,\n});\n"),e.k0s()()())},dependencies:[a.a,F.Wk],encapsulation:2,changeDetection:0})}return t})(),w=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-interfaces"]],features:[e.Vt3],decls:131,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/interfaces.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","interfaces"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/schema/#interfaces"],["appAnchor","","id","code-first"],[1,"language-typescript"],[1,"warning"],[1,"language-graphql"],[1,"info"],["appAnchor","","id","interface-resolvers"],["appAnchor","","id","schema-first"],["routerLink","/graphql/quick-start"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Interfaces"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Like many type systems, GraphQL supports interfaces. An "),e.j41(9,"strong"),e.EFF(10,"Interface"),e.k0s(),e.EFF(11," is an abstract type that includes a certain set of fields that a type must include to implement the interface (read more "),e.j41(12,"a",6),e.EFF(13,"here"),e.k0s(),e.EFF(14,")."),e.k0s(),e.j41(15,"h4",7)(16,"span"),e.EFF(17,"Code first"),e.k0s()(),e.j41(18,"p"),e.EFF(19,"When using the code first approach, you define a GraphQL interface by creating an abstract class annotated with the "),e.j41(20,"code"),e.EFF(21,"@InterfaceType()"),e.k0s(),e.EFF(22," decorator exported from the "),e.j41(23,"code"),e.EFF(24,"@nestjs/graphql"),e.k0s(),e.EFF(25,"."),e.k0s(),e.j41(26,"pre")(27,"code",8),e.EFF(28,"\nimport { Field, ID, InterfaceType } from '@nestjs/graphql';\n\n@InterfaceType()\nexport abstract class Character {\n  @Field((type) => ID)\n  id: string;\n\n  @Field()\n  name: string;\n}\n"),e.k0s()(),e.j41(29,"blockquote",9)(30,"strong"),e.EFF(31,"Warning"),e.k0s(),e.EFF(32," TypeScript interfaces cannot be used to define GraphQL interfaces.\n"),e.k0s(),e.j41(33,"p"),e.EFF(34,"This will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(35,"pre")(36,"code",10),e.EFF(37,"\ninterface Character {\n  id: ID!\n  name: String!\n}\n"),e.k0s()(),e.j41(38,"p"),e.EFF(39,"Now, to implement the "),e.j41(40,"code"),e.EFF(41,"Character"),e.k0s(),e.EFF(42," interface, use the "),e.j41(43,"code"),e.EFF(44,"implements"),e.k0s(),e.EFF(45," key:"),e.k0s(),e.j41(46,"pre")(47,"code",8),e.EFF(48,"\n@ObjectType({\n  implements: () => [Character],\n})\nexport class Human implements Character {\n  id: string;\n  name: string;\n}\n"),e.k0s()(),e.j41(49,"blockquote",11)(50,"strong"),e.EFF(51,"Hint"),e.k0s(),e.EFF(52," The "),e.j41(53,"code"),e.EFF(54,"@ObjectType()"),e.k0s(),e.EFF(55," decorator is exported from the "),e.j41(56,"code"),e.EFF(57,"@nestjs/graphql"),e.k0s(),e.EFF(58," package.\n"),e.k0s(),e.j41(59,"p"),e.EFF(60,"The default "),e.j41(61,"code"),e.EFF(62,"resolveType()"),e.k0s(),e.EFF(63," function generated by the library extracts the type based on the value returned from the resolver method. This means that you must return class instances (you cannot return literal JavaScript objects)."),e.k0s(),e.j41(64,"p"),e.EFF(65,"To provide a customized "),e.j41(66,"code"),e.EFF(67,"resolveType()"),e.k0s(),e.EFF(68," function, pass the "),e.j41(69,"code"),e.EFF(70,"resolveType"),e.k0s(),e.EFF(71," property to the options object passed into the "),e.j41(72,"code"),e.EFF(73,"@InterfaceType()"),e.k0s(),e.EFF(74," decorator, as follows:"),e.k0s(),e.j41(75,"pre")(76,"code",8),e.EFF(77,"\n@InterfaceType({\n  resolveType(book) {\n    if (book.colors) {\n      return ColoringBook;\n    }\n    return TextBook;\n  },\n})\nexport abstract class Book {\n  @Field((type) => ID)\n  id: string;\n\n  @Field()\n  title: string;\n}\n"),e.k0s()(),e.j41(78,"h4",12)(79,"span"),e.EFF(80,"Interface resolvers"),e.k0s()(),e.j41(81,"p"),e.EFF(82,"So far, using interfaces, you could only share field definitions with your objects. If you also want to share the actual field resolvers implementation, you can create a dedicated interface resolver, as follows:"),e.k0s(),e.j41(83,"pre")(84,"code",8),e.EFF(85,"\nimport { Resolver, ResolveField, Parent, Info } from '@nestjs/graphql';\n\n@Resolver(type => Character) // Reminder: Character is an interface\nexport class CharacterInterfaceResolver {\n  @ResolveField(() => [Character])\n  friends(\n    @Parent() character, // Resolved object that implements Character\n    @Info() { parentType }, // Type of the object that implements Character\n    @Args('search', { type: () => String }) searchTerm: string,\n  ) {\n    // Get character's friends\n    return [];\n  }\n}\n"),e.k0s()(),e.j41(86,"p"),e.EFF(87,"Now the "),e.j41(88,"code"),e.EFF(89,"friends"),e.k0s(),e.EFF(90," field resolver is auto-registered for all object types that implement the "),e.j41(91,"code"),e.EFF(92,"Character"),e.k0s(),e.EFF(93," interface."),e.k0s(),e.j41(94,"h4",13)(95,"span"),e.EFF(96,"Schema first"),e.k0s()(),e.j41(97,"p"),e.EFF(98,"To define an interface in the schema first approach, simply create a GraphQL interface with SDL."),e.k0s(),e.j41(99,"pre")(100,"code",10),e.EFF(101,"\ninterface Character {\n  id: ID!\n  name: String!\n}\n"),e.k0s()(),e.j41(102,"p"),e.EFF(103,"Then, you can use the typings generation feature (as shown in the "),e.j41(104,"a",14),e.EFF(105,"quick start"),e.k0s(),e.EFF(106," chapter) to generate corresponding TypeScript definitions:"),e.k0s(),e.j41(107,"pre")(108,"code",8),e.EFF(109,"\nexport interface Character {\n  id: string;\n  name: string;\n}\n"),e.k0s()(),e.j41(110,"p"),e.EFF(111,"Interfaces require an extra "),e.j41(112,"code"),e.EFF(113,"__resolveType"),e.k0s(),e.EFF(114," field in the resolver map to determine which type the interface should resolve to. Let's create a "),e.j41(115,"code"),e.EFF(116,"CharactersResolver"),e.k0s(),e.EFF(117," class and define the "),e.j41(118,"code"),e.EFF(119,"__resolveType"),e.k0s(),e.EFF(120," method:"),e.k0s(),e.j41(121,"pre")(122,"code",8),e.EFF(123,"\n@Resolver('Character')\nexport class CharactersResolver {\n  @ResolveField()\n  __resolveType(value) {\n    if ('age' in value) {\n      return Person;\n    }\n    return null;\n  }\n}\n"),e.k0s()(),e.j41(124,"blockquote",11)(125,"strong"),e.EFF(126,"Hint"),e.k0s(),e.EFF(127," All decorators are exported from the "),e.j41(128,"code"),e.EFF(129,"@nestjs/graphql"),e.k0s(),e.EFF(130," package.\n"),e.k0s()())},encapsulation:2,changeDetection:0})}return t})(),A=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-mapped-types"]],features:[e.Vt3],decls:202,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/mapped-types.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","mapped-types"],[1,"warning"],["appAnchor","","id","partial"],[1,"language-typescript"],[1,"info"],["appAnchor","","id","pick"],["appAnchor","","id","omit"],["appAnchor","","id","intersection"],["appAnchor","","id","composition"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Mapped types"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Warning"),e.k0s(),e.EFF(10," This chapter applies only to the code first approach.\n"),e.k0s(),e.j41(11,"p"),e.EFF(12,"As you build out features like CRUD (Create/Read/Update/Delete) it's often useful to construct variants on a base entity type. Nest provides several utility functions that perform type transformations to make this task more convenient."),e.k0s(),e.j41(13,"h4",7)(14,"span"),e.EFF(15,"Partial"),e.k0s()(),e.j41(16,"p"),e.EFF(17,"When building input validation types (also called Data Transfer Objects or DTOs), it's often useful to build "),e.j41(18,"strong"),e.EFF(19,"create"),e.k0s(),e.EFF(20," and "),e.j41(21,"strong"),e.EFF(22,"update"),e.k0s(),e.EFF(23," variations on the same type. For example, the "),e.j41(24,"strong"),e.EFF(25,"create"),e.k0s(),e.EFF(26," variant may require all fields, while the "),e.j41(27,"strong"),e.EFF(28,"update"),e.k0s(),e.EFF(29," variant may make all fields optional."),e.k0s(),e.j41(30,"p"),e.EFF(31,"Nest provides the "),e.j41(32,"code"),e.EFF(33,"PartialType()"),e.k0s(),e.EFF(34," utility function to make this task easier and minimize boilerplate."),e.k0s(),e.j41(35,"p"),e.EFF(36,"The "),e.j41(37,"code"),e.EFF(38,"PartialType()"),e.k0s(),e.EFF(39," function returns a type (class) with all the properties of the input type set to optional. For example, suppose we have a "),e.j41(40,"strong"),e.EFF(41,"create"),e.k0s(),e.EFF(42," type as follows:"),e.k0s(),e.j41(43,"pre")(44,"code",8),e.EFF(45,"\n@InputType()\nclass CreateUserInput {\n  @Field()\n  email: string;\n\n  @Field()\n  password: string;\n\n  @Field()\n  firstName: string;\n}\n"),e.k0s()(),e.j41(46,"p"),e.EFF(47,"By default, all of these fields are required. To create a type with the same fields, but with each one optional, use "),e.j41(48,"code"),e.EFF(49,"PartialType()"),e.k0s(),e.EFF(50," passing the class reference ("),e.j41(51,"code"),e.EFF(52,"CreateUserInput"),e.k0s(),e.EFF(53,") as an argument:"),e.k0s(),e.j41(54,"pre")(55,"code",8),e.EFF(56,"\n@InputType()\nexport class UpdateUserInput extends PartialType(CreateUserInput) {}\n"),e.k0s()(),e.j41(57,"blockquote",9)(58,"strong"),e.EFF(59,"Hint"),e.k0s(),e.EFF(60," The "),e.j41(61,"code"),e.EFF(62,"PartialType()"),e.k0s(),e.EFF(63," function is imported from the "),e.j41(64,"code"),e.EFF(65,"@nestjs/graphql"),e.k0s(),e.EFF(66," package.\n"),e.k0s(),e.j41(67,"p"),e.EFF(68,"The "),e.j41(69,"code"),e.EFF(70,"PartialType()"),e.k0s(),e.EFF(71," function takes an optional second argument that is a reference to a decorator factory. This argument can be used to change the decorator function applied to the resulting (child) class. If not specified, the child class effectively uses the same decorator as the "),e.j41(72,"strong"),e.EFF(73,"parent"),e.k0s(),e.EFF(74," class (the class referenced in the first argument). In the example above, we are extending "),e.j41(75,"code"),e.EFF(76,"CreateUserInput"),e.k0s(),e.EFF(77," which is annotated with the "),e.j41(78,"code"),e.EFF(79,"@InputType()"),e.k0s(),e.EFF(80," decorator. Since we want "),e.j41(81,"code"),e.EFF(82,"UpdateUserInput"),e.k0s(),e.EFF(83," to also be treated as if it were decorated with "),e.j41(84,"code"),e.EFF(85,"@InputType()"),e.k0s(),e.EFF(86,", we didn't need to pass "),e.j41(87,"code"),e.EFF(88,"InputType"),e.k0s(),e.EFF(89," as the second argument. If the parent and child types are different, (e.g., the parent is decorated with "),e.j41(90,"code"),e.EFF(91,"@ObjectType"),e.k0s(),e.EFF(92,"), we would pass "),e.j41(93,"code"),e.EFF(94,"InputType"),e.k0s(),e.EFF(95," as the second argument. For example:"),e.k0s(),e.j41(96,"pre")(97,"code",8),e.EFF(98,"\n@InputType()\nexport class UpdateUserInput extends PartialType(User, InputType) {}\n"),e.k0s()(),e.j41(99,"h4",10)(100,"span"),e.EFF(101,"Pick"),e.k0s()(),e.j41(102,"p"),e.EFF(103,"The "),e.j41(104,"code"),e.EFF(105,"PickType()"),e.k0s(),e.EFF(106," function constructs a new type (class) by picking a set of properties from an input type. For example, suppose we start with a type like:"),e.k0s(),e.j41(107,"pre")(108,"code",8),e.EFF(109,"\n@InputType()\nclass CreateUserInput {\n  @Field()\n  email: string;\n\n  @Field()\n  password: string;\n\n  @Field()\n  firstName: string;\n}\n"),e.k0s()(),e.j41(110,"p"),e.EFF(111,"We can pick a set of properties from this class using the "),e.j41(112,"code"),e.EFF(113,"PickType()"),e.k0s(),e.EFF(114," utility function:"),e.k0s(),e.j41(115,"pre")(116,"code",8),e.EFF(117,"\n@InputType()\nexport class UpdateEmailInput extends PickType(CreateUserInput, [\n  'email',\n] as const) {}\n"),e.k0s()(),e.j41(118,"blockquote",9)(119,"strong"),e.EFF(120,"Hint"),e.k0s(),e.EFF(121," The "),e.j41(122,"code"),e.EFF(123,"PickType()"),e.k0s(),e.EFF(124," function is imported from the "),e.j41(125,"code"),e.EFF(126,"@nestjs/graphql"),e.k0s(),e.EFF(127," package.\n"),e.k0s(),e.j41(128,"h4",11)(129,"span"),e.EFF(130,"Omit"),e.k0s()(),e.j41(131,"p"),e.EFF(132,"The "),e.j41(133,"code"),e.EFF(134,"OmitType()"),e.k0s(),e.EFF(135," function constructs a type by picking all properties from an input type and then removing a particular set of keys. For example, suppose we start with a type like:"),e.k0s(),e.j41(136,"pre")(137,"code",8),e.EFF(138,"\n@InputType()\nclass CreateUserInput {\n  @Field()\n  email: string;\n\n  @Field()\n  password: string;\n\n  @Field()\n  firstName: string;\n}\n"),e.k0s()(),e.j41(139,"p"),e.EFF(140,"We can generate a derived type that has every property "),e.j41(141,"strong"),e.EFF(142,"except"),e.k0s(),e.j41(143,"code"),e.EFF(144,"email"),e.k0s(),e.EFF(145," as shown below. In this construct, the second argument to "),e.j41(146,"code"),e.EFF(147,"OmitType"),e.k0s(),e.EFF(148," is an array of property names."),e.k0s(),e.j41(149,"pre")(150,"code",8),e.EFF(151,"\n@InputType()\nexport class UpdateUserInput extends OmitType(CreateUserInput, [\n  'email',\n] as const) {}\n"),e.k0s()(),e.j41(152,"blockquote",9)(153,"strong"),e.EFF(154,"Hint"),e.k0s(),e.EFF(155," The "),e.j41(156,"code"),e.EFF(157,"OmitType()"),e.k0s(),e.EFF(158," function is imported from the "),e.j41(159,"code"),e.EFF(160,"@nestjs/graphql"),e.k0s(),e.EFF(161," package.\n"),e.k0s(),e.j41(162,"h4",12)(163,"span"),e.EFF(164,"Intersection"),e.k0s()(),e.j41(165,"p"),e.EFF(166,"The "),e.j41(167,"code"),e.EFF(168,"IntersectionType()"),e.k0s(),e.EFF(169," function combines two types into one new type (class). For example, suppose we start with two types like:"),e.k0s(),e.j41(170,"pre")(171,"code",8),e.EFF(172,"\n@InputType()\nclass CreateUserInput {\n  @Field()\n  email: string;\n\n  @Field()\n  password: string;\n}\n\n@ObjectType()\nexport class AdditionalUserInfo {\n  @Field()\n  firstName: string;\n\n  @Field()\n  lastName: string;\n}\n"),e.k0s()(),e.j41(173,"p"),e.EFF(174,"We can generate a new type that combines all properties in both types."),e.k0s(),e.j41(175,"pre")(176,"code",8),e.EFF(177,"\n@InputType()\nexport class UpdateUserInput extends IntersectionType(\n  CreateUserInput,\n  AdditionalUserInfo,\n) {}\n"),e.k0s()(),e.j41(178,"blockquote",9)(179,"strong"),e.EFF(180,"Hint"),e.k0s(),e.EFF(181," The "),e.j41(182,"code"),e.EFF(183,"IntersectionType()"),e.k0s(),e.EFF(184," function is imported from the "),e.j41(185,"code"),e.EFF(186,"@nestjs/graphql"),e.k0s(),e.EFF(187," package.\n"),e.k0s(),e.j41(188,"h4",13)(189,"span"),e.EFF(190,"Composition"),e.k0s()(),e.j41(191,"p"),e.EFF(192,"The type mapping utility functions are composable. For example, the following will produce a type (class) that has all of the properties of the "),e.j41(193,"code"),e.EFF(194,"CreateUserInput"),e.k0s(),e.EFF(195," type except for "),e.j41(196,"code"),e.EFF(197,"email"),e.k0s(),e.EFF(198,", and those properties will be set to optional:"),e.k0s(),e.j41(199,"pre")(200,"code",8),e.EFF(201,"\n@InputType()\nexport class UpdateUserInput extends PartialType(\n  OmitType(CreateUserInput, ['email'] as const),\n) {}\n"),e.k0s()()())},dependencies:[a.a],encapsulation:2,changeDetection:0})}return t})(),x=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-mutations"]],features:[e.Vt3],decls:145,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/mutations.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","mutations"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/queries/#mutations"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/graphql-tools/generate-schema.html"],["appAnchor","","id","code-first"],["routerLink","/graphql/resolvers"],[1,"language-typescript"],[1,"info"],[1,"language-graphql"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/schema/#input-types"],["routerLink","/graphql/cli-plugin"],["appAnchor","","id","schema-first"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Mutations"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Most discussions of GraphQL focus on data fetching, but any complete data platform needs a way to modify server-side data as well. In REST, any request could end up causing side-effects on the server, but best practice suggests we should not modify data in GET requests. GraphQL is similar - technically any query could be implemented to cause a data write. However, like REST, it's recommended to observe the convention that any operations that cause writes should be sent explicitly via a mutation (read more "),e.j41(9,"a",6),e.EFF(10,"here"),e.k0s(),e.EFF(11,")."),e.k0s(),e.j41(12,"p"),e.EFF(13,"The official "),e.j41(14,"a",7),e.EFF(15,"Apollo"),e.k0s(),e.EFF(16," documentation uses an "),e.j41(17,"code"),e.EFF(18,"upvotePost()"),e.k0s(),e.EFF(19," mutation example. This mutation implements a method to increase a post's "),e.j41(20,"code"),e.EFF(21,"votes"),e.k0s(),e.EFF(22," property value. To create an equivalent mutation in Nest, we'll make use of the "),e.j41(23,"code"),e.EFF(24,"@Mutation()"),e.k0s(),e.EFF(25," decorator."),e.k0s(),e.j41(26,"h4",8)(27,"span"),e.EFF(28,"Code first"),e.k0s()(),e.j41(29,"p"),e.EFF(30,"Let's add another method to the "),e.j41(31,"code"),e.EFF(32,"AuthorResolver"),e.k0s(),e.EFF(33," used in the previous section (see "),e.j41(34,"a",9),e.EFF(35,"resolvers"),e.k0s(),e.EFF(36,")."),e.k0s(),e.j41(37,"pre")(38,"code",10),e.EFF(39,"\n@Mutation(returns => Post)\nasync upvotePost(@Args({ name: 'postId', type: () => Int }) postId: number) {\n  return this.postsService.upvoteById({ id: postId });\n}\n"),e.k0s()(),e.j41(40,"blockquote",11)(41,"strong"),e.EFF(42,"Hint"),e.k0s(),e.EFF(43," All decorators (e.g., "),e.j41(44,"code"),e.EFF(45,"@Resolver"),e.k0s(),e.EFF(46,", "),e.j41(47,"code"),e.EFF(48,"@ResolveField"),e.k0s(),e.EFF(49,", "),e.j41(50,"code"),e.EFF(51,"@Args"),e.k0s(),e.EFF(52,", etc.) are exported from the "),e.j41(53,"code"),e.EFF(54,"@nestjs/graphql"),e.k0s(),e.EFF(55," package.\n"),e.k0s(),e.j41(56,"p"),e.EFF(57,"This will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(58,"pre")(59,"code",12),e.EFF(60,"\ntype Mutation {\n  upvotePost(postId: Int!): Post\n}\n"),e.k0s()(),e.j41(61,"p"),e.EFF(62,"The "),e.j41(63,"code"),e.EFF(64,"upvotePost()"),e.k0s(),e.EFF(65," method takes "),e.j41(66,"code"),e.EFF(67,"postId"),e.k0s(),e.EFF(68," ("),e.j41(69,"code"),e.EFF(70,"Int"),e.k0s(),e.EFF(71,") as an argument and returns an updated "),e.j41(72,"code"),e.EFF(73,"Post"),e.k0s(),e.EFF(74," entity. For the reasons explained in the "),e.j41(75,"a",9),e.EFF(76,"resolvers"),e.k0s(),e.EFF(77," section, we have to explicitly set the expected type."),e.k0s(),e.j41(78,"p"),e.EFF(79,"If the mutation needs to take an object as an argument, we can create an "),e.j41(80,"strong"),e.EFF(81,"input type"),e.k0s(),e.EFF(82,". The input type is a special kind of object type that can be passed in as an argument (read more "),e.j41(83,"a",13),e.EFF(84,"here"),e.k0s(),e.EFF(85,"). To declare an input type, use the "),e.j41(86,"code"),e.EFF(87,"@InputType()"),e.k0s(),e.EFF(88," decorator."),e.k0s(),e.j41(89,"pre")(90,"code",10),e.EFF(91,"\nimport { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class UpvotePostInput {\n  @Field()\n  postId: number;\n}\n"),e.k0s()(),e.j41(92,"blockquote",11)(93,"strong"),e.EFF(94,"Hint"),e.k0s(),e.EFF(95," The "),e.j41(96,"code"),e.EFF(97,"@InputType()"),e.k0s(),e.EFF(98," decorator takes an options object as an argument, so you can, for example, specify the input type's description. Note that, due to TypeScript's metadata reflection system limitations, you must either use the "),e.j41(99,"code"),e.EFF(100,"@Field"),e.k0s(),e.EFF(101," decorator to manually indicate a type, or use a "),e.j41(102,"a",14),e.EFF(103,"CLI plugin"),e.k0s(),e.EFF(104,".\n"),e.k0s(),e.j41(105,"p"),e.EFF(106,"We can then use this type in the resolver class:"),e.k0s(),e.j41(107,"pre")(108,"code",10),e.EFF(109,"\n@Mutation(returns => Post)\nasync upvotePost(\n  @Args('upvotePostData') upvotePostData: UpvotePostInput,\n) {}\n"),e.k0s()(),e.j41(110,"h4",15)(111,"span"),e.EFF(112,"Schema first"),e.k0s()(),e.j41(113,"p"),e.EFF(114,"Let's extend our "),e.j41(115,"code"),e.EFF(116,"AuthorResolver"),e.k0s(),e.EFF(117," used in the previous section (see "),e.j41(118,"a",9),e.EFF(119,"resolvers"),e.k0s(),e.EFF(120,")."),e.k0s(),e.j41(121,"pre")(122,"code",10),e.EFF(123,"\n@Mutation()\nasync upvotePost(@Args('postId') postId: number) {\n  return this.postsService.upvoteById({ id: postId });\n}\n"),e.k0s()(),e.j41(124,"p"),e.EFF(125,"Note that we assumed above that the business logic has been moved to the "),e.j41(126,"code"),e.EFF(127,"PostsService"),e.k0s(),e.EFF(128," (querying the post and incrementing its "),e.j41(129,"code"),e.EFF(130,"votes"),e.k0s(),e.EFF(131," property). The logic inside the "),e.j41(132,"code"),e.EFF(133,"PostsService"),e.k0s(),e.EFF(134," class can be as simple or sophisticated as needed. The main point of this example is to show how resolvers can interact with other providers."),e.k0s(),e.j41(135,"p"),e.EFF(136,"The last step is to add our mutation to the existing types definition."),e.k0s(),e.j41(137,"pre")(138,"code",12),e.EFF(139,"\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String\n  votes: Int\n}\n\ntype Query {\n  author(id: Int!): Author\n}\n\ntype Mutation {\n  upvotePost(postId: Int!): Post\n}\n"),e.k0s()(),e.j41(140,"p"),e.EFF(141,"The "),e.j41(142,"code"),e.EFF(143,"upvotePost(postId: Int!): Post"),e.k0s(),e.EFF(144," mutation is now available to be called as part of our application's GraphQL API."),e.k0s()())},dependencies:[a.a,F.Wk],encapsulation:2,changeDetection:0})}return t})(),S=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-plugins"]],features:[e.Vt3],decls:97,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/plugins.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","plugins-with-apollo"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/apollo-server/integrations/plugins/"],["appAnchor","","id","custom-plugins"],[1,"language-typescript"],["appAnchor","","id","using-external-plugins"],[1,"info"],["appAnchor","","id","plugins-with-mercurius"],["rel","nofollow","target","_blank","href","https://mercurius.dev/#/docs/plugins"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/mercurius-js/mercurius-upload"],["rel","nofollow","target","_blank","href","https://github.com/mercurius-js/cache"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Plugins with Apollo"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Plugins enable you to extend Apollo Server's core functionality by performing custom operations in response to certain events. Currently, these events correspond to individual phases of the GraphQL request lifecycle, and to the startup of Apollo Server itself (read more "),e.j41(9,"a",6),e.EFF(10,"here"),e.k0s(),e.EFF(11,"). For example, a basic logging plugin might log the GraphQL query string associated with each request that's sent to Apollo Server."),e.k0s(),e.j41(12,"h4",7)(13,"span"),e.EFF(14,"Custom plugins"),e.k0s()(),e.j41(15,"p"),e.EFF(16,"To create a plugin, declare a class annotated with the "),e.j41(17,"code"),e.EFF(18,"@Plugin"),e.k0s(),e.EFF(19," decorator exported from the "),e.j41(20,"code"),e.EFF(21,"@nestjs/apollo"),e.k0s(),e.EFF(22," package. Also, for better code autocompletion, implement the "),e.j41(23,"code"),e.EFF(24,"ApolloServerPlugin"),e.k0s(),e.EFF(25," interface from the "),e.j41(26,"code"),e.EFF(27,"@apollo/server"),e.k0s(),e.EFF(28," package."),e.k0s(),e.j41(29,"pre")(30,"code",8),e.EFF(31,"\nimport { ApolloServerPlugin, GraphQLRequestListener } from '@apollo/server';\nimport { Plugin } from '@nestjs/apollo';\n\n@Plugin()\nexport class LoggingPlugin implements ApolloServerPlugin {\n  async requestDidStart(): Promise<GraphQLRequestListener<any>> {\n    console.log('Request started');\n    return {\n      async willSendResponse() {\n        console.log('Will send response');\n      },\n    };\n  }\n}\n"),e.k0s()(),e.j41(32,"p"),e.EFF(33,"With this in place, we can register the "),e.j41(34,"code"),e.EFF(35,"LoggingPlugin"),e.k0s(),e.EFF(36," as a provider."),e.k0s(),e.j41(37,"pre")(38,"code",8),e.EFF(39,"\n@Module({\n  providers: [LoggingPlugin],\n})\nexport class CommonModule {}\n"),e.k0s()(),e.j41(40,"p"),e.EFF(41,"Nest will automatically instantiate a plugin and apply it to the Apollo Server."),e.k0s(),e.j41(42,"h4",9)(43,"span"),e.EFF(44,"Using external plugins"),e.k0s()(),e.j41(45,"p"),e.EFF(46,"There are several plugins provided out-of-the-box. To use an existing plugin, simply import it and add it to the "),e.j41(47,"code"),e.EFF(48,"plugins"),e.k0s(),e.EFF(49," array:"),e.k0s(),e.j41(50,"pre")(51,"code",8),e.EFF(52,"\nGraphQLModule.forRoot({\n  // ...\n  plugins: [ApolloServerOperationRegistry({ /* options */})]\n}),\n"),e.k0s()(),e.j41(53,"blockquote",10)(54,"strong"),e.EFF(55,"Hint"),e.k0s(),e.EFF(56," The "),e.j41(57,"code"),e.EFF(58,"ApolloServerOperationRegistry"),e.k0s(),e.EFF(59," plugin is exported from the "),e.j41(60,"code"),e.EFF(61,"@apollo/server-plugin-operation-registry"),e.k0s(),e.EFF(62," package.\n"),e.k0s(),e.j41(63,"h4",11)(64,"span"),e.EFF(65,"Plugins with Mercurius"),e.k0s()(),e.j41(66,"p"),e.EFF(67,"Some of the existing mercurius-specific Fastify plugins must be loaded after the mercurius plugin (read more "),e.j41(68,"a",12),e.EFF(69,"here"),e.k0s(),e.EFF(70,") on the plugin tree."),e.k0s(),e.j41(71,"blockquote",13)(72,"strong"),e.EFF(73,"Warning"),e.k0s(),e.j41(74,"a",14),e.EFF(75,"mercurius-upload"),e.k0s(),e.EFF(76," is an exception and should be registered in the main file.\n"),e.k0s(),e.j41(77,"p"),e.EFF(78,"For this, "),e.j41(79,"code"),e.EFF(80,"MercuriusDriver"),e.k0s(),e.EFF(81," exposes an optional "),e.j41(82,"code"),e.EFF(83,"plugins"),e.k0s(),e.EFF(84," configuration option. It represents an array of objects that consist of two attributes: "),e.j41(85,"code"),e.EFF(86,"plugin"),e.k0s(),e.EFF(87," and its "),e.j41(88,"code"),e.EFF(89,"options"),e.k0s(),e.EFF(90,". Therefore, registering the "),e.j41(91,"a",15),e.EFF(92,"cache plugin"),e.k0s(),e.EFF(93," would look like this:"),e.k0s(),e.j41(94,"pre")(95,"code",8),e.EFF(96,"\nGraphQLModule.forRoot({\n  driver: MercuriusDriver,\n  // ...\n  plugins: [\n    {\n      plugin: cache,\n      options: {\n        ttl: 10,\n        policy: {\n          Query: {\n            add: true\n          }\n        }\n      },\n    }\n  ]\n}),\n"),e.k0s()()())},dependencies:[a.a],encapsulation:2,changeDetection:0})}return t})(),T=(()=>{class t{static \u0275fac=function(o){return new(o||t)};static \u0275cmp=e.VBU({type:t,selectors:[["app-banner-courses-graphql-cf"]],decls:25,vars:0,consts:[[1,"banner"],[1,"fas","fa-check"],["href","https://courses.nestjs.com/#graphql-bundle","target","_blank","title","Courses | NestJS - A node.js framework built on top of TypeScript",1,"btn-more"]],template:function(o,n){1&o&&(e.j41(0,"div",0)(1,"h2"),e.EFF(2,"Learn the "),e.j41(3,"span"),e.EFF(4,"right"),e.k0s(),e.EFF(5," way!"),e.k0s(),e.j41(6,"ul")(7,"li")(8,"span"),e.nrm(9,"i",1),e.k0s(),e.EFF(10," 20+ chapters "),e.k0s(),e.j41(11,"li")(12,"span"),e.nrm(13,"i",1),e.k0s(),e.EFF(14," GraphQL fundamentals "),e.k0s(),e.j41(15,"li")(16,"span"),e.nrm(17,"i",1),e.k0s(),e.EFF(18," Official certificate "),e.k0s(),e.j41(19,"li")(20,"span"),e.nrm(21,"i",1),e.k0s(),e.EFF(22," Deep-dive sessions "),e.k0s()(),e.j41(23,"a",2),e.EFF(24,"Explore official GraphQL extensions"),e.k0s()())},styles:[".banner[_ngcontent-%COMP%]{background-color:#111;background-image:url(/assets/banners/courses-graphql-cf.jpg);background-position:center bottom}"],changeDetection:0})}return t})(),q=(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-quick-start"]],features:[e.Vt3],decls:569,vars:0,consts:[["contentReference",""],["appcf7ff98b419ee6bb9f796f0fe4ddf80213b744fb",""],["app5fc7c98a34f8cbb119e9d26b89d84315b84e7612",""],["app95341f38aaaea7ac26340f1b3a24860b713ede09",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/quick-start.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","harnessing-the-power-of-typescript--graphql"],["rel","nofollow","target","_blank","href","https://graphql.org/"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/blog/graphql-vs-rest"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/"],["rel","nofollow","target","_blank","href","https://github.com/mercurius-js/mercurius"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/graphql/quick-start#third-party-integrations"],["href","/graphql/other-features#creating-a-custom-driver"],["appAnchor","","id","installation"],[1,"language-bash"],[1,"warning"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/apollo-server/migration/"],["appAnchor","","id","overview"],["appAnchor","","id","getting-started-with-graphql--typescript"],[1,"info"],["href","/graphql/quick-start#mercurius-integration"],[1,"filename"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/apollo-server/v2/api/apollo-server.html#constructor-options-lt-ApolloServer-gt"],["rel","nofollow","target","_blank","href","https://github.com/mercurius-js/mercurius/blob/master/docs/api/options.md#plugin-options"],["appAnchor","","id","graphql-playground"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/23-graphql-code-first"],["routerLink","/graphql/resolvers-map"],["src","/assets/playground.png","alt",""],["rel","nofollow","target","_blank","href","https://github.com/graphql/graphiql"],["appAnchor","","id","multiple-endpoints"],["appAnchor","","id","code-first"],["appAnchor","","id","example"],["appAnchor","","id","schema-first"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"],["appAnchor","","id","apollo-sandbox"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/blog/announcement/platform/apollo-sandbox-an-open-graphql-ide-for-local-development/"],["appAnchor","","id","example-1"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/12-graphql-schema-first"],["appAnchor","","id","accessing-generated-schema"],["appAnchor","","id","async-configuration"],["href","https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory"],["appAnchor","","id","mercurius-integration"],["routerLink","/techniques/performance"],["appAnchor","","id","third-party-integrations"],["rel","nofollow","target","_blank","href","https://github.com/dotansimha/graphql-yoga"],["appAnchor","","id","example-2"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/33-graphql-mercurius"]],template:function(o,n){1&o&&(e.j41(0,"div",4,0)(2,"div",5)(3,"a",6),e.nrm(4,"i",7),e.k0s()(),e.j41(5,"h2",8),e.EFF(6,"Harnessing the power of TypeScript & GraphQL"),e.k0s(),e.j41(7,"p")(8,"a",9),e.EFF(9,"GraphQL"),e.k0s(),e.EFF(10," is a powerful query language for APIs and a runtime for fulfilling those queries with your existing data. It's an elegant approach that solves many problems typically found with REST APIs. For background, we suggest reading this "),e.j41(11,"a",10),e.EFF(12,"comparison"),e.k0s(),e.EFF(13," between GraphQL and REST. GraphQL combined with "),e.j41(14,"a",11),e.EFF(15,"TypeScript"),e.k0s(),e.EFF(16," helps you develop better type safety with your GraphQL queries, giving you end-to-end typing."),e.k0s(),e.j41(17,"p"),e.EFF(18,"In this chapter, we assume a basic understanding of GraphQL, and focus on how to work with the built-in "),e.j41(19,"code"),e.EFF(20,"@nestjs/graphql"),e.k0s(),e.EFF(21," module. The "),e.j41(22,"code"),e.EFF(23,"GraphQLModule"),e.k0s(),e.EFF(24," can be configured to use "),e.j41(25,"a",12),e.EFF(26,"Apollo"),e.k0s(),e.EFF(27," server (with the "),e.j41(28,"code"),e.EFF(29,"@nestjs/apollo"),e.k0s(),e.EFF(30," driver) and "),e.j41(31,"a",13),e.EFF(32,"Mercurius"),e.k0s(),e.EFF(33," (with the "),e.j41(34,"code"),e.EFF(35,"@nestjs/mercurius"),e.k0s(),e.EFF(36,"). We provide official integrations for these proven GraphQL packages to provide a simple way to use GraphQL with Nest (see more integrations "),e.j41(37,"a",14),e.EFF(38,"here"),e.k0s(),e.EFF(39,")."),e.k0s(),e.j41(40,"p"),e.EFF(41,"You can also build your own dedicated driver (read more on that "),e.j41(42,"a",15),e.EFF(43,"here"),e.k0s(),e.EFF(44,")."),e.k0s(),e.j41(45,"h4",16)(46,"span"),e.EFF(47,"Installation"),e.k0s()(),e.j41(48,"p"),e.EFF(49,"Start by installing the required packages:"),e.k0s(),e.j41(50,"pre")(51,"code",17),e.EFF(52,"\n# For Express and Apollo (default)\n$ npm i @nestjs/graphql @nestjs/apollo @apollo/server graphql\n\n# For Fastify and Apollo\n# npm i @nestjs/graphql @nestjs/apollo @apollo/server @as-integrations/fastify graphql\n\n# For Fastify and Mercurius\n# npm i @nestjs/graphql @nestjs/mercurius graphql mercurius\n"),e.k0s()(),e.j41(53,"blockquote",18)(54,"strong"),e.EFF(55,"Warning"),e.k0s(),e.j41(56,"code"),e.EFF(57,"@nestjs/graphql@>=9"),e.k0s(),e.EFF(58," and "),e.j41(59,"code"),e.EFF(60,"@nestjs/apollo^10"),e.k0s(),e.EFF(61," packages are compatible with "),e.j41(62,"strong"),e.EFF(63,"Apollo v3"),e.k0s(),e.EFF(64," (check out Apollo Server 3 "),e.j41(65,"a",19),e.EFF(66,"migration guide"),e.k0s(),e.EFF(67," for more details), while "),e.j41(68,"code"),e.EFF(69,"@nestjs/graphql@^8"),e.k0s(),e.EFF(70," only supports "),e.j41(71,"strong"),e.EFF(72,"Apollo v2"),e.k0s(),e.EFF(73," (e.g., "),e.j41(74,"code"),e.EFF(75,"apollo-server-express@2.x.x"),e.k0s(),e.EFF(76," package).\n"),e.k0s(),e.j41(77,"h4",20)(78,"span"),e.EFF(79,"Overview"),e.k0s()(),e.j41(80,"p"),e.EFF(81,"Nest offers two ways of building GraphQL applications, the "),e.j41(82,"strong"),e.EFF(83,"code first"),e.k0s(),e.EFF(84," and the "),e.j41(85,"strong"),e.EFF(86,"schema first"),e.k0s(),e.EFF(87," methods. You should choose the one that works best for you. Most of the chapters in this GraphQL section are divided into two main parts: one you should follow if you adopt "),e.j41(88,"strong"),e.EFF(89,"code first"),e.k0s(),e.EFF(90,", and the other to be used if you adopt "),e.j41(91,"strong"),e.EFF(92,"schema first"),e.k0s(),e.EFF(93,"."),e.k0s(),e.j41(94,"p"),e.EFF(95,"In the "),e.j41(96,"strong"),e.EFF(97,"code first"),e.k0s(),e.EFF(98," approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema. This approach is useful if you prefer to work exclusively with TypeScript and avoid context switching between language syntaxes."),e.k0s(),e.j41(99,"p"),e.EFF(100,"In the "),e.j41(101,"strong"),e.EFF(102,"schema first"),e.k0s(),e.EFF(103," approach, the source of truth is GraphQL SDL (Schema Definition Language) files. SDL is a language-agnostic way to share schema files between different platforms. Nest automatically generates your TypeScript definitions (using either classes or interfaces) based on the GraphQL schemas to reduce the need to write redundant boilerplate code."),e.k0s(),e.j41(104,"p"),e.nrm(105,"app-banner-courses-graphql-cf"),e.k0s(),e.j41(106,"h4",21)(107,"span"),e.EFF(108,"Getting started with GraphQL & TypeScript"),e.k0s()(),e.j41(109,"blockquote",22)(110,"strong"),e.EFF(111,"Hint"),e.k0s(),e.EFF(112," In the following chapters, we'll be integrating the "),e.j41(113,"code"),e.EFF(114,"@nestjs/apollo"),e.k0s(),e.EFF(115," package. If you want to use "),e.j41(116,"code"),e.EFF(117,"mercurius"),e.k0s(),e.EFF(118," package instead, navigate to "),e.j41(119,"a",23),e.EFF(120,"this section"),e.k0s(),e.EFF(121,".\n"),e.k0s(),e.j41(122,"p"),e.EFF(123,"Once the packages are installed, we can import the "),e.j41(124,"code"),e.EFF(125,"GraphQLModule"),e.k0s(),e.EFF(126," and configure it with the "),e.j41(127,"code"),e.EFF(128,"forRoot()"),e.k0s(),e.EFF(129," static method."),e.k0s(),e.j41(130,"span",24),e.nrm(131,"app-tabs",null,1),e.k0s(),e.j41(133,"pre")(134,"code",25),e.EFF(135,"\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloDriverConfig>({\n      driver: ApolloDriver,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(136,"blockquote",22)(137,"strong"),e.EFF(138,"Hint"),e.k0s(),e.EFF(139," For "),e.j41(140,"code"),e.EFF(141,"mercurius"),e.k0s(),e.EFF(142," integration, you should be using the "),e.j41(143,"code"),e.EFF(144,"MercuriusDriver"),e.k0s(),e.EFF(145," and "),e.j41(146,"code"),e.EFF(147,"MercuriusDriverConfig"),e.k0s(),e.EFF(148," instead. Both are exported from the "),e.j41(149,"code"),e.EFF(150,"@nestjs/mercurius"),e.k0s(),e.EFF(151," package.\n"),e.k0s(),e.j41(152,"p"),e.EFF(153,"The "),e.j41(154,"code"),e.EFF(155,"forRoot()"),e.k0s(),e.EFF(156," method takes an options object as an argument. These options are passed through to the underlying driver instance (read more about available settings here: "),e.j41(157,"a",26),e.EFF(158,"Apollo"),e.k0s(),e.EFF(159," and "),e.j41(160,"a",27),e.EFF(161,"Mercurius"),e.k0s(),e.EFF(162,"). For example, if you want to disable the "),e.j41(163,"code"),e.EFF(164,"playground"),e.k0s(),e.EFF(165," and turn off "),e.j41(166,"code"),e.EFF(167,"debug"),e.k0s(),e.EFF(168," mode (for Apollo), pass the following options:"),e.k0s(),e.j41(169,"span",24),e.nrm(170,"app-tabs",null,2),e.k0s(),e.j41(172,"pre")(173,"code",25),e.EFF(174,"\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloDriverConfig>({\n      driver: ApolloDriver,\n      playground: false,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(175,"p"),e.EFF(176,"In this case, these options will be forwarded to the "),e.j41(177,"code"),e.EFF(178,"ApolloServer"),e.k0s(),e.EFF(179," constructor."),e.k0s(),e.j41(180,"h4",28)(181,"span"),e.EFF(182,"GraphQL playground"),e.k0s()(),e.j41(183,"p"),e.EFF(184,"The playground is a graphical, interactive, in-browser GraphQL IDE, available by default on the same URL as the GraphQL server itself. To access the playground, you need a basic GraphQL server configured and running. To see it now, you can install and build the "),e.j41(185,"a",29),e.EFF(186,"working example here"),e.k0s(),e.EFF(187,". Alternatively, if you're following along with these code samples, once you've completed the steps in the "),e.j41(188,"a",30),e.EFF(189,"Resolvers chapter"),e.k0s(),e.EFF(190,", you can access the playground."),e.k0s(),e.j41(191,"p"),e.EFF(192,"With that in place, and with your application running in the background, you can then open your web browser and navigate to "),e.j41(193,"code"),e.EFF(194,"http://localhost:3000/graphql"),e.k0s(),e.EFF(195," (host and port may vary depending on your configuration). You will then see the GraphQL playground, as shown below."),e.k0s(),e.j41(196,"figure"),e.nrm(197,"img",31),e.k0s(),e.j41(198,"blockquote",18)(199,"strong"),e.EFF(200,"Note"),e.k0s(),e.j41(201,"code"),e.EFF(202,"@nestjs/mercurius"),e.k0s(),e.EFF(203," integration does not ship with the built-in GraphQL Playground integration. Instead, you can use "),e.j41(204,"a",32),e.EFF(205,"GraphiQL"),e.k0s(),e.EFF(206," (set "),e.j41(207,"code"),e.EFF(208,"graphiql: true"),e.k0s(),e.EFF(209,").\n"),e.k0s(),e.j41(210,"h4",33)(211,"span"),e.EFF(212,"Multiple endpoints"),e.k0s()(),e.j41(213,"p"),e.EFF(214,"Another useful feature of the "),e.j41(215,"code"),e.EFF(216,"@nestjs/graphql"),e.k0s(),e.EFF(217," module is the ability to serve multiple endpoints at once. This lets you decide which modules should be included in which endpoint. By default, "),e.j41(218,"code"),e.EFF(219,"GraphQL"),e.k0s(),e.EFF(220," searches for resolvers throughout the whole app. To limit this scan to only a subset of modules, use the "),e.j41(221,"code"),e.EFF(222,"include"),e.k0s(),e.EFF(223," property."),e.k0s(),e.j41(224,"pre")(225,"code",25),e.EFF(226,"\nGraphQLModule.forRoot({\n  include: [CatsModule],\n}),\n"),e.k0s()(),e.j41(227,"blockquote",18)(228,"strong"),e.EFF(229,"Warning"),e.k0s(),e.EFF(230," If you use the "),e.j41(231,"code"),e.EFF(232,"@apollo/server"),e.k0s(),e.EFF(233," with "),e.j41(234,"code"),e.EFF(235,"@as-integrations/fastify"),e.k0s(),e.EFF(236," package with multiple GraphQL endpoints in a single application, make sure to enable the "),e.j41(237,"code"),e.EFF(238,"disableHealthCheck"),e.k0s(),e.EFF(239," setting in the "),e.j41(240,"code"),e.EFF(241,"GraphQLModule"),e.k0s(),e.EFF(242," configuration.\n"),e.k0s(),e.j41(243,"h4",34)(244,"span"),e.EFF(245,"Code first"),e.k0s()(),e.j41(246,"p"),e.EFF(247,"In the "),e.j41(248,"strong"),e.EFF(249,"code first"),e.k0s(),e.EFF(250," approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema."),e.k0s(),e.j41(251,"p"),e.EFF(252,"To use the code first approach, start by adding the "),e.j41(253,"code"),e.EFF(254,"autoSchemaFile"),e.k0s(),e.EFF(255," property to the options object:"),e.k0s(),e.j41(256,"pre")(257,"code",25),e.EFF(258,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n}),\n"),e.k0s()(),e.j41(259,"p"),e.EFF(260,"The "),e.j41(261,"code"),e.EFF(262,"autoSchemaFile"),e.k0s(),e.EFF(263," property value is the path where your automatically generated schema will be created. Alternatively, the schema can be generated on-the-fly in memory. To enable this, set the "),e.j41(264,"code"),e.EFF(265,"autoSchemaFile"),e.k0s(),e.EFF(266," property to "),e.j41(267,"code"),e.EFF(268,"true"),e.k0s(),e.EFF(269,":"),e.k0s(),e.j41(270,"pre")(271,"code",25),e.EFF(272,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  autoSchemaFile: true,\n}),\n"),e.k0s()(),e.j41(273,"p"),e.EFF(274,"By default, the types in the generated schema will be in the order they are defined in the included modules. To sort the schema lexicographically, set the "),e.j41(275,"code"),e.EFF(276,"sortSchema"),e.k0s(),e.EFF(277," property to "),e.j41(278,"code"),e.EFF(279,"true"),e.k0s(),e.EFF(280,":"),e.k0s(),e.j41(281,"pre")(282,"code",25),e.EFF(283,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n  sortSchema: true,\n}),\n"),e.k0s()(),e.j41(284,"h4",35)(285,"span"),e.EFF(286,"Example"),e.k0s()(),e.j41(287,"p"),e.EFF(288,"A fully working code first sample is available "),e.j41(289,"a",29),e.EFF(290,"here"),e.k0s(),e.EFF(291,"."),e.k0s(),e.j41(292,"h4",36)(293,"span"),e.EFF(294,"Schema first"),e.k0s()(),e.j41(295,"p"),e.EFF(296,"To use the schema first approach, start by adding a "),e.j41(297,"code"),e.EFF(298,"typePaths"),e.k0s(),e.EFF(299," property to the options object. The "),e.j41(300,"code"),e.EFF(301,"typePaths"),e.k0s(),e.EFF(302," property indicates where the "),e.j41(303,"code"),e.EFF(304,"GraphQLModule"),e.k0s(),e.EFF(305," should look for GraphQL SDL schema definition files you'll be writing. These files will be combined in memory; this allows you to split your schemas into several files and locate them near their resolvers."),e.k0s(),e.j41(306,"pre")(307,"code",25),e.EFF(308,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  typePaths: ['./**/*.graphql'],\n}),\n"),e.k0s()(),e.j41(309,"p"),e.EFF(310,"You will typically also need to have TypeScript definitions (classes and interfaces) that correspond to the GraphQL SDL types. Creating the corresponding TypeScript definitions by hand is redundant and tedious. It leaves us without a single source of truth -- each change made within SDL forces us to adjust TypeScript definitions as well. To address this, the "),e.j41(311,"code"),e.EFF(312,"@nestjs/graphql"),e.k0s(),e.EFF(313," package can "),e.j41(314,"strong"),e.EFF(315,"automatically generate"),e.k0s(),e.EFF(316," TypeScript definitions from the abstract syntax tree ("),e.j41(317,"a",37),e.EFF(318,"AST"),e.k0s(),e.EFF(319,"). To enable this feature, add the "),e.j41(320,"code"),e.EFF(321,"definitions"),e.k0s(),e.EFF(322," options property when configuring the "),e.j41(323,"code"),e.EFF(324,"GraphQLModule"),e.k0s(),e.EFF(325,"."),e.k0s(),e.j41(326,"pre")(327,"code",25),e.EFF(328,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  typePaths: ['./**/*.graphql'],\n  definitions: {\n    path: join(process.cwd(), 'src/graphql.ts'),\n  },\n}),\n"),e.k0s()(),e.j41(329,"p"),e.EFF(330,"The path property of the "),e.j41(331,"code"),e.EFF(332,"definitions"),e.k0s(),e.EFF(333," object indicates where to save generated TypeScript output. By default, all generated TypeScript types are created as interfaces. To generate classes instead, specify the "),e.j41(334,"code"),e.EFF(335,"outputAs"),e.k0s(),e.EFF(336," property with a value of "),e.j41(337,"code"),e.EFF(338,"'class'"),e.k0s(),e.EFF(339,"."),e.k0s(),e.j41(340,"pre")(341,"code",25),e.EFF(342,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  typePaths: ['./**/*.graphql'],\n  definitions: {\n    path: join(process.cwd(), 'src/graphql.ts'),\n    outputAs: 'class',\n  },\n}),\n"),e.k0s()(),e.j41(343,"p"),e.EFF(344,"The above approach dynamically generates TypeScript definitions each time the application starts. Alternatively, it may be preferable to build a simple script to generate these on demand. For example, assume we create the following script as "),e.j41(345,"code"),e.EFF(346,"generate-typings.ts"),e.k0s(),e.EFF(347,":"),e.k0s(),e.j41(348,"pre")(349,"code",25),e.EFF(350,"\nimport { GraphQLDefinitionsFactory } from '@nestjs/graphql';\nimport { join } from 'path';\n\nconst definitionsFactory = new GraphQLDefinitionsFactory();\ndefinitionsFactory.generate({\n  typePaths: ['./src/**/*.graphql'],\n  path: join(process.cwd(), 'src/graphql.ts'),\n  outputAs: 'class',\n});\n"),e.k0s()(),e.j41(351,"p"),e.EFF(352,"Now you can run this script on demand:"),e.k0s(),e.j41(353,"pre")(354,"code",17),e.EFF(355,"\n$ ts-node generate-typings\n"),e.k0s()(),e.j41(356,"blockquote",22)(357,"strong"),e.EFF(358,"Hint"),e.k0s(),e.EFF(359," You can compile the script beforehand (e.g., with "),e.j41(360,"code"),e.EFF(361,"tsc"),e.k0s(),e.EFF(362,") and use "),e.j41(363,"code"),e.EFF(364,"node"),e.k0s(),e.EFF(365," to execute it.\n"),e.k0s(),e.j41(366,"p"),e.EFF(367,"To enable watch mode for the script (to automatically generate typings whenever any "),e.j41(368,"code"),e.EFF(369,".graphql"),e.k0s(),e.EFF(370," file changes), pass the "),e.j41(371,"code"),e.EFF(372,"watch"),e.k0s(),e.EFF(373," option to the "),e.j41(374,"code"),e.EFF(375,"generate()"),e.k0s(),e.EFF(376," method."),e.k0s(),e.j41(377,"pre")(378,"code",25),e.EFF(379,"\ndefinitionsFactory.generate({\n  typePaths: ['./src/**/*.graphql'],\n  path: join(process.cwd(), 'src/graphql.ts'),\n  outputAs: 'class',\n  watch: true,\n});\n"),e.k0s()(),e.j41(380,"p"),e.EFF(381,"To automatically generate the additional "),e.j41(382,"code"),e.EFF(383,"__typename"),e.k0s(),e.EFF(384," field for every object type, enable the "),e.j41(385,"code"),e.EFF(386,"emitTypenameField"),e.k0s(),e.EFF(387," option."),e.k0s(),e.j41(388,"pre")(389,"code",25),e.EFF(390,"\ndefinitionsFactory.generate({\n  // ...,\n  emitTypenameField: true,\n});\n"),e.k0s()(),e.j41(391,"p"),e.EFF(392,"To generate resolvers (queries, mutations, subscriptions) as plain fields without arguments, enable the "),e.j41(393,"code"),e.EFF(394,"skipResolverArgs"),e.k0s(),e.EFF(395," option."),e.k0s(),e.j41(396,"pre")(397,"code",25),e.EFF(398,"\ndefinitionsFactory.generate({\n  // ...,\n  skipResolverArgs: true,\n});\n"),e.k0s()(),e.j41(399,"h4",38)(400,"span"),e.EFF(401,"Apollo Sandbox"),e.k0s()(),e.j41(402,"p"),e.EFF(403,"To use "),e.j41(404,"a",39),e.EFF(405,"Apollo Sandbox"),e.k0s(),e.EFF(406," instead of the "),e.j41(407,"code"),e.EFF(408,"graphql-playground"),e.k0s(),e.EFF(409," as a GraphQL IDE for local development, use the following configuration:"),e.k0s(),e.j41(410,"pre")(411,"code",25),e.EFF(412,"\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloDriverConfig>({\n      driver: ApolloDriver,\n      playground: false,\n      plugins: [ApolloServerPluginLandingPageLocalDefault()],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(413,"h4",40)(414,"span"),e.EFF(415,"Example"),e.k0s()(),e.j41(416,"p"),e.EFF(417,"A fully working schema first sample is available "),e.j41(418,"a",41),e.EFF(419,"here"),e.k0s(),e.EFF(420,"."),e.k0s(),e.j41(421,"h4",42)(422,"span"),e.EFF(423,"Accessing generated schema"),e.k0s()(),e.j41(424,"p"),e.EFF(425,"In some circumstances (for example end-to-end tests), you may want to get a reference to the generated schema object. In end-to-end tests, you can then run queries using the "),e.j41(426,"code"),e.EFF(427,"graphql"),e.k0s(),e.EFF(428," object without using any HTTP listeners."),e.k0s(),e.j41(429,"p"),e.EFF(430,"You can access the generated schema (in either the code first or schema first approach), using the "),e.j41(431,"code"),e.EFF(432,"GraphQLSchemaHost"),e.k0s(),e.EFF(433," class:"),e.k0s(),e.j41(434,"pre")(435,"code",25),e.EFF(436,"\nconst { schema } = app.get(GraphQLSchemaHost);\n"),e.k0s()(),e.j41(437,"blockquote",22)(438,"strong"),e.EFF(439,"Hint"),e.k0s(),e.EFF(440," You must call the "),e.j41(441,"code"),e.EFF(442,"GraphQLSchemaHost#schema"),e.k0s(),e.EFF(443," getter after the application has been initialized (after the "),e.j41(444,"code"),e.EFF(445,"onModuleInit"),e.k0s(),e.EFF(446," hook has been triggered by either the "),e.j41(447,"code"),e.EFF(448,"app.listen()"),e.k0s(),e.EFF(449," or "),e.j41(450,"code"),e.EFF(451,"app.init()"),e.k0s(),e.EFF(452," method).\n"),e.k0s(),e.j41(453,"h4",43)(454,"span"),e.EFF(455,"Async configuration"),e.k0s()(),e.j41(456,"p"),e.EFF(457,"When you need to pass module options asynchronously instead of statically, use the "),e.j41(458,"code"),e.EFF(459,"forRootAsync()"),e.k0s(),e.EFF(460," method. As with most dynamic modules, Nest provides several techniques to deal with async configuration."),e.k0s(),e.j41(461,"p"),e.EFF(462,"One technique is to use a factory function:"),e.k0s(),e.j41(463,"pre")(464,"code",25),e.EFF(465,"\n GraphQLModule.forRootAsync<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  useFactory: () => ({\n    typePaths: ['./**/*.graphql'],\n  }),\n}),\n"),e.k0s()(),e.j41(466,"p"),e.EFF(467,"Like other factory providers, our factory function can be "),e.j41(468,"a",44),e.EFF(469,"async"),e.k0s(),e.EFF(470," and can inject dependencies through "),e.j41(471,"code"),e.EFF(472,"inject"),e.k0s(),e.EFF(473,"."),e.k0s(),e.j41(474,"pre")(475,"code",25),e.EFF(476,"\nGraphQLModule.forRootAsync<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    typePaths: configService.get<string>('GRAPHQL_TYPE_PATHS'),\n  }),\n  inject: [ConfigService],\n}),\n"),e.k0s()(),e.j41(477,"p"),e.EFF(478,"Alternatively, you can configure the "),e.j41(479,"code"),e.EFF(480,"GraphQLModule"),e.k0s(),e.EFF(481," using a class instead of a factory, as shown below:"),e.k0s(),e.j41(482,"pre")(483,"code",25),e.EFF(484,"\nGraphQLModule.forRootAsync<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  useClass: GqlConfigService,\n}),\n"),e.k0s()(),e.j41(485,"p"),e.EFF(486,"The construction above instantiates "),e.j41(487,"code"),e.EFF(488,"GqlConfigService"),e.k0s(),e.EFF(489," inside "),e.j41(490,"code"),e.EFF(491,"GraphQLModule"),e.k0s(),e.EFF(492,", using it to create options object. Note that in this example, the "),e.j41(493,"code"),e.EFF(494,"GqlConfigService"),e.k0s(),e.EFF(495," has to implement the "),e.j41(496,"code"),e.EFF(497,"GqlOptionsFactory"),e.k0s(),e.EFF(498," interface, as shown below. The "),e.j41(499,"code"),e.EFF(500,"GraphQLModule"),e.k0s(),e.EFF(501," will call the "),e.j41(502,"code"),e.EFF(503,"createGqlOptions()"),e.k0s(),e.EFF(504," method on the instantiated object of the supplied class."),e.k0s(),e.j41(505,"pre")(506,"code",25),e.EFF(507,"\n@Injectable()\nclass GqlConfigService implements GqlOptionsFactory {\n  createGqlOptions(): ApolloDriverConfig {\n    return {\n      typePaths: ['./**/*.graphql'],\n    };\n  }\n}\n"),e.k0s()(),e.j41(508,"p"),e.EFF(509,"If you want to reuse an existing options provider instead of creating a private copy inside the "),e.j41(510,"code"),e.EFF(511,"GraphQLModule"),e.k0s(),e.EFF(512,", use the "),e.j41(513,"code"),e.EFF(514,"useExisting"),e.k0s(),e.EFF(515," syntax."),e.k0s(),e.j41(516,"pre")(517,"code",25),e.EFF(518,"\nGraphQLModule.forRootAsync<ApolloDriverConfig>({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n}),\n"),e.k0s()(),e.j41(519,"h4",45)(520,"span"),e.EFF(521,"Mercurius integration"),e.k0s()(),e.j41(522,"p"),e.EFF(523,"Instead of using Apollo, Fastify users (read more "),e.j41(524,"a",46),e.EFF(525,"here"),e.k0s(),e.EFF(526,") can alternatively use the "),e.j41(527,"code"),e.EFF(528,"@nestjs/mercurius"),e.k0s(),e.EFF(529," driver."),e.k0s(),e.j41(530,"span",24),e.nrm(531,"app-tabs",null,3),e.k0s(),e.j41(533,"pre")(534,"code",25),e.EFF(535,"\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusDriverConfig>({\n      driver: MercuriusDriver,\n      graphiql: true,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(536,"blockquote",22)(537,"strong"),e.EFF(538,"Hint"),e.k0s(),e.EFF(539," Once the application is running, open your browser and navigate to "),e.j41(540,"code"),e.EFF(541,"http://localhost:3000/graphiql"),e.k0s(),e.EFF(542,". You should see the "),e.j41(543,"a",32),e.EFF(544,"GraphQL IDE"),e.k0s(),e.EFF(545,".\n"),e.k0s(),e.j41(546,"p"),e.EFF(547,"The "),e.j41(548,"code"),e.EFF(549,"forRoot()"),e.k0s(),e.EFF(550," method takes an options object as an argument. These options are passed through to the underlying driver instance. Read more about available settings "),e.j41(551,"a",27),e.EFF(552,"here"),e.k0s(),e.EFF(553,"."),e.k0s(),e.j41(554,"h4",47)(555,"span"),e.EFF(556,"Third-party integrations"),e.k0s()(),e.j41(557,"ul")(558,"li")(559,"a",48),e.EFF(560,"GraphQL Yoga"),e.k0s()()(),e.j41(561,"h4",49)(562,"span"),e.EFF(563,"Example"),e.k0s()(),e.j41(564,"p"),e.EFF(565,"A working example is available "),e.j41(566,"a",50),e.EFF(567,"here"),e.k0s(),e.EFF(568,"."),e.k0s()())},dependencies:[l.O,a.a,T,F.Wk],encapsulation:2,changeDetection:0})}return t})();var I=i(7077);const L=[{path:"quick-start",component:q,data:{title:"GraphQL + TypeScript"}},{path:"resolvers-map",redirectTo:"resolvers"},{path:"resolvers",component:(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-resolvers-map"]],features:[e.Vt3],decls:1072,vars:40,consts:[["contentReference",""],["appf93583e8abf8478b71e2094cdf886894a36c4df6",""],["app8ffd3c352ee4841cc90b14053cd9423167fc804e",""],["app8647891a9175456395033aa8a1102dd7e0741971",""],["appa869bdbf5ddbaba4effc1a440bc327e9192c61ff",""],["app940f8d09cd42845a7e87d306edda00b8ae765182",""],["app8ba40f7b9d5fdb6005abc337724071f33faa4932",""],["appb36887a4c5c4768da1137d3673dd2c61606fb1b3",""],["app6fa861b62b81accd951d9626775e321c92666c6f",""],["app6c8ba4d016c454303ccd1dc64c63857c74735a87",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/resolvers-map.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","resolvers"],["rel","nofollow","target","_blank","href","https://graphql.org/"],["appAnchor","","id","code-first"],["appAnchor","","id","object-types"],[1,"language-graphql"],[1,"filename"],[1,"language-typescript"],[1,"info"],["routerLink","/graphql/cli-plugin"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/schema/"],["routerLink","/graphql/scalars"],["appAnchor","","id","code-first-resolver"],["href","/graphql/resolvers#module"],[1,"warning"],["routerLink","/recipes/crud-generator"],["appAnchor","","id","query-type-names"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/queries/"],["appAnchor","","id","query-decorator-options"],["appAnchor","","id","args-decorator-options"],["href","/controllers#route-parameters"],["appAnchor","","id","dedicated-arguments-class"],["routerLink","/techniques/validation"],["appAnchor","","id","class-inheritance"],["appAnchor","","id","generics"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/pagination/#pagination-and-edges"],["appAnchor","","id","schema-first"],["routerLink","/graphql/quick-start"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/schema/#type-language"],["appAnchor","","id","schema-first-resolver"],["appAnchor","","id","generating-types"],["routerLink","/pipes"],["appAnchor","","id","graphql-argument-decorators"],["appAnchor","","id","module"],["routerLink","/cli/overview"]],template:function(o,n){if(1&o&&(e.j41(0,"div",10,0)(2,"div",11)(3,"a",12),e.nrm(4,"i",13),e.k0s()(),e.j41(5,"h3",14),e.EFF(6,"Resolvers"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Resolvers provide the instructions for turning a "),e.j41(9,"a",15),e.EFF(10,"GraphQL"),e.k0s(),e.EFF(11," operation (a query, mutation, or subscription) into data. They return the same shape of data we specify in our schema -- either synchronously or as a promise that resolves to a result of that shape. Typically, you create a "),e.j41(12,"strong"),e.EFF(13,"resolver map"),e.k0s(),e.EFF(14," manually. The "),e.j41(15,"code"),e.EFF(16,"@nestjs/graphql"),e.k0s(),e.EFF(17," package, on the other hand, generates a resolver map automatically using the metadata provided by decorators you use to annotate classes. To demonstrate the process of using the package features to create a GraphQL API, we'll create a simple authors API."),e.k0s(),e.j41(18,"h4",16)(19,"span"),e.EFF(20,"Code first"),e.k0s()(),e.j41(21,"p"),e.EFF(22,"In the code first approach, we don't follow the typical process of creating our GraphQL schema by writing GraphQL SDL by hand. Instead, we use TypeScript decorators to generate the SDL from TypeScript class definitions. The "),e.j41(23,"code"),e.EFF(24,"@nestjs/graphql"),e.k0s(),e.EFF(25," package reads the metadata defined through the decorators and automatically generates the schema for you."),e.k0s(),e.j41(26,"h4",17)(27,"span"),e.EFF(28,"Object types"),e.k0s()(),e.j41(29,"p"),e.EFF(30,"Most of the definitions in a GraphQL schema are "),e.j41(31,"strong"),e.EFF(32,"object types"),e.k0s(),e.EFF(33,". Each object type you define should represent a domain object that an application client might need to interact with. For example, our sample API needs to be able to fetch a list of authors and their posts, so we should define the "),e.j41(34,"code"),e.EFF(35,"Author"),e.k0s(),e.EFF(36," type and "),e.j41(37,"code"),e.EFF(38,"Post"),e.k0s(),e.EFF(39," type to support this functionality."),e.k0s(),e.j41(40,"p"),e.EFF(41,"If we were using the schema first approach, we'd define such a schema with SDL like this:"),e.k0s(),e.j41(42,"pre")(43,"code",18),e.EFF(44,"\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post!]!\n}\n"),e.k0s()(),e.j41(45,"p"),e.EFF(46,"In this case, using the code first approach, we define schemas using TypeScript classes and using TypeScript decorators to annotate the fields of those classes. The equivalent of the above SDL in the code first approach is:"),e.k0s(),e.j41(47,"span",19),e.EFF(48),e.nI1(49,"extension"),e.nrm(50,"app-tabs",null,1),e.k0s(),e.j41(52,"pre")(53,"code",20),e.EFF(54,"\nimport { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Post } from './post';\n\n@ObjectType()\nexport class Author {\n  @Field(type => Int)\n  id: number;\n\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ nullable: true })\n  lastName?: string;\n\n  @Field(type => [Post])\n  posts: Post[];\n}\n"),e.k0s()(),e.j41(55,"blockquote",21)(56,"strong"),e.EFF(57,"Hint"),e.k0s(),e.EFF(58," TypeScript's metadata reflection system has several limitations which make it impossible, for instance, to determine what properties a class consists of or recognize whether a given property is optional or required. Because of these limitations, we must either explicitly use the "),e.j41(59,"code"),e.EFF(60,"@Field()"),e.k0s(),e.EFF(61," decorator in our schema definition classes to provide metadata about each field's GraphQL type and optionality, or use a "),e.j41(62,"a",22),e.EFF(63,"CLI plugin"),e.k0s(),e.EFF(64," to generate these for us.\n"),e.k0s(),e.j41(65,"p"),e.EFF(66,"The "),e.j41(67,"code"),e.EFF(68,"Author"),e.k0s(),e.EFF(69," object type, like any class, is made of a collection of fields, with each field declaring a type. A field's type corresponds to a "),e.j41(70,"a",23),e.EFF(71,"GraphQL type"),e.k0s(),e.EFF(72,". A field's GraphQL type can be either another object type or a scalar type. A GraphQL scalar type is a primitive (like "),e.j41(73,"code"),e.EFF(74,"ID"),e.k0s(),e.EFF(75,", "),e.j41(76,"code"),e.EFF(77,"String"),e.k0s(),e.EFF(78,", "),e.j41(79,"code"),e.EFF(80,"Boolean"),e.k0s(),e.EFF(81,", or "),e.j41(82,"code"),e.EFF(83,"Int"),e.k0s(),e.EFF(84,") that resolves to a single value."),e.k0s(),e.j41(85,"blockquote",21)(86,"strong"),e.EFF(87,"Hint"),e.k0s(),e.EFF(88," In addition to GraphQL's built-in scalar types, you can define custom scalar types (read "),e.j41(89,"a",24),e.EFF(90,"more"),e.k0s(),e.EFF(91,").\n"),e.k0s(),e.j41(92,"p"),e.EFF(93,"The above "),e.j41(94,"code"),e.EFF(95,"Author"),e.k0s(),e.EFF(96," object type definition will cause Nest to "),e.j41(97,"strong"),e.EFF(98,"generate"),e.k0s(),e.EFF(99," the SDL we showed above:"),e.k0s(),e.j41(100,"pre")(101,"code",18),e.EFF(102,"\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post!]!\n}\n"),e.k0s()(),e.j41(103,"p"),e.EFF(104,"The "),e.j41(105,"code"),e.EFF(106,"@Field()"),e.k0s(),e.EFF(107," decorator accepts an optional type function (e.g., "),e.j41(108,"code"),e.EFF(109,"type => Int"),e.k0s(),e.EFF(110,"), and optionally an options object."),e.k0s(),e.j41(111,"p"),e.EFF(112,"The type function is required when there's the potential for ambiguity between the TypeScript type system and the GraphQL type system. Specifically: it is "),e.j41(113,"strong"),e.EFF(114,"not"),e.k0s(),e.EFF(115," required for "),e.j41(116,"code"),e.EFF(117,"string"),e.k0s(),e.EFF(118," and "),e.j41(119,"code"),e.EFF(120,"boolean"),e.k0s(),e.EFF(121," types; it "),e.j41(122,"strong"),e.EFF(123,"is"),e.k0s(),e.EFF(124," required for "),e.j41(125,"code"),e.EFF(126,"number"),e.k0s(),e.EFF(127," (which must be mapped to either a GraphQL "),e.j41(128,"code"),e.EFF(129,"Int"),e.k0s(),e.EFF(130," or "),e.j41(131,"code"),e.EFF(132,"Float"),e.k0s(),e.EFF(133,"). The type function should simply return the desired GraphQL type (as shown in various examples in these chapters)."),e.k0s(),e.j41(134,"p"),e.EFF(135,"The options object can have any of the following key/value pairs:"),e.k0s(),e.j41(136,"ul")(137,"li")(138,"code"),e.EFF(139,"nullable"),e.k0s(),e.EFF(140,": for specifying whether a field is nullable (in SDL, each field is non-nullable by default); "),e.j41(141,"code"),e.EFF(142,"boolean"),e.k0s()(),e.j41(143,"li")(144,"code"),e.EFF(145,"description"),e.k0s(),e.EFF(146,": for setting a field description; "),e.j41(147,"code"),e.EFF(148,"string"),e.k0s()(),e.j41(149,"li")(150,"code"),e.EFF(151,"deprecationReason"),e.k0s(),e.EFF(152,": for marking a field as deprecated; "),e.j41(153,"code"),e.EFF(154,"string"),e.k0s()()(),e.j41(155,"p"),e.EFF(156,"For example:"),e.k0s(),e.j41(157,"pre")(158,"code",20),e.EFF(159,"\n@Field({ description: `Book title`, deprecationReason: 'Not useful in v2 schema' })\ntitle: string;\n"),e.k0s()(),e.j41(160,"blockquote",21)(161,"strong"),e.EFF(162,"Hint"),e.k0s(),e.EFF(163," You can also add a description to, or deprecate, the whole object type: "),e.j41(164,"code"),e.EFF(165),e.k0s(),e.EFF(166,".\n"),e.k0s(),e.j41(167,"p"),e.EFF(168,"When the field is an array, we must manually indicate the array type in the "),e.j41(169,"code"),e.EFF(170,"Field()"),e.k0s(),e.EFF(171," decorator's type function, as shown below:"),e.k0s(),e.j41(172,"pre")(173,"code",20),e.EFF(174,"\n@Field(type => [Post])\nposts: Post[];\n"),e.k0s()(),e.j41(175,"blockquote",21)(176,"strong"),e.EFF(177,"Hint"),e.k0s(),e.EFF(178," Using array bracket notation ("),e.j41(179,"code"),e.EFF(180,"[ ]"),e.k0s(),e.EFF(181,"), we can indicate the depth of the array. For example, using "),e.j41(182,"code"),e.EFF(183,"[[Int]]"),e.k0s(),e.EFF(184," would represent an integer matrix.\n"),e.k0s(),e.j41(185,"p"),e.EFF(186,"To declare that an array's items (not the array itself) are nullable, set the "),e.j41(187,"code"),e.EFF(188,"nullable"),e.k0s(),e.EFF(189," property to "),e.j41(190,"code"),e.EFF(191,"'items'"),e.k0s(),e.EFF(192," as shown below:"),e.k0s(),e.j41(193,"pre")(194,"code",20),e.EFF(195,"\n@Field(type => [Post], { nullable: 'items' })\nposts: Post[];\n"),e.k0s()(),e.j41(196,"blockquote",21)(197,"strong"),e.EFF(198,"Hint"),e.k0s(),e.EFF(199," If both the array and its items are nullable, set "),e.j41(200,"code"),e.EFF(201,"nullable"),e.k0s(),e.EFF(202," to "),e.j41(203,"code"),e.EFF(204,"'itemsAndList'"),e.k0s(),e.EFF(205," instead.\n"),e.k0s(),e.j41(206,"p"),e.EFF(207,"Now that the "),e.j41(208,"code"),e.EFF(209,"Author"),e.k0s(),e.EFF(210," object type is created, let's define the "),e.j41(211,"code"),e.EFF(212,"Post"),e.k0s(),e.EFF(213," object type."),e.k0s(),e.j41(214,"span",19),e.EFF(215),e.nI1(216,"extension"),e.nrm(217,"app-tabs",null,2),e.k0s(),e.j41(219,"pre")(220,"code",20),e.EFF(221,"\nimport { Field, Int, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Post {\n  @Field(type => Int)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field(type => Int, { nullable: true })\n  votes?: number;\n}\n"),e.k0s()(),e.j41(222,"p"),e.EFF(223,"The "),e.j41(224,"code"),e.EFF(225,"Post"),e.k0s(),e.EFF(226," object type will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(227,"pre")(228,"code",18),e.EFF(229,"\ntype Post {\n  id: Int!\n  title: String!\n  votes: Int\n}\n"),e.k0s()(),e.j41(230,"h4",25)(231,"span"),e.EFF(232,"Code first resolver"),e.k0s()(),e.j41(233,"p"),e.EFF(234,"At this point, we've defined the objects (type definitions) that can exist in our data graph, but clients don't yet have a way to interact with those objects. To address that, we need to create a resolver class. In the code first method, a resolver class both defines resolver functions "),e.j41(235,"strong"),e.EFF(236,"and"),e.k0s(),e.EFF(237," generates the "),e.j41(238,"strong"),e.EFF(239,"Query type"),e.k0s(),e.EFF(240,". This will be clear as we work through the example below:"),e.k0s(),e.j41(241,"span",19),e.EFF(242),e.nI1(243,"extension"),e.nrm(244,"app-tabs",null,3),e.k0s(),e.j41(246,"pre")(247,"code",20),e.EFF(248,"\n@Resolver(of => Author)\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService,\n    private postsService: PostsService,\n  ) {}\n\n  @Query(returns => Author)\n  async author(@Args('id', { type: () => Int }) id: number) {\n    return this.authorsService.findOneById(id);\n  }\n\n  @ResolveField()\n  async posts(@Parent() author: Author) {\n    const { id } = author;\n    return this.postsService.findAll({ authorId: id });\n  }\n}\n"),e.k0s()(),e.j41(249,"blockquote",21)(250,"strong"),e.EFF(251,"Hint"),e.k0s(),e.EFF(252," All decorators (e.g., "),e.j41(253,"code"),e.EFF(254,"@Resolver"),e.k0s(),e.EFF(255,", "),e.j41(256,"code"),e.EFF(257,"@ResolveField"),e.k0s(),e.EFF(258,", "),e.j41(259,"code"),e.EFF(260,"@Args"),e.k0s(),e.EFF(261,", etc.) are exported from the "),e.j41(262,"code"),e.EFF(263,"@nestjs/graphql"),e.k0s(),e.EFF(264," package.\n"),e.k0s(),e.j41(265,"p"),e.EFF(266,"You can define multiple resolver classes. Nest will combine these at run time. See the "),e.j41(267,"a",26),e.EFF(268,"module"),e.k0s(),e.EFF(269," section below for more on code organization."),e.k0s(),e.j41(270,"blockquote",27)(271,"strong"),e.EFF(272,"Note"),e.k0s(),e.EFF(273," The logic inside the "),e.j41(274,"code"),e.EFF(275,"AuthorsService"),e.k0s(),e.EFF(276," and "),e.j41(277,"code"),e.EFF(278,"PostsService"),e.k0s(),e.EFF(279," classes can be as simple or sophisticated as needed. The main point of this example is to show how to construct resolvers and how they can interact with other providers.\n"),e.k0s(),e.j41(280,"p"),e.EFF(281,"In the example above, we created the "),e.j41(282,"code"),e.EFF(283,"AuthorsResolver"),e.k0s(),e.EFF(284," which defines one query resolver function and one field resolver function. To create a resolver, we create a class with resolver functions as methods, and annotate the class with the "),e.j41(285,"code"),e.EFF(286,"@Resolver()"),e.k0s(),e.EFF(287," decorator."),e.k0s(),e.j41(288,"p"),e.EFF(289,"In this example, we defined a query handler to get the author object based on the "),e.j41(290,"code"),e.EFF(291,"id"),e.k0s(),e.EFF(292," sent in the request. To specify that the method is a query handler, use the "),e.j41(293,"code"),e.EFF(294,"@Query()"),e.k0s(),e.EFF(295," decorator."),e.k0s(),e.j41(296,"p"),e.EFF(297,"The argument passed to the "),e.j41(298,"code"),e.EFF(299,"@Resolver()"),e.k0s(),e.EFF(300," decorator is optional, but comes into play when our graph becomes non-trivial. It's used to supply a parent object used by field resolver functions as they traverse down through an object graph."),e.k0s(),e.j41(301,"p"),e.EFF(302,"In our example, since the class includes a "),e.j41(303,"strong"),e.EFF(304,"field resolver"),e.k0s(),e.EFF(305," function (for the "),e.j41(306,"code"),e.EFF(307,"posts"),e.k0s(),e.EFF(308," property of the "),e.j41(309,"code"),e.EFF(310,"Author"),e.k0s(),e.EFF(311," object type), we "),e.j41(312,"strong"),e.EFF(313,"must"),e.k0s(),e.EFF(314," supply the "),e.j41(315,"code"),e.EFF(316,"@Resolver()"),e.k0s(),e.EFF(317," decorator with a value to indicate which class is the parent type (i.e., the corresponding "),e.j41(318,"code"),e.EFF(319,"ObjectType"),e.k0s(),e.EFF(320," class name) for all field resolvers defined within this class. As should be clear from the example, when writing a field resolver function, it's necessary to access the parent object (the object the field being resolved is a member of). In this example, we populate an author's posts array with a field resolver that calls a service which takes the author's "),e.j41(321,"code"),e.EFF(322,"id"),e.k0s(),e.EFF(323," as an argument. Hence the need to identify the parent object in the "),e.j41(324,"code"),e.EFF(325,"@Resolver()"),e.k0s(),e.EFF(326," decorator. Note the corresponding use of the "),e.j41(327,"code"),e.EFF(328,"@Parent()"),e.k0s(),e.EFF(329," method parameter decorator to then extract a reference to that parent object in the field resolver."),e.k0s(),e.j41(330,"p"),e.EFF(331,"We can define multiple "),e.j41(332,"code"),e.EFF(333,"@Query()"),e.k0s(),e.EFF(334," resolver functions (both within this class, and in any other resolver class), and they will be aggregated into a single "),e.j41(335,"strong"),e.EFF(336,"Query type"),e.k0s(),e.EFF(337," definition in the generated SDL along with the appropriate entries in the resolver map. This allows you to define queries close to the models and services that they use, and to keep them well organized in modules."),e.k0s(),e.j41(338,"blockquote",21)(339,"strong"),e.EFF(340,"Hint"),e.k0s(),e.EFF(341," Nest CLI provides a generator (schematic) that automatically generates "),e.j41(342,"strong"),e.EFF(343,"all the boilerplate code"),e.k0s(),e.EFF(344," to help us avoid doing all of this, and make the developer experience much simpler. Read more about this feature "),e.j41(345,"a",28),e.EFF(346,"here"),e.k0s(),e.EFF(347,".\n"),e.k0s(),e.j41(348,"h4",29)(349,"span"),e.EFF(350,"Query type names"),e.k0s()(),e.j41(351,"p"),e.EFF(352,"In the above examples, the "),e.j41(353,"code"),e.EFF(354,"@Query()"),e.k0s(),e.EFF(355," decorator generates a GraphQL schema query type name based on the method name. For example, consider the following construction from the example above:"),e.k0s(),e.j41(356,"pre")(357,"code",20),e.EFF(358,"\n@Query(returns => Author)\nasync author(@Args('id', { type: () => Int }) id: number) {\n  return this.authorsService.findOneById(id);\n}\n"),e.k0s()(),e.j41(359,"p"),e.EFF(360,"This generates the following entry for the author query in our schema (the query type uses the same name as the method name):"),e.k0s(),e.j41(361,"pre")(362,"code",18),e.EFF(363,"\ntype Query {\n  author(id: Int!): Author\n}\n"),e.k0s()(),e.j41(364,"blockquote",21)(365,"strong"),e.EFF(366,"Hint"),e.k0s(),e.EFF(367," Learn more about GraphQL queries "),e.j41(368,"a",30),e.EFF(369,"here"),e.k0s(),e.EFF(370,".\n"),e.k0s(),e.j41(371,"p"),e.EFF(372,"Conventionally, we prefer to decouple these names; for example, we prefer to use a name like "),e.j41(373,"code"),e.EFF(374,"getAuthor()"),e.k0s(),e.EFF(375," for our query handler method, but still use "),e.j41(376,"code"),e.EFF(377,"author"),e.k0s(),e.EFF(378," for our query type name. The same applies to our field resolvers. We can easily do this by passing the mapping names as arguments of the "),e.j41(379,"code"),e.EFF(380,"@Query()"),e.k0s(),e.EFF(381," and "),e.j41(382,"code"),e.EFF(383,"@ResolveField()"),e.k0s(),e.EFF(384," decorators, as shown below:"),e.k0s(),e.j41(385,"span",19),e.EFF(386),e.nI1(387,"extension"),e.nrm(388,"app-tabs",null,4),e.k0s(),e.j41(390,"pre")(391,"code",20),e.EFF(392,"\n@Resolver(of => Author)\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService,\n    private postsService: PostsService,\n  ) {}\n\n  @Query(returns => Author, { name: 'author' })\n  async getAuthor(@Args('id', { type: () => Int }) id: number) {\n    return this.authorsService.findOneById(id);\n  }\n\n  @ResolveField('posts', returns => [Post])\n  async getPosts(@Parent() author: Author) {\n    const { id } = author;\n    return this.postsService.findAll({ authorId: id });\n  }\n}\n"),e.k0s()(),e.j41(393,"p"),e.EFF(394,"The "),e.j41(395,"code"),e.EFF(396,"getAuthor"),e.k0s(),e.EFF(397," handler method above will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(398,"pre")(399,"code",18),e.EFF(400,"\ntype Query {\n  author(id: Int!): Author\n}\n"),e.k0s()(),e.j41(401,"h4",31)(402,"span"),e.EFF(403,"Query decorator options"),e.k0s()(),e.j41(404,"p"),e.EFF(405,"The "),e.j41(406,"code"),e.EFF(407,"@Query()"),e.k0s(),e.EFF(408," decorator's options object (where we pass "),e.j41(409,"code"),e.EFF(410),e.k0s(),e.EFF(411," above) accepts a number of key/value pairs:"),e.k0s(),e.j41(412,"ul")(413,"li")(414,"code"),e.EFF(415,"name"),e.k0s(),e.EFF(416,": name of the query; a "),e.j41(417,"code"),e.EFF(418,"string"),e.k0s()(),e.j41(419,"li")(420,"code"),e.EFF(421,"description"),e.k0s(),e.EFF(422,": a description that will be used to generate GraphQL schema documentation (e.g., in GraphQL playground); a "),e.j41(423,"code"),e.EFF(424,"string"),e.k0s()(),e.j41(425,"li")(426,"code"),e.EFF(427,"deprecationReason"),e.k0s(),e.EFF(428,": sets query metadata to show the query as deprecated (e.g., in GraphQL playground); a "),e.j41(429,"code"),e.EFF(430,"string"),e.k0s()(),e.j41(431,"li")(432,"code"),e.EFF(433,"nullable"),e.k0s(),e.EFF(434,": whether the query can return a null data response; "),e.j41(435,"code"),e.EFF(436,"boolean"),e.k0s(),e.EFF(437," or "),e.j41(438,"code"),e.EFF(439,"'items'"),e.k0s(),e.EFF(440," or "),e.j41(441,"code"),e.EFF(442,"'itemsAndList'"),e.k0s(),e.EFF(443," (see above for details of "),e.j41(444,"code"),e.EFF(445,"'items'"),e.k0s(),e.EFF(446," and "),e.j41(447,"code"),e.EFF(448,"'itemsAndList'"),e.k0s(),e.EFF(449,")"),e.k0s()(),e.j41(450,"h4",32)(451,"span"),e.EFF(452,"Args decorator options"),e.k0s()(),e.j41(453,"p"),e.EFF(454,"Use the "),e.j41(455,"code"),e.EFF(456,"@Args()"),e.k0s(),e.EFF(457," decorator to extract arguments from a request for use in the method handler. This works in a very similar fashion to "),e.j41(458,"a",33),e.EFF(459,"REST route parameter argument extraction"),e.k0s(),e.EFF(460,"."),e.k0s(),e.j41(461,"p"),e.EFF(462,"Usually your "),e.j41(463,"code"),e.EFF(464,"@Args()"),e.k0s(),e.EFF(465," decorator will be simple, and not require an object argument as seen with the "),e.j41(466,"code"),e.EFF(467,"getAuthor()"),e.k0s(),e.EFF(468," method above. For example, if the type of an identifier is string, the following construction is sufficient, and simply plucks the named field from the inbound GraphQL request for use as a method argument."),e.k0s(),e.j41(469,"pre")(470,"code",20),e.EFF(471,"\n@Args('id') id: string\n"),e.k0s()(),e.j41(472,"p"),e.EFF(473,"In the "),e.j41(474,"code"),e.EFF(475,"getAuthor()"),e.k0s(),e.EFF(476," case, the "),e.j41(477,"code"),e.EFF(478,"number"),e.k0s(),e.EFF(479," type is used, which presents a challenge. The "),e.j41(480,"code"),e.EFF(481,"number"),e.k0s(),e.EFF(482," TypeScript type doesn't give us enough information about the expected GraphQL representation (e.g., "),e.j41(483,"code"),e.EFF(484,"Int"),e.k0s(),e.EFF(485," vs. "),e.j41(486,"code"),e.EFF(487,"Float"),e.k0s(),e.EFF(488,"). Thus we have to "),e.j41(489,"strong"),e.EFF(490,"explicitly"),e.k0s(),e.EFF(491," pass the type reference. We do that by passing a second argument to the "),e.j41(492,"code"),e.EFF(493,"Args()"),e.k0s(),e.EFF(494," decorator, containing argument options, as shown below:"),e.k0s(),e.j41(495,"pre")(496,"code",20),e.EFF(497,"\n@Query(returns => Author, { name: 'author' })\nasync getAuthor(@Args('id', { type: () => Int }) id: number) {\n  return this.authorsService.findOneById(id);\n}\n"),e.k0s()(),e.j41(498,"p"),e.EFF(499,"The options object allows us to specify the following optional key value pairs:"),e.k0s(),e.j41(500,"ul")(501,"li")(502,"code"),e.EFF(503,"type"),e.k0s(),e.EFF(504,": a function returning the GraphQL type"),e.k0s(),e.j41(505,"li")(506,"code"),e.EFF(507,"defaultValue"),e.k0s(),e.EFF(508,": a default value; "),e.j41(509,"code"),e.EFF(510,"any"),e.k0s()(),e.j41(511,"li")(512,"code"),e.EFF(513,"description"),e.k0s(),e.EFF(514,": description metadata; "),e.j41(515,"code"),e.EFF(516,"string"),e.k0s()(),e.j41(517,"li")(518,"code"),e.EFF(519,"deprecationReason"),e.k0s(),e.EFF(520,": to deprecate a field and provide meta data describing why; "),e.j41(521,"code"),e.EFF(522,"string"),e.k0s()(),e.j41(523,"li")(524,"code"),e.EFF(525,"nullable"),e.k0s(),e.EFF(526,": whether the field is nullable"),e.k0s()(),e.j41(527,"p"),e.EFF(528,"Query handler methods can take multiple arguments. Let's imagine that we want to fetch an author based on its "),e.j41(529,"code"),e.EFF(530,"firstName"),e.k0s(),e.EFF(531," and "),e.j41(532,"code"),e.EFF(533,"lastName"),e.k0s(),e.EFF(534,". In this case, we can call "),e.j41(535,"code"),e.EFF(536,"@Args"),e.k0s(),e.EFF(537," twice:"),e.k0s(),e.j41(538,"pre")(539,"code",20),e.EFF(540,"\ngetAuthor(\n  @Args('firstName', { nullable: true }) firstName?: string,\n  @Args('lastName', { defaultValue: '' }) lastName?: string,\n) {}\n"),e.k0s()(),e.j41(541,"h4",34)(542,"span"),e.EFF(543,"Dedicated arguments class"),e.k0s()(),e.j41(544,"p"),e.EFF(545,"With inline "),e.j41(546,"code"),e.EFF(547,"@Args()"),e.k0s(),e.EFF(548," calls, code like the example above becomes bloated. Instead, you can create a dedicated "),e.j41(549,"code"),e.EFF(550,"GetAuthorArgs"),e.k0s(),e.EFF(551," arguments class and access it in the handler method as follows:"),e.k0s(),e.j41(552,"pre")(553,"code",20),e.EFF(554,"\n@Args() args: GetAuthorArgs\n"),e.k0s()(),e.j41(555,"p"),e.EFF(556,"Create the "),e.j41(557,"code"),e.EFF(558,"GetAuthorArgs"),e.k0s(),e.EFF(559," class using "),e.j41(560,"code"),e.EFF(561,"@ArgsType()"),e.k0s(),e.EFF(562," as shown below:"),e.k0s(),e.j41(563,"span",19),e.EFF(564),e.nI1(565,"extension"),e.nrm(566,"app-tabs",null,5),e.k0s(),e.j41(568,"pre")(569,"code",20),e.EFF(570,"\nimport { MinLength } from 'class-validator';\nimport { Field, ArgsType } from '@nestjs/graphql';\n\n@ArgsType()\nclass GetAuthorArgs {\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ defaultValue: '' })\n  @MinLength(3)\n  lastName: string;\n}\n"),e.k0s()(),e.j41(571,"blockquote",21)(572,"strong"),e.EFF(573,"Hint"),e.k0s(),e.EFF(574," Again, due to TypeScript's metadata reflection system limitations, it's required to either use the "),e.j41(575,"code"),e.EFF(576,"@Field"),e.k0s(),e.EFF(577," decorator to manually indicate type and optionality, or use a "),e.j41(578,"a",22),e.EFF(579,"CLI plugin"),e.k0s(),e.EFF(580,".\n"),e.k0s(),e.j41(581,"p"),e.EFF(582,"This will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(583,"pre")(584,"code",18),e.EFF(585,"\ntype Query {\n  author(firstName: String, lastName: String = ''): Author\n}\n"),e.k0s()(),e.j41(586,"blockquote",21)(587,"strong"),e.EFF(588,"Hint"),e.k0s(),e.EFF(589," Note that arguments classes like "),e.j41(590,"code"),e.EFF(591,"GetAuthorArgs"),e.k0s(),e.EFF(592," play very well with the "),e.j41(593,"code"),e.EFF(594,"ValidationPipe"),e.k0s(),e.EFF(595," (read "),e.j41(596,"a",35),e.EFF(597,"more"),e.k0s(),e.EFF(598,").\n"),e.k0s(),e.j41(599,"h4",36)(600,"span"),e.EFF(601,"Class inheritance"),e.k0s()(),e.j41(602,"p"),e.EFF(603,"You can use standard TypeScript class inheritance to create base classes with generic utility type features (fields and field properties, validations, etc.) that can be extended. For example, you may have a set of pagination related arguments that always include the standard "),e.j41(604,"code"),e.EFF(605,"offset"),e.k0s(),e.EFF(606," and "),e.j41(607,"code"),e.EFF(608,"limit"),e.k0s(),e.EFF(609," fields, but also other index fields that are type-specific. You can set up a class hierarchy as shown below."),e.k0s(),e.j41(610,"p"),e.EFF(611,"Base "),e.j41(612,"code"),e.EFF(613,"@ArgsType()"),e.k0s(),e.EFF(614," class:"),e.k0s(),e.j41(615,"pre")(616,"code",20),e.EFF(617,"\n@ArgsType()\nclass PaginationArgs {\n  @Field((type) => Int)\n  offset: number = 0;\n\n  @Field((type) => Int)\n  limit: number = 10;\n}\n"),e.k0s()(),e.j41(618,"p"),e.EFF(619,"Type specific sub-class of the base "),e.j41(620,"code"),e.EFF(621,"@ArgsType()"),e.k0s(),e.EFF(622," class:"),e.k0s(),e.j41(623,"pre")(624,"code",20),e.EFF(625,"\n@ArgsType()\nclass GetAuthorArgs extends PaginationArgs {\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ defaultValue: '' })\n  @MinLength(3)\n  lastName: string;\n}\n"),e.k0s()(),e.j41(626,"p"),e.EFF(627,"The same approach can be taken with "),e.j41(628,"code"),e.EFF(629,"@ObjectType()"),e.k0s(),e.EFF(630," objects. Define generic properties on the base class:"),e.k0s(),e.j41(631,"pre")(632,"code",20),e.EFF(633,"\n@ObjectType()\nclass Character {\n  @Field((type) => Int)\n  id: number;\n\n  @Field()\n  name: string;\n}\n"),e.k0s()(),e.j41(634,"p"),e.EFF(635,"Add type-specific properties on sub-classes:"),e.k0s(),e.j41(636,"pre")(637,"code",20),e.EFF(638,"\n@ObjectType()\nclass Warrior extends Character {\n  @Field()\n  level: number;\n}\n"),e.k0s()(),e.j41(639,"p"),e.EFF(640,"You can use inheritance with a resolver as well. You can ensure type safety by combining inheritance and TypeScript generics. For example, to create a base class with a generic "),e.j41(641,"code"),e.EFF(642,"findAll"),e.k0s(),e.EFF(643," query, use a construction like this:"),e.k0s(),e.j41(644,"pre")(645,"code",20),e.EFF(646,"\nfunction BaseResolver<T extends Type<unknown>>(classRef: T): any {\n  @Resolver({ isAbstract: true })\n  abstract class BaseResolverHost {\n    @Query((type) => [classRef], { name: `findAll${classRef.name}` })\n    async findAll(): Promise<T[]> {\n      return [];\n    }\n  }\n  return BaseResolverHost;\n}\n"),e.k0s()(),e.j41(647,"p"),e.EFF(648,"Note the following:"),e.k0s(),e.j41(649,"ul")(650,"li"),e.EFF(651,"an explicit return type ("),e.j41(652,"code"),e.EFF(653,"any"),e.k0s(),e.EFF(654," above) is required: otherwise TypeScript complains about the usage of a private class definition. Recommended: define an interface instead of using "),e.j41(655,"code"),e.EFF(656,"any"),e.k0s(),e.EFF(657,"."),e.k0s(),e.j41(658,"li")(659,"code"),e.EFF(660,"Type"),e.k0s(),e.EFF(661," is imported from the "),e.j41(662,"code"),e.EFF(663,"@nestjs/common"),e.k0s(),e.EFF(664," package"),e.k0s(),e.j41(665,"li"),e.EFF(666,"The "),e.j41(667,"code"),e.EFF(668,"isAbstract: true"),e.k0s(),e.EFF(669," property indicates that SDL (Schema Definition Language statements) shouldn't be generated for this class. Note, you can set this property for other types as well to suppress SDL generation."),e.k0s()(),e.j41(670,"p"),e.EFF(671,"Here's how you could generate a concrete sub-class of the "),e.j41(672,"code"),e.EFF(673,"BaseResolver"),e.k0s(),e.EFF(674,":"),e.k0s(),e.j41(675,"pre")(676,"code",20),e.EFF(677,"\n@Resolver((of) => Recipe)\nexport class RecipesResolver extends BaseResolver(Recipe) {\n  constructor(private recipesService: RecipesService) {\n    super();\n  }\n}\n"),e.k0s()(),e.j41(678,"p"),e.EFF(679,"This construct would generated the following SDL:"),e.k0s(),e.j41(680,"pre")(681,"code",18),e.EFF(682,"\ntype Query {\n  findAllRecipe: [Recipe!]!\n}\n"),e.k0s()(),e.j41(683,"h4",37)(684,"span"),e.EFF(685,"Generics"),e.k0s()(),e.j41(686,"p"),e.EFF(687,"We saw one use of generics above. This powerful TypeScript feature can be used to create useful abstractions. For example, here's a sample cursor-based pagination implementation based on "),e.j41(688,"a",38),e.EFF(689,"this documentation"),e.k0s(),e.EFF(690,":"),e.k0s(),e.j41(691,"pre")(692,"code",20),e.EFF(693,"\nimport { Field, ObjectType, Int } from '@nestjs/graphql';\nimport { Type } from '@nestjs/common';\n\ninterface IEdgeType<T> {\n  cursor: string;\n  node: T;\n}\n\nexport interface IPaginatedType<T> {\n  edges: IEdgeType<T>[];\n  nodes: T[];\n  totalCount: number;\n  hasNextPage: boolean;\n}\n\nexport function Paginated<T>(classRef: Type<T>): Type<IPaginatedType<T>> {\n  @ObjectType(`${classRef.name}Edge`)\n  abstract class EdgeType {\n    @Field((type) => String)\n    cursor: string;\n\n    @Field((type) => classRef)\n    node: T;\n  }\n\n  @ObjectType({ isAbstract: true })\n  abstract class PaginatedType implements IPaginatedType<T> {\n    @Field((type) => [EdgeType], { nullable: true })\n    edges: EdgeType[];\n\n    @Field((type) => [classRef], { nullable: true })\n    nodes: T[];\n\n    @Field((type) => Int)\n    totalCount: number;\n\n    @Field()\n    hasNextPage: boolean;\n  }\n  return PaginatedType as Type<IPaginatedType<T>>;\n}\n"),e.k0s()(),e.j41(694,"p"),e.EFF(695,"With the above base class defined, we can now easily create specialized types that inherit this behavior. For example:"),e.k0s(),e.j41(696,"pre")(697,"code",20),e.EFF(698,"\n@ObjectType()\nclass PaginatedAuthor extends Paginated(Author) {}\n"),e.k0s()(),e.j41(699,"h4",39)(700,"span"),e.EFF(701,"Schema first"),e.k0s()(),e.j41(702,"p"),e.EFF(703,"As mentioned in the "),e.j41(704,"a",40),e.EFF(705,"previous"),e.k0s(),e.EFF(706," chapter, in the schema first approach we start by manually defining schema types in SDL (read "),e.j41(707,"a",41),e.EFF(708,"more"),e.k0s(),e.EFF(709,"). Consider the following SDL type definitions."),e.k0s(),e.j41(710,"blockquote",21)(711,"strong"),e.EFF(712,"Hint"),e.k0s(),e.EFF(713," For convenience in this chapter, we've aggregated all of the SDL in one location (e.g., one "),e.j41(714,"code"),e.EFF(715,".graphql"),e.k0s(),e.EFF(716," file, as shown below). In practice, you may find it appropriate to organize your code in a modular fashion. For example, it can be helpful to create individual SDL files with type definitions representing each domain entity, along with related services, resolver code, and the Nest module definition class, in a dedicated directory for that entity. Nest will aggregate all the individual schema type definitions at run time.\n"),e.k0s(),e.j41(717,"pre")(718,"code",18),e.EFF(719,"\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String!\n  votes: Int\n}\n\ntype Query {\n  author(id: Int!): Author\n}\n"),e.k0s()(),e.j41(720,"h4",42)(721,"span"),e.EFF(722,"Schema first resolver"),e.k0s()(),e.j41(723,"p"),e.EFF(724,"The schema above exposes a single query - "),e.j41(725,"code"),e.EFF(726,"author(id: Int!): Author"),e.k0s(),e.EFF(727,"."),e.k0s(),e.j41(728,"blockquote",21)(729,"strong"),e.EFF(730,"Hint"),e.k0s(),e.EFF(731," Learn more about GraphQL queries "),e.j41(732,"a",30),e.EFF(733,"here"),e.k0s(),e.EFF(734,".\n"),e.k0s(),e.j41(735,"p"),e.EFF(736,"Let's now create an "),e.j41(737,"code"),e.EFF(738,"AuthorsResolver"),e.k0s(),e.EFF(739," class that resolves author queries:"),e.k0s(),e.j41(740,"span",19),e.EFF(741),e.nI1(742,"extension"),e.nrm(743,"app-tabs",null,6),e.k0s(),e.j41(745,"pre")(746,"code",20),e.EFF(747,"\n@Resolver('Author')\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService,\n    private postsService: PostsService,\n  ) {}\n\n  @Query()\n  async author(@Args('id') id: number) {\n    return this.authorsService.findOneById(id);\n  }\n\n  @ResolveField()\n  async posts(@Parent() author) {\n    const { id } = author;\n    return this.postsService.findAll({ authorId: id });\n  }\n}\n"),e.k0s()(),e.j41(748,"blockquote",21)(749,"strong"),e.EFF(750,"Hint"),e.k0s(),e.EFF(751," All decorators (e.g., "),e.j41(752,"code"),e.EFF(753,"@Resolver"),e.k0s(),e.EFF(754,", "),e.j41(755,"code"),e.EFF(756,"@ResolveField"),e.k0s(),e.EFF(757,", "),e.j41(758,"code"),e.EFF(759,"@Args"),e.k0s(),e.EFF(760,", etc.) are exported from the "),e.j41(761,"code"),e.EFF(762,"@nestjs/graphql"),e.k0s(),e.EFF(763," package.\n"),e.k0s(),e.j41(764,"blockquote",27)(765,"strong"),e.EFF(766,"Note"),e.k0s(),e.EFF(767," The logic inside the "),e.j41(768,"code"),e.EFF(769,"AuthorsService"),e.k0s(),e.EFF(770," and "),e.j41(771,"code"),e.EFF(772,"PostsService"),e.k0s(),e.EFF(773," classes can be as simple or sophisticated as needed. The main point of this example is to show how to construct resolvers and how they can interact with other providers.\n"),e.k0s(),e.j41(774,"p"),e.EFF(775,"The "),e.j41(776,"code"),e.EFF(777,"@Resolver()"),e.k0s(),e.EFF(778," decorator is required. It takes an optional string argument with the name of a class. This class name is required whenever the class includes "),e.j41(779,"code"),e.EFF(780,"@ResolveField()"),e.k0s(),e.EFF(781," decorators to inform Nest that the decorated method is associated with a parent type (the "),e.j41(782,"code"),e.EFF(783,"Author"),e.k0s(),e.EFF(784," type in our current example). Alternatively, instead of setting "),e.j41(785,"code"),e.EFF(786,"@Resolver()"),e.k0s(),e.EFF(787," at the top of the class, this can be done for each method:"),e.k0s(),e.j41(788,"pre")(789,"code",20),e.EFF(790,"\n@Resolver('Author')\n@ResolveField()\nasync posts(@Parent() author) {\n  const { id } = author;\n  return this.postsService.findAll({ authorId: id });\n}\n"),e.k0s()(),e.j41(791,"p"),e.EFF(792,"In this case ("),e.j41(793,"code"),e.EFF(794,"@Resolver()"),e.k0s(),e.EFF(795," decorator at the method level), if you have multiple "),e.j41(796,"code"),e.EFF(797,"@ResolveField()"),e.k0s(),e.EFF(798," decorators inside a class, you must add "),e.j41(799,"code"),e.EFF(800,"@Resolver()"),e.k0s(),e.EFF(801," to all of them. This is not considered the best practice (as it creates extra overhead)."),e.k0s(),e.j41(802,"blockquote",21)(803,"strong"),e.EFF(804,"Hint"),e.k0s(),e.EFF(805," Any class name argument passed to "),e.j41(806,"code"),e.EFF(807,"@Resolver()"),e.k0s(),e.j41(808,"strong"),e.EFF(809,"does not"),e.k0s(),e.EFF(810," affect queries ("),e.j41(811,"code"),e.EFF(812,"@Query()"),e.k0s(),e.EFF(813," decorator) or mutations ("),e.j41(814,"code"),e.EFF(815,"@Mutation()"),e.k0s(),e.EFF(816," decorator).\n"),e.k0s(),e.j41(817,"blockquote",27)(818,"strong"),e.EFF(819,"Warning"),e.k0s(),e.EFF(820," Using the "),e.j41(821,"code"),e.EFF(822,"@Resolver"),e.k0s(),e.EFF(823," decorator at the method level is not supported with the "),e.j41(824,"strong"),e.EFF(825,"code first"),e.k0s(),e.EFF(826," approach.\n"),e.k0s(),e.j41(827,"p"),e.EFF(828,"In the above examples, the "),e.j41(829,"code"),e.EFF(830,"@Query()"),e.k0s(),e.EFF(831," and "),e.j41(832,"code"),e.EFF(833,"@ResolveField()"),e.k0s(),e.EFF(834," decorators are associated with GraphQL schema types based on the method name. For example, consider the following construction from the example above:"),e.k0s(),e.j41(835,"pre")(836,"code",20),e.EFF(837,"\n@Query()\nasync author(@Args('id') id: number) {\n  return this.authorsService.findOneById(id);\n}\n"),e.k0s()(),e.j41(838,"p"),e.EFF(839,"This generates the following entry for the author query in our schema (the query type uses the same name as the method name):"),e.k0s(),e.j41(840,"pre")(841,"code",18),e.EFF(842,"\ntype Query {\n  author(id: Int!): Author\n}\n"),e.k0s()(),e.j41(843,"p"),e.EFF(844,"Conventionally, we would prefer to decouple these, using names like "),e.j41(845,"code"),e.EFF(846,"getAuthor()"),e.k0s(),e.EFF(847," or "),e.j41(848,"code"),e.EFF(849,"getPosts()"),e.k0s(),e.EFF(850," for our resolver methods. We can easily do this by passing the mapping name as an argument to the decorator, as shown below:"),e.k0s(),e.j41(851,"span",19),e.EFF(852),e.nI1(853,"extension"),e.nrm(854,"app-tabs",null,7),e.k0s(),e.j41(856,"pre")(857,"code",20),e.EFF(858,"\n@Resolver('Author')\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService,\n    private postsService: PostsService,\n  ) {}\n\n  @Query('author')\n  async getAuthor(@Args('id') id: number) {\n    return this.authorsService.findOneById(id);\n  }\n\n  @ResolveField('posts')\n  async getPosts(@Parent() author) {\n    const { id } = author;\n    return this.postsService.findAll({ authorId: id });\n  }\n}\n"),e.k0s()(),e.j41(859,"blockquote",21)(860,"strong"),e.EFF(861,"Hint"),e.k0s(),e.EFF(862," Nest CLI provides a generator (schematic) that automatically generates "),e.j41(863,"strong"),e.EFF(864,"all the boilerplate code"),e.k0s(),e.EFF(865," to help us avoid doing all of this, and make the developer experience much simpler. Read more about this feature "),e.j41(866,"a",28),e.EFF(867,"here"),e.k0s(),e.EFF(868,".\n"),e.k0s(),e.j41(869,"h4",43)(870,"span"),e.EFF(871,"Generating types"),e.k0s()(),e.j41(872,"p"),e.EFF(873,"Assuming that we use the schema first approach and have enabled the typings generation feature (with "),e.j41(874,"code"),e.EFF(875,"outputAs: 'class'"),e.k0s(),e.EFF(876," as shown in the "),e.j41(877,"a",40),e.EFF(878,"previous"),e.k0s(),e.EFF(879," chapter), once you run the application it will generate the following file (in the location you specified in the "),e.j41(880,"code"),e.EFF(881,"GraphQLModule.forRoot()"),e.k0s(),e.EFF(882," method). For example, in "),e.j41(883,"code"),e.EFF(884,"src/graphql.ts"),e.k0s(),e.EFF(885,":"),e.k0s(),e.j41(886,"span",19),e.EFF(887),e.nI1(888,"extension"),e.nrm(889,"app-tabs",null,8),e.k0s(),e.j41(891,"pre")(892,"code",20),e.EFF(893,"\nexport (class Author {\n  id: number;\n  firstName?: string;\n  lastName?: string;\n  posts?: Post[];\n})\nexport class Post {\n  id: number;\n  title: string;\n  votes?: number;\n}\n\nexport abstract class IQuery {\n  abstract author(id: number): Author | Promise<Author>;\n}\n"),e.k0s()(),e.j41(894,"p"),e.EFF(895,"By generating classes (instead of the default technique of generating interfaces), you can use declarative validation "),e.j41(896,"strong"),e.EFF(897,"decorators"),e.k0s(),e.EFF(898," in combination with the schema first approach, which is an extremely useful technique (read "),e.j41(899,"a",35),e.EFF(900,"more"),e.k0s(),e.EFF(901,"). For example, you could add "),e.j41(902,"code"),e.EFF(903,"class-validator"),e.k0s(),e.EFF(904," decorators to the generated "),e.j41(905,"code"),e.EFF(906,"CreatePostInput"),e.k0s(),e.EFF(907," class as shown below to enforce minimum and maximum string lengths on the "),e.j41(908,"code"),e.EFF(909,"title"),e.k0s(),e.EFF(910," field:"),e.k0s(),e.j41(911,"pre")(912,"code",20),e.EFF(913,"\nimport { MinLength, MaxLength } from 'class-validator';\n\nexport class CreatePostInput {\n  @MinLength(3)\n  @MaxLength(50)\n  title: string;\n}\n"),e.k0s()(),e.j41(914,"blockquote",27)(915,"strong"),e.EFF(916,"Notice"),e.k0s(),e.EFF(917," To enable auto-validation of your inputs (and parameters), use "),e.j41(918,"code"),e.EFF(919,"ValidationPipe"),e.k0s(),e.EFF(920,". Read more about validation "),e.j41(921,"a",35),e.EFF(922,"here"),e.k0s(),e.EFF(923," and more specifically about pipes "),e.j41(924,"a",44),e.EFF(925,"here"),e.k0s(),e.EFF(926,".\n"),e.k0s(),e.j41(927,"p"),e.EFF(928,"However, if you add decorators directly to the automatically generated file, they will be "),e.j41(929,"strong"),e.EFF(930,"overwritten"),e.k0s(),e.EFF(931," each time the file is generated. Instead, create a separate file and simply extend the generated class."),e.k0s(),e.j41(932,"pre")(933,"code",20),e.EFF(934,"\nimport { MinLength, MaxLength } from 'class-validator';\nimport { Post } from '../../graphql.ts';\n\nexport class CreatePostInput extends Post {\n  @MinLength(3)\n  @MaxLength(50)\n  title: string;\n}\n"),e.k0s()(),e.j41(935,"h4",45)(936,"span"),e.EFF(937,"GraphQL argument decorators"),e.k0s()(),e.j41(938,"p"),e.EFF(939,"We can access the standard GraphQL resolver arguments using dedicated decorators. Below is a comparison of the Nest decorators and the plain Apollo parameters they represent."),e.k0s(),e.j41(940,"table")(941,"tbody")(942,"tr")(943,"td")(944,"code"),e.EFF(945,"@Root()"),e.k0s(),e.EFF(946," and "),e.j41(947,"code"),e.EFF(948,"@Parent()"),e.k0s()(),e.j41(949,"td")(950,"code"),e.EFF(951,"root"),e.k0s(),e.EFF(952,"/"),e.j41(953,"code"),e.EFF(954,"parent"),e.k0s()()(),e.j41(955,"tr")(956,"td")(957,"code"),e.EFF(958,"@Context(param?: string)"),e.k0s()(),e.j41(959,"td")(960,"code"),e.EFF(961,"context"),e.k0s(),e.EFF(962," / "),e.j41(963,"code"),e.EFF(964,"context[param]"),e.k0s()()(),e.j41(965,"tr")(966,"td")(967,"code"),e.EFF(968,"@Info(param?: string)"),e.k0s()(),e.j41(969,"td")(970,"code"),e.EFF(971,"info"),e.k0s(),e.EFF(972," / "),e.j41(973,"code"),e.EFF(974,"info[param]"),e.k0s()()(),e.j41(975,"tr")(976,"td")(977,"code"),e.EFF(978,"@Args(param?: string)"),e.k0s()(),e.j41(979,"td")(980,"code"),e.EFF(981,"args"),e.k0s(),e.EFF(982," / "),e.j41(983,"code"),e.EFF(984,"args[param]"),e.k0s()()()()(),e.j41(985,"p"),e.EFF(986,"These arguments have the following meanings:"),e.k0s(),e.j41(987,"ul")(988,"li")(989,"code"),e.EFF(990,"root"),e.k0s(),e.EFF(991,": an object that contains the result returned from the resolver on the parent field, or, in the case of a top-level "),e.j41(992,"code"),e.EFF(993,"Query"),e.k0s(),e.EFF(994," field, the "),e.j41(995,"code"),e.EFF(996,"rootValue"),e.k0s(),e.EFF(997," passed from the server configuration."),e.k0s(),e.j41(998,"li")(999,"code"),e.EFF(1e3,"context"),e.k0s(),e.EFF(1001,": an object shared by all resolvers in a particular query; typically used to contain per-request state."),e.k0s(),e.j41(1002,"li")(1003,"code"),e.EFF(1004,"info"),e.k0s(),e.EFF(1005,": an object that contains information about the execution state of the query."),e.k0s(),e.j41(1006,"li")(1007,"code"),e.EFF(1008,"args"),e.k0s(),e.EFF(1009,": an object with the arguments passed into the field in the query."),e.k0s()(),e.j41(1010,"p"),e.nrm(1011,"app-banner-devtools"),e.k0s(),e.j41(1012,"h4",46)(1013,"span"),e.EFF(1014,"Module"),e.k0s()(),e.j41(1015,"p"),e.EFF(1016,"Once we're done with the above steps, we have declaratively specified all the information needed by the "),e.j41(1017,"code"),e.EFF(1018,"GraphQLModule"),e.k0s(),e.EFF(1019," to generate a resolver map. The "),e.j41(1020,"code"),e.EFF(1021,"GraphQLModule"),e.k0s(),e.EFF(1022," uses reflection to introspect the meta data provided via the decorators, and transforms classes into the correct resolver map automatically."),e.k0s(),e.j41(1023,"p"),e.EFF(1024,"The only other thing you need to take care of is to "),e.j41(1025,"strong"),e.EFF(1026,"provide"),e.k0s(),e.EFF(1027," (i.e., list as a "),e.j41(1028,"code"),e.EFF(1029,"provider"),e.k0s(),e.EFF(1030," in some module) the resolver class(es) ("),e.j41(1031,"code"),e.EFF(1032,"AuthorsResolver"),e.k0s(),e.EFF(1033,"), and importing the module ("),e.j41(1034,"code"),e.EFF(1035,"AuthorsModule"),e.k0s(),e.EFF(1036,") somewhere, so Nest will be able to utilize it."),e.k0s(),e.j41(1037,"p"),e.EFF(1038,"For example, we can do this in an "),e.j41(1039,"code"),e.EFF(1040,"AuthorsModule"),e.k0s(),e.EFF(1041,", which can also provide other services needed in this context. Be sure to import "),e.j41(1042,"code"),e.EFF(1043,"AuthorsModule"),e.k0s(),e.EFF(1044," somewhere (e.g., in the root module, or some other module imported by the root module)."),e.k0s(),e.j41(1045,"span",19),e.EFF(1046),e.nI1(1047,"extension"),e.nrm(1048,"app-tabs",null,9),e.k0s(),e.j41(1050,"pre")(1051,"code",20),e.EFF(1052,"\n@Module({\n  imports: [PostsModule],\n  providers: [AuthorsService, AuthorsResolver],\n})\nexport class AuthorsModule {}\n"),e.k0s()(),e.j41(1053,"blockquote",21)(1054,"strong"),e.EFF(1055,"Hint"),e.k0s(),e.EFF(1056," It is helpful to organize your code by your so-called "),e.j41(1057,"strong"),e.EFF(1058,"domain model"),e.k0s(),e.EFF(1059," (similar to the way you would organize entry points in a REST API). In this approach, keep your models ("),e.j41(1060,"code"),e.EFF(1061,"ObjectType"),e.k0s(),e.EFF(1062," classes), resolvers and services together within a Nest module representing the domain model. Keep all of these components in a single folder per module. When you do this, and use the "),e.j41(1063,"a",47),e.EFF(1064,"Nest CLI"),e.k0s(),e.EFF(1065," to generate each element, Nest will wire all of these parts together (locating files in appropriate folders, generating entries in "),e.j41(1066,"code"),e.EFF(1067,"provider"),e.k0s(),e.EFF(1068," and "),e.j41(1069,"code"),e.EFF(1070,"imports"),e.k0s(),e.EFF(1071," arrays, etc.) automatically for you.\n"),e.k0s()()),2&o){const c=e.sdS(51),p=e.sdS(218),C=e.sdS(245),G=e.sdS(389),D=e.sdS(567),P=e.sdS(744),Q=e.sdS(855),M=e.sdS(890),U=e.sdS(1049);e.R7$(48),e.SpI(" ",e.i5U(49,13,"authors/models/author.model",c.isJsActive),"\n"),e.R7$(117),e.Lme("@ObjectType(","{"," description: 'Author model' ","}",")"),e.R7$(50),e.SpI(" ",e.i5U(216,16,"posts/models/post.model",p.isJsActive),"\n"),e.R7$(27),e.SpI(" ",e.i5U(243,19,"authors/authors.resolver",C.isJsActive),"\n"),e.R7$(144),e.SpI(" ",e.i5U(387,22,"authors/authors.resolver",G.isJsActive),"\n"),e.R7$(24),e.Lme("","{","name: 'author'","}",""),e.R7$(154),e.SpI(" ",e.i5U(565,25,"authors/dto/get-author.args",D.isJsActive),"\n"),e.R7$(177),e.SpI(" ",e.i5U(742,28,"authors/authors.resolver",P.isJsActive),"\n"),e.R7$(111),e.SpI(" ",e.i5U(853,31,"authors/authors.resolver",Q.isJsActive),"\n"),e.R7$(35),e.SpI(" ",e.i5U(888,34,"graphql",M.isJsActive),"\n"),e.R7$(159),e.SpI(" ",e.i5U(1047,37,"authors/authors.module",U.isJsActive),"\n")}},dependencies:[l.O,a.a,I._,F.Wk,d.M],encapsulation:2,changeDetection:0})}return t})(),data:{title:"GraphQL + TypeScript - Resolvers"}},{path:"mutations",component:x,data:{title:"GraphQL + TypeScript - Mutations"}},{path:"scalars",component:(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-scalars"]],features:[e.Vt3],decls:345,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/scalars.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","scalars"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/schema/#scalar-types"],["appAnchor","","id","code-first"],[1,"language-typescript"],["appAnchor","","id","override-a-default-scalar"],["appAnchor","","id","import-a-custom-scalar"],[1,"language-bash"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/graphql-scalars"],["appAnchor","","id","create-a-custom-scalar"],["appAnchor","","id","schema-first"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/graphql-tools/scalars.html"],[1,"language-graphql"],[1,"info"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type"],["rel","nofollow","target","_blank","href","https://github.com/Microsoft/TypeScript/issues/12525#issuecomment-263166239"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Scalars"),e.k0s(),e.j41(7,"p"),e.EFF(8,"A GraphQL object type has a name and fields, but at some point those fields have to resolve to some concrete data. That's where the scalar types come in: they represent the leaves of the query (read more "),e.j41(9,"a",6),e.EFF(10,"here"),e.k0s(),e.EFF(11,"). GraphQL includes the following default types: "),e.j41(12,"code"),e.EFF(13,"Int"),e.k0s(),e.EFF(14,", "),e.j41(15,"code"),e.EFF(16,"Float"),e.k0s(),e.EFF(17,", "),e.j41(18,"code"),e.EFF(19,"String"),e.k0s(),e.EFF(20,", "),e.j41(21,"code"),e.EFF(22,"Boolean"),e.k0s(),e.EFF(23," and "),e.j41(24,"code"),e.EFF(25,"ID"),e.k0s(),e.EFF(26,". In addition to these built-in types, you may need to support custom atomic data types (e.g., "),e.j41(27,"code"),e.EFF(28,"Date"),e.k0s(),e.EFF(29,")."),e.k0s(),e.j41(30,"h4",7)(31,"span"),e.EFF(32,"Code first"),e.k0s()(),e.j41(33,"p"),e.EFF(34,"The code-first approach ships with five scalars in which three of them are simple aliases for the existing GraphQL types."),e.k0s(),e.j41(35,"ul")(36,"li")(37,"code"),e.EFF(38,"ID"),e.k0s(),e.EFF(39," (alias for "),e.j41(40,"code"),e.EFF(41,"GraphQLID"),e.k0s(),e.EFF(42,") - represents a unique identifier, often used to refetch an object or as the key for a cache"),e.k0s(),e.j41(43,"li")(44,"code"),e.EFF(45,"Int"),e.k0s(),e.EFF(46," (alias for "),e.j41(47,"code"),e.EFF(48,"GraphQLInt"),e.k0s(),e.EFF(49,") - a signed 32\u2010bit integer"),e.k0s(),e.j41(50,"li")(51,"code"),e.EFF(52,"Float"),e.k0s(),e.EFF(53," (alias for "),e.j41(54,"code"),e.EFF(55,"GraphQLFloat"),e.k0s(),e.EFF(56,") - a signed double-precision floating-point value"),e.k0s(),e.j41(57,"li")(58,"code"),e.EFF(59,"GraphQLISODateTime"),e.k0s(),e.EFF(60," - a date-time string at UTC (used by default to represent "),e.j41(61,"code"),e.EFF(62,"Date"),e.k0s(),e.EFF(63," type)"),e.k0s(),e.j41(64,"li")(65,"code"),e.EFF(66,"GraphQLTimestamp"),e.k0s(),e.EFF(67," - a signed integer which represents date and time as number of milliseconds from start of UNIX epoch"),e.k0s()(),e.j41(68,"p"),e.EFF(69,"The "),e.j41(70,"code"),e.EFF(71,"GraphQLISODateTime"),e.k0s(),e.EFF(72," (e.g. "),e.j41(73,"code"),e.EFF(74,"2019-12-03T09:54:33Z"),e.k0s(),e.EFF(75,") is used by default to represent the "),e.j41(76,"code"),e.EFF(77,"Date"),e.k0s(),e.EFF(78," type. To use the "),e.j41(79,"code"),e.EFF(80,"GraphQLTimestamp"),e.k0s(),e.EFF(81," instead, set the "),e.j41(82,"code"),e.EFF(83,"dateScalarMode"),e.k0s(),e.EFF(84," of the "),e.j41(85,"code"),e.EFF(86,"buildSchemaOptions"),e.k0s(),e.EFF(87," object to "),e.j41(88,"code"),e.EFF(89,"'timestamp'"),e.k0s(),e.EFF(90," as follows:"),e.k0s(),e.j41(91,"pre")(92,"code",8),e.EFF(93,"\nGraphQLModule.forRoot({\n  buildSchemaOptions: {\n    dateScalarMode: 'timestamp',\n  }\n}),\n"),e.k0s()(),e.j41(94,"p"),e.EFF(95,"Likewise, the "),e.j41(96,"code"),e.EFF(97,"GraphQLFloat"),e.k0s(),e.EFF(98," is used by default to represent the "),e.j41(99,"code"),e.EFF(100,"number"),e.k0s(),e.EFF(101," type. To use the "),e.j41(102,"code"),e.EFF(103,"GraphQLInt"),e.k0s(),e.EFF(104," instead, set the "),e.j41(105,"code"),e.EFF(106,"numberScalarMode"),e.k0s(),e.EFF(107," of the "),e.j41(108,"code"),e.EFF(109,"buildSchemaOptions"),e.k0s(),e.EFF(110," object to "),e.j41(111,"code"),e.EFF(112,"'integer'"),e.k0s(),e.EFF(113," as follows:"),e.k0s(),e.j41(114,"pre")(115,"code",8),e.EFF(116,"\nGraphQLModule.forRoot({\n  buildSchemaOptions: {\n    numberScalarMode: 'integer',\n  }\n}),\n"),e.k0s()(),e.j41(117,"p"),e.EFF(118,"In addition, you can create custom scalars."),e.k0s(),e.j41(119,"h4",9)(120,"span"),e.EFF(121,"Override a default scalar"),e.k0s()(),e.j41(122,"p"),e.EFF(123,"To create a custom implementation for the "),e.j41(124,"code"),e.EFF(125,"Date"),e.k0s(),e.EFF(126," scalar, simply create a new class."),e.k0s(),e.j41(127,"pre")(128,"code",8),e.EFF(129,"\nimport { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Date', (type) => Date)\nexport class DateScalar implements CustomScalar<number, Date> {\n  description = 'Date custom scalar type';\n\n  parseValue(value: number): Date {\n    return new Date(value); // value from the client\n  }\n\n  serialize(value: Date): number {\n    return value.getTime(); // value sent to the client\n  }\n\n  parseLiteral(ast: ValueNode): Date {\n    if (ast.kind === Kind.INT) {\n      return new Date(ast.value);\n    }\n    return null;\n  }\n}\n"),e.k0s()(),e.j41(130,"p"),e.EFF(131,"With this in place, register "),e.j41(132,"code"),e.EFF(133,"DateScalar"),e.k0s(),e.EFF(134," as a provider."),e.k0s(),e.j41(135,"pre")(136,"code",8),e.EFF(137,"\n@Module({\n  providers: [DateScalar],\n})\nexport class CommonModule {}\n"),e.k0s()(),e.j41(138,"p"),e.EFF(139,"Now we can use the "),e.j41(140,"code"),e.EFF(141,"Date"),e.k0s(),e.EFF(142," type in our classes."),e.k0s(),e.j41(143,"pre")(144,"code",8),e.EFF(145,"\n@Field()\ncreationDate: Date;\n"),e.k0s()(),e.j41(146,"h4",10)(147,"span"),e.EFF(148,"Import a custom scalar"),e.k0s()(),e.j41(149,"p"),e.EFF(150,"To use a custom scalar, import and register it as a resolver. We\u2019ll use the "),e.j41(151,"code"),e.EFF(152,"graphql-type-json"),e.k0s(),e.EFF(153," package for demonstration purposes. This npm package defines a "),e.j41(154,"code"),e.EFF(155,"JSON"),e.k0s(),e.EFF(156," GraphQL scalar type."),e.k0s(),e.j41(157,"p"),e.EFF(158,"Start by installing the package:"),e.k0s(),e.j41(159,"pre")(160,"code",11),e.EFF(161,"\n$ npm i --save graphql-type-json\n"),e.k0s()(),e.j41(162,"p"),e.EFF(163,"Once the package is installed, we pass a custom resolver to the "),e.j41(164,"code"),e.EFF(165,"forRoot()"),e.k0s(),e.EFF(166," method:"),e.k0s(),e.j41(167,"pre")(168,"code",8),e.EFF(169,"\nimport GraphQLJSON from 'graphql-type-json';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      resolvers: { JSON: GraphQLJSON },\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(170,"p"),e.EFF(171,"Now we can use the "),e.j41(172,"code"),e.EFF(173,"JSON"),e.k0s(),e.EFF(174," type in our classes."),e.k0s(),e.j41(175,"pre")(176,"code",8),e.EFF(177,"\n@Field((type) => GraphQLJSON)\ninfo: JSON;\n"),e.k0s()(),e.j41(178,"p"),e.EFF(179,"For a suite of useful scalars, take a look at the "),e.j41(180,"a",12),e.EFF(181,"graphql-scalars"),e.k0s(),e.EFF(182," package."),e.k0s(),e.j41(183,"h4",13)(184,"span"),e.EFF(185,"Create a custom scalar"),e.k0s()(),e.j41(186,"p"),e.EFF(187,"To define a custom scalar, create a new "),e.j41(188,"code"),e.EFF(189,"GraphQLScalarType"),e.k0s(),e.EFF(190," instance. We'll create a custom "),e.j41(191,"code"),e.EFF(192,"UUID"),e.k0s(),e.EFF(193," scalar."),e.k0s(),e.j41(194,"pre")(195,"code",8),e.EFF(196,"\nconst regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n\nfunction validate(uuid: unknown): string | never {\n  if (typeof uuid !== \"string\" || !regex.test(uuid)) {\n    throw new Error(\"invalid uuid\");\n  }\n  return uuid;\n}\n\nexport const CustomUuidScalar = new GraphQLScalarType({\n  name: 'UUID',\n  description: 'A simple UUID parser',\n  serialize: (value) => validate(value),\n  parseValue: (value) => validate(value),\n  parseLiteral: (ast) => validate(ast.value)\n})\n"),e.k0s()(),e.j41(197,"p"),e.EFF(198,"We pass a custom resolver to the "),e.j41(199,"code"),e.EFF(200,"forRoot()"),e.k0s(),e.EFF(201," method:"),e.k0s(),e.j41(202,"pre")(203,"code",8),e.EFF(204,"\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      resolvers: { UUID: CustomUuidScalar },\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(205,"p"),e.EFF(206,"Now we can use the "),e.j41(207,"code"),e.EFF(208,"UUID"),e.k0s(),e.EFF(209," type in our classes."),e.k0s(),e.j41(210,"pre")(211,"code",8),e.EFF(212,"\n@Field((type) => CustomUuidScalar)\nuuid: string;\n"),e.k0s()(),e.j41(213,"h4",14)(214,"span"),e.EFF(215,"Schema first"),e.k0s()(),e.j41(216,"p"),e.EFF(217,"To define a custom scalar (read more about scalars "),e.j41(218,"a",15),e.EFF(219,"here"),e.k0s(),e.EFF(220,"), create a type definition and a dedicated resolver. Here (as in the official documentation), we\u2019ll use the "),e.j41(221,"code"),e.EFF(222,"graphql-type-json"),e.k0s(),e.EFF(223," package for demonstration purposes. This npm package defines a "),e.j41(224,"code"),e.EFF(225,"JSON"),e.k0s(),e.EFF(226," GraphQL scalar type."),e.k0s(),e.j41(227,"p"),e.EFF(228,"Start by installing the package:"),e.k0s(),e.j41(229,"pre")(230,"code",11),e.EFF(231,"\n$ npm i --save graphql-type-json\n"),e.k0s()(),e.j41(232,"p"),e.EFF(233,"Once the package is installed, we pass a custom resolver to the "),e.j41(234,"code"),e.EFF(235,"forRoot()"),e.k0s(),e.EFF(236," method:"),e.k0s(),e.j41(237,"pre")(238,"code",8),e.EFF(239,"\nimport GraphQLJSON from 'graphql-type-json';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      resolvers: { JSON: GraphQLJSON },\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.k0s()(),e.j41(240,"p"),e.EFF(241,"Now we can use the "),e.j41(242,"code"),e.EFF(243,"JSON"),e.k0s(),e.EFF(244," scalar in our type definitions:"),e.k0s(),e.j41(245,"pre")(246,"code",16),e.EFF(247,"\nscalar JSON\n\ntype Foo {\n  field: JSON\n}\n"),e.k0s()(),e.j41(248,"p"),e.EFF(249,"Another method to define a scalar type is to create a simple class. Assume we want to enhance our schema with the "),e.j41(250,"code"),e.EFF(251,"Date"),e.k0s(),e.EFF(252," type."),e.k0s(),e.j41(253,"pre")(254,"code",8),e.EFF(255,"\nimport { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Date')\nexport class DateScalar implements CustomScalar<number, Date> {\n  description = 'Date custom scalar type';\n\n  parseValue(value: number): Date {\n    return new Date(value); // value from the client\n  }\n\n  serialize(value: Date): number {\n    return value.getTime(); // value sent to the client\n  }\n\n  parseLiteral(ast: ValueNode): Date {\n    if (ast.kind === Kind.INT) {\n      return new Date(ast.value);\n    }\n    return null;\n  }\n}\n"),e.k0s()(),e.j41(256,"p"),e.EFF(257,"With this in place, register "),e.j41(258,"code"),e.EFF(259,"DateScalar"),e.k0s(),e.EFF(260," as a provider."),e.k0s(),e.j41(261,"pre")(262,"code",8),e.EFF(263,"\n@Module({\n  providers: [DateScalar],\n})\nexport class CommonModule {}\n"),e.k0s()(),e.j41(264,"p"),e.EFF(265,"Now we can use the "),e.j41(266,"code"),e.EFF(267,"Date"),e.k0s(),e.EFF(268," scalar in type definitions."),e.k0s(),e.j41(269,"pre")(270,"code",16),e.EFF(271,"\nscalar Date\n"),e.k0s()(),e.j41(272,"p"),e.EFF(273,"By default, the generated TypeScript definition for all scalars is "),e.j41(274,"code"),e.EFF(275,"any"),e.k0s(),e.EFF(276," - which isn't particularly typesafe.\nBut, you can configure how Nest generates typings for your custom scalars when you specify how to generate types:"),e.k0s(),e.j41(277,"pre")(278,"code",8),e.EFF(279,"\nimport { GraphQLDefinitionsFactory } from '@nestjs/graphql';\nimport { join } from 'path';\n\nconst definitionsFactory = new GraphQLDefinitionsFactory();\n\ndefinitionsFactory.generate({\n  typePaths: ['./src/**/*.graphql'],\n  path: join(process.cwd(), 'src/graphql.ts'),\n  outputAs: 'class',\n  defaultScalarType: 'unknown',\n  customScalarTypeMapping: {\n    DateTime: 'Date',\n    BigNumber: '_BigNumber',\n  },\n  additionalHeader: \"import _BigNumber from 'bignumber.js'\",\n});\n"),e.k0s()(),e.j41(280,"blockquote",17)(281,"strong"),e.EFF(282,"Hint"),e.k0s(),e.EFF(283," Alternatively, you can use a type reference instead, for example: "),e.j41(284,"code"),e.EFF(285,"DateTime: Date"),e.k0s(),e.EFF(286,". In this case, "),e.j41(287,"code"),e.EFF(288,"GraphQLDefinitionsFactory"),e.k0s(),e.EFF(289," will extract the name property of the specified type ("),e.j41(290,"code"),e.EFF(291,"Date.name"),e.k0s(),e.EFF(292,") to generate TS definitions. Note: adding an import statement for non-built-in types (custom types) is required.\n"),e.k0s(),e.j41(293,"p"),e.EFF(294,"Now, given the following GraphQL custom scalar types:"),e.k0s(),e.j41(295,"pre")(296,"code",16),e.EFF(297,"\nscalar DateTime\nscalar BigNumber\nscalar Payload\n"),e.k0s()(),e.j41(298,"p"),e.EFF(299,"We will now see the following generated TypeScript definitions in "),e.j41(300,"code"),e.EFF(301,"src/graphql.ts"),e.k0s(),e.EFF(302,":"),e.k0s(),e.j41(303,"pre")(304,"code",8),e.EFF(305,"\nimport _BigNumber from 'bignumber.js';\n\nexport type DateTime = Date;\nexport type BigNumber = _BigNumber;\nexport type Payload = unknown;\n"),e.k0s()(),e.j41(306,"p"),e.EFF(307,"Here, we've used the "),e.j41(308,"code"),e.EFF(309,"customScalarTypeMapping"),e.k0s(),e.EFF(310," property to supply a map of the types we wish to declare for our custom scalars. We've\nalso provided an "),e.j41(311,"code"),e.EFF(312,"additionalHeader"),e.k0s(),e.EFF(313," property so that we can add any imports required for these type definitions. Lastly, we've added\na "),e.j41(314,"code"),e.EFF(315,"defaultScalarType"),e.k0s(),e.EFF(316," of "),e.j41(317,"code"),e.EFF(318,"'unknown'"),e.k0s(),e.EFF(319,", so that any custom scalars not specified in "),e.j41(320,"code"),e.EFF(321,"customScalarTypeMapping"),e.k0s(),e.EFF(322," will be aliased to\n"),e.j41(323,"code"),e.EFF(324,"unknown"),e.k0s(),e.EFF(325," instead of "),e.j41(326,"code"),e.EFF(327,"any"),e.k0s(),e.EFF(328," (which "),e.j41(329,"a",18),e.EFF(330,"TypeScript recommends"),e.k0s(),e.EFF(331," using since 3.0 for added type safety)."),e.k0s(),e.j41(332,"blockquote",17)(333,"strong"),e.EFF(334,"Hint"),e.k0s(),e.EFF(335," Note that we've imported "),e.j41(336,"code"),e.EFF(337,"_BigNumber"),e.k0s(),e.EFF(338," from "),e.j41(339,"code"),e.EFF(340,"bignumber.js"),e.k0s(),e.EFF(341,"; this is to avoid "),e.j41(342,"a",19),e.EFF(343,"circular type references"),e.k0s(),e.EFF(344,".\n"),e.k0s()())},dependencies:[a.a],encapsulation:2,changeDetection:0})}return t})(),data:{title:"GraphQL + TypeScript - Scalars"}},{path:"subscriptions",component:(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-subscriptions"]],features:[e.Vt3],decls:683,vars:16,consts:[["contentReference",""],["appc904c3f2d7b80347dfa3c2aca2e64609a5eb83fa",""],["appaf21e189f3dccdb995a63c8d63d1d1b411fdd31a",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/subscriptions.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","subscriptions"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/react/data/subscriptions"],["appAnchor","","id","enable-subscriptions-with-apollo-driver"],[1,"language-typescript"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/apollographql/subscriptions-transport-ws"],["rel","nofollow","target","_blank","href","https://github.com/enisdenjo/graphql-ws"],[1,"info"],["appAnchor","","id","code-first"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/graphql-subscriptions/setup.html"],["rel","nofollow","target","_blank","href","https://github.com/apollographql/graphql-subscriptions#getting-started-with-your-first-subscription"],["rel","nofollow","target","_blank","href","https://github.com/apollographql/graphql-subscriptions#pubsub-implementations"],[1,"language-graphql"],["appAnchor","","id","publishing"],[1,"filename"],["appAnchor","","id","filtering-subscriptions"],["appAnchor","","id","mutating-subscription-payloads"],["appAnchor","","id","schema-first"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/blob/master/sample/12-graphql-schema-first"],["appAnchor","","id","pubsub"],["routerLink","/fundamentals/custom-providers"],["appAnchor","","id","customize-subscriptions-server"],["appAnchor","","id","authentication-over-websockets"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/react/data/subscriptions/#5-authenticate-over-websocket-optional"],["rel","nofollow","target","_blank","href","https://github.com/apollographql/subscriptions-transport-ws/issues/349"],["appAnchor","","id","enable-subscriptions-with-mercurius-driver"],["rel","nofollow","target","_blank","href","https://github.com/mercurius-js/mercurius/blob/master/docs/api/options.md#plugin-options"],["appAnchor","","id","code-first-1"],["rel","nofollow","target","_blank","href","https://github.com/mercurius-js/mercurius/blob/master/docs/subscriptions.md#subscriptions-with-custom-pubsub"],["appAnchor","","id","publishing-1"],["appAnchor","","id","filtering-subscriptions-1"],["appAnchor","","id","schema-first-1"],["appAnchor","","id","pubsub-1"],["rel","nofollow","target","_blank","href","https://github.com/mcollina/mqemitter"],["rel","nofollow","target","_blank","href","https://github.com/mercurius-js/mercurius/blob/master/docs/subscriptions.md"],["appAnchor","","id","authentication-over-websockets-1"]],template:function(o,n){if(1&o&&(e.j41(0,"div",3,0)(2,"div",4)(3,"a",5),e.nrm(4,"i",6),e.k0s()(),e.j41(5,"h3",7),e.EFF(6,"Subscriptions"),e.k0s(),e.j41(7,"p"),e.EFF(8,"In addition to fetching data using queries and modifying data using mutations, the GraphQL spec supports a third operation type, called "),e.j41(9,"code"),e.EFF(10,"subscription"),e.k0s(),e.EFF(11,". GraphQL subscriptions are a way to push data from the server to the clients that choose to listen to real time messages from the server. Subscriptions are similar to queries in that they specify a set of fields to be delivered to the client, but instead of immediately returning a single answer, a channel is opened and a result is sent to the client every time a particular event happens on the server."),e.k0s(),e.j41(12,"p"),e.EFF(13,"A common use case for subscriptions is notifying the client side about particular events, for example the creation of a new object, updated fields and so on (read more "),e.j41(14,"a",8),e.EFF(15,"here"),e.k0s(),e.EFF(16,")."),e.k0s(),e.j41(17,"h4",9)(18,"span"),e.EFF(19,"Enable subscriptions with Apollo driver"),e.k0s()(),e.j41(20,"p"),e.EFF(21,"To enable subscriptions, set the "),e.j41(22,"code"),e.EFF(23,"installSubscriptionHandlers"),e.k0s(),e.EFF(24," property to "),e.j41(25,"code"),e.EFF(26,"true"),e.k0s(),e.EFF(27,"."),e.k0s(),e.j41(28,"pre")(29,"code",10),e.EFF(30,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  installSubscriptionHandlers: true,\n}),\n"),e.k0s()(),e.j41(31,"blockquote",11)(32,"strong"),e.EFF(33,"Warning"),e.k0s(),e.EFF(34," The "),e.j41(35,"code"),e.EFF(36,"installSubscriptionHandlers"),e.k0s(),e.EFF(37," configuration option has been removed from the latest version of Apollo server and will be soon deprecated in this package as well. By default, "),e.j41(38,"code"),e.EFF(39,"installSubscriptionHandlers"),e.k0s(),e.EFF(40," will fallback to use the "),e.j41(41,"code"),e.EFF(42,"subscriptions-transport-ws"),e.k0s(),e.EFF(43," ("),e.j41(44,"a",12),e.EFF(45,"read more"),e.k0s(),e.EFF(46,") but we strongly recommend using the "),e.j41(47,"code"),e.EFF(48,"graphql-ws"),e.k0s(),e.EFF(49,"("),e.j41(50,"a",13),e.EFF(51,"read more"),e.k0s(),e.EFF(52,") library instead.\n"),e.k0s(),e.j41(53,"p"),e.EFF(54,"To switch to use the "),e.j41(55,"code"),e.EFF(56,"graphql-ws"),e.k0s(),e.EFF(57," package instead, use the following configuration:"),e.k0s(),e.j41(58,"pre")(59,"code",10),e.EFF(60,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'graphql-ws': true\n  },\n}),\n"),e.k0s()(),e.j41(61,"blockquote",14)(62,"strong"),e.EFF(63,"Hint"),e.k0s(),e.EFF(64," You can also use both packages ("),e.j41(65,"code"),e.EFF(66,"subscriptions-transport-ws"),e.k0s(),e.EFF(67," and "),e.j41(68,"code"),e.EFF(69,"graphql-ws"),e.k0s(),e.EFF(70,") at the same time, for example, for backward compatibility.\n"),e.k0s(),e.j41(71,"h4",15)(72,"span"),e.EFF(73,"Code first"),e.k0s()(),e.j41(74,"p"),e.EFF(75,"To create a subscription using the code first approach, we use the "),e.j41(76,"code"),e.EFF(77,"@Subscription()"),e.k0s(),e.EFF(78," decorator (exported from the "),e.j41(79,"code"),e.EFF(80,"@nestjs/graphql"),e.k0s(),e.EFF(81," package) and the "),e.j41(82,"code"),e.EFF(83,"PubSub"),e.k0s(),e.EFF(84," class from the "),e.j41(85,"code"),e.EFF(86,"graphql-subscriptions"),e.k0s(),e.EFF(87," package, which provides a simple "),e.j41(88,"strong"),e.EFF(89,"publish/subscribe API"),e.k0s(),e.EFF(90,"."),e.k0s(),e.j41(91,"p"),e.EFF(92,"The following subscription handler takes care of "),e.j41(93,"strong"),e.EFF(94,"subscribing"),e.k0s(),e.EFF(95," to an event by calling "),e.j41(96,"code"),e.EFF(97,"PubSub#asyncIterator"),e.k0s(),e.EFF(98,". This method takes a single argument, the "),e.j41(99,"code"),e.EFF(100,"triggerName"),e.k0s(),e.EFF(101,", which corresponds to an event topic name."),e.k0s(),e.j41(102,"pre")(103,"code",10),e.EFF(104,"\nconst pubSub = new PubSub();\n\n@Resolver((of) => Author)\nexport class AuthorResolver {\n  // ...\n  @Subscription((returns) => Comment)\n  commentAdded() {\n    return pubSub.asyncIterator('commentAdded');\n  }\n}\n"),e.k0s()(),e.j41(105,"blockquote",14)(106,"strong"),e.EFF(107,"Hint"),e.k0s(),e.EFF(108," All decorators are exported from the "),e.j41(109,"code"),e.EFF(110,"@nestjs/graphql"),e.k0s(),e.EFF(111," package, while the "),e.j41(112,"code"),e.EFF(113,"PubSub"),e.k0s(),e.EFF(114," class is exported from the "),e.j41(115,"code"),e.EFF(116,"graphql-subscriptions"),e.k0s(),e.EFF(117," package.\n"),e.k0s(),e.j41(118,"blockquote",11)(119,"strong"),e.EFF(120,"Note"),e.k0s(),e.j41(121,"code"),e.EFF(122,"PubSub"),e.k0s(),e.EFF(123," is a class that exposes a simple "),e.j41(124,"code"),e.EFF(125,"publish"),e.k0s(),e.EFF(126," and "),e.j41(127,"code"),e.EFF(128,"subscribe API"),e.k0s(),e.EFF(129,". Read more about it "),e.j41(130,"a",16),e.EFF(131,"here"),e.k0s(),e.EFF(132,". Note that the Apollo docs warn that the default implementation is not suitable for production (read more "),e.j41(133,"a",17),e.EFF(134,"here"),e.k0s(),e.EFF(135,"). Production apps should use a "),e.j41(136,"code"),e.EFF(137,"PubSub"),e.k0s(),e.EFF(138," implementation backed by an external store (read more "),e.j41(139,"a",18),e.EFF(140,"here"),e.k0s(),e.EFF(141,").\n"),e.k0s(),e.j41(142,"p"),e.EFF(143,"This will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(144,"pre")(145,"code",19),e.EFF(146,"\ntype Subscription {\n  commentAdded(): Comment!\n}\n"),e.k0s()(),e.j41(147,"p"),e.EFF(148,"Note that subscriptions, by definition, return an object with a single top level property whose key is the name of the subscription. This name is either inherited from the name of the subscription handler method (i.e., "),e.j41(149,"code"),e.EFF(150,"commentAdded"),e.k0s(),e.EFF(151," above), or is provided explicitly by passing an option with the key "),e.j41(152,"code"),e.EFF(153,"name"),e.k0s(),e.EFF(154," as the second argument to the "),e.j41(155,"code"),e.EFF(156,"@Subscription()"),e.k0s(),e.EFF(157," decorator, as shown below."),e.k0s(),e.j41(158,"pre")(159,"code",10),e.EFF(160,"\n@Subscription(returns => Comment, {\n  name: 'commentAdded',\n})\nsubscribeToCommentAdded() {\n  return pubSub.asyncIterator('commentAdded');\n}\n"),e.k0s()(),e.j41(161,"p"),e.EFF(162,"This construct produces the same SDL as the previous code sample, but allows us to decouple the method name from the subscription."),e.k0s(),e.j41(163,"h4",20)(164,"span"),e.EFF(165,"Publishing"),e.k0s()(),e.j41(166,"p"),e.EFF(167,"Now, to publish the event, we use the "),e.j41(168,"code"),e.EFF(169,"PubSub#publish"),e.k0s(),e.EFF(170," method. This is often used within a mutation to trigger a client-side update when a part of the object graph has changed. For example:"),e.k0s(),e.j41(171,"span",21),e.EFF(172),e.nI1(173,"extension"),e.nrm(174,"app-tabs",null,1),e.k0s(),e.j41(176,"pre")(177,"code",10),e.EFF(178,"\n@Mutation(returns => Comment)\nasync addComment(\n  @Args('postId', { type: () => Int }) postId: number,\n  @Args('comment', { type: () => Comment }) comment: CommentInput,\n) {\n  const newComment = this.commentsService.addComment({ id: postId, comment });\n  pubSub.publish('commentAdded', { commentAdded: newComment });\n  return newComment;\n}\n"),e.k0s()(),e.j41(179,"p"),e.EFF(180,"The "),e.j41(181,"code"),e.EFF(182,"PubSub#publish"),e.k0s(),e.EFF(183," method takes a "),e.j41(184,"code"),e.EFF(185,"triggerName"),e.k0s(),e.EFF(186," (again, think of this as an event topic name) as the first parameter, and an event payload as the second parameter. As mentioned, the subscription, by definition, returns a value and that value has a shape. Look again at the generated SDL for our "),e.j41(187,"code"),e.EFF(188,"commentAdded"),e.k0s(),e.EFF(189," subscription:"),e.k0s(),e.j41(190,"pre")(191,"code",19),e.EFF(192,"\ntype Subscription {\n  commentAdded(): Comment!\n}\n"),e.k0s()(),e.j41(193,"p"),e.EFF(194,"This tells us that the subscription must return an object with a top-level property name of "),e.j41(195,"code"),e.EFF(196,"commentAdded"),e.k0s(),e.EFF(197," that has a value which is a "),e.j41(198,"code"),e.EFF(199,"Comment"),e.k0s(),e.EFF(200," object. The important point to note is that the shape of the event payload emitted by the "),e.j41(201,"code"),e.EFF(202,"PubSub#publish"),e.k0s(),e.EFF(203," method must correspond to the shape of the value expected to return from the subscription. So, in our example above, the "),e.j41(204,"code"),e.EFF(205),e.k0s(),e.EFF(206," statement publishes a "),e.j41(207,"code"),e.EFF(208,"commentAdded"),e.k0s(),e.EFF(209," event with the appropriately shaped payload. If these shapes don't match, your subscription will fail during the GraphQL validation phase."),e.k0s(),e.j41(210,"h4",22)(211,"span"),e.EFF(212,"Filtering subscriptions"),e.k0s()(),e.j41(213,"p"),e.EFF(214,"To filter out specific events, set the "),e.j41(215,"code"),e.EFF(216,"filter"),e.k0s(),e.EFF(217," property to a filter function. This function acts similar to the function passed to an array "),e.j41(218,"code"),e.EFF(219,"filter"),e.k0s(),e.EFF(220,". It takes two arguments: "),e.j41(221,"code"),e.EFF(222,"payload"),e.k0s(),e.EFF(223," containing the event payload (as sent by the event publisher), and "),e.j41(224,"code"),e.EFF(225,"variables"),e.k0s(),e.EFF(226," taking any arguments passed in during the subscription request. It returns a boolean determining whether this event should be published to client listeners."),e.k0s(),e.j41(227,"pre")(228,"code",10),e.EFF(229,"\n@Subscription(returns => Comment, {\n  filter: (payload, variables) =>\n    payload.commentAdded.title === variables.title,\n})\ncommentAdded(@Args('title') title: string) {\n  return pubSub.asyncIterator('commentAdded');\n}\n"),e.k0s()(),e.j41(230,"h4",23)(231,"span"),e.EFF(232,"Mutating subscription payloads"),e.k0s()(),e.j41(233,"p"),e.EFF(234,"To mutate the published event payload, set the "),e.j41(235,"code"),e.EFF(236,"resolve"),e.k0s(),e.EFF(237," property to a function. The function receives the event payload (as sent by the event publisher) and returns the appropriate value."),e.k0s(),e.j41(238,"pre")(239,"code",10),e.EFF(240,"\n@Subscription(returns => Comment, {\n  resolve: value => value,\n})\ncommentAdded() {\n  return pubSub.asyncIterator('commentAdded');\n}\n"),e.k0s()(),e.j41(241,"blockquote",11)(242,"strong"),e.EFF(243,"Note"),e.k0s(),e.EFF(244," If you use the "),e.j41(245,"code"),e.EFF(246,"resolve"),e.k0s(),e.EFF(247," option, you should return the unwrapped payload (e.g., with our example, return a "),e.j41(248,"code"),e.EFF(249,"newComment"),e.k0s(),e.EFF(250," object directly, not a "),e.j41(251,"code"),e.EFF(252),e.k0s(),e.EFF(253," object).\n"),e.k0s(),e.j41(254,"p"),e.EFF(255,"If you need to access injected providers (e.g., use an external service to validate the data), use the following construction."),e.k0s(),e.j41(256,"pre")(257,"code",10),e.EFF(258,'\n@Subscription(returns => Comment, {\n  resolve(this: AuthorResolver, value) {\n    // "this" refers to an instance of "AuthorResolver"\n    return value;\n  }\n})\ncommentAdded() {\n  return pubSub.asyncIterator(\'commentAdded\');\n}\n'),e.k0s()(),e.j41(259,"p"),e.EFF(260,"The same construction works with filters:"),e.k0s(),e.j41(261,"pre")(262,"code",10),e.EFF(263,'\n@Subscription(returns => Comment, {\n  filter(this: AuthorResolver, payload, variables) {\n    // "this" refers to an instance of "AuthorResolver"\n    return payload.commentAdded.title === variables.title;\n  }\n})\ncommentAdded() {\n  return pubSub.asyncIterator(\'commentAdded\');\n}\n'),e.k0s()(),e.j41(264,"h4",24)(265,"span"),e.EFF(266,"Schema first"),e.k0s()(),e.j41(267,"p"),e.EFF(268,"To create an equivalent subscription in Nest, we'll make use of the "),e.j41(269,"code"),e.EFF(270,"@Subscription()"),e.k0s(),e.EFF(271," decorator."),e.k0s(),e.j41(272,"pre")(273,"code",10),e.EFF(274,"\nconst pubSub = new PubSub();\n\n@Resolver('Author')\nexport class AuthorResolver {\n  // ...\n  @Subscription()\n  commentAdded() {\n    return pubSub.asyncIterator('commentAdded');\n  }\n}\n"),e.k0s()(),e.j41(275,"p"),e.EFF(276,"To filter out specific events based on context and arguments, set the "),e.j41(277,"code"),e.EFF(278,"filter"),e.k0s(),e.EFF(279," property."),e.k0s(),e.j41(280,"pre")(281,"code",10),e.EFF(282,"\n@Subscription('commentAdded', {\n  filter: (payload, variables) =>\n    payload.commentAdded.title === variables.title,\n})\ncommentAdded() {\n  return pubSub.asyncIterator('commentAdded');\n}\n"),e.k0s()(),e.j41(283,"p"),e.EFF(284,"To mutate the published payload, we can use a "),e.j41(285,"code"),e.EFF(286,"resolve"),e.k0s(),e.EFF(287," function."),e.k0s(),e.j41(288,"pre")(289,"code",10),e.EFF(290,"\n@Subscription('commentAdded', {\n  resolve: value => value,\n})\ncommentAdded() {\n  return pubSub.asyncIterator('commentAdded');\n}\n"),e.k0s()(),e.j41(291,"p"),e.EFF(292,"If you need to access injected providers (e.g., use an external service to validate the data), use the following construction:"),e.k0s(),e.j41(293,"pre")(294,"code",10),e.EFF(295,"\n@Subscription('commentAdded', {\n  resolve(this: AuthorResolver, value) {\n    // \"this\" refers to an instance of \"AuthorResolver\"\n    return value;\n  }\n})\ncommentAdded() {\n  return pubSub.asyncIterator('commentAdded');\n}\n"),e.k0s()(),e.j41(296,"p"),e.EFF(297,"The same construction works with filters:"),e.k0s(),e.j41(298,"pre")(299,"code",10),e.EFF(300,"\n@Subscription('commentAdded', {\n  filter(this: AuthorResolver, payload, variables) {\n    // \"this\" refers to an instance of \"AuthorResolver\"\n    return payload.commentAdded.title === variables.title;\n  }\n})\ncommentAdded() {\n  return pubSub.asyncIterator('commentAdded');\n}\n"),e.k0s()(),e.j41(301,"p"),e.EFF(302,"The last step is to update the type definitions file."),e.k0s(),e.j41(303,"pre")(304,"code",19),e.EFF(305,"\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String\n  votes: Int\n}\n\ntype Query {\n  author(id: Int!): Author\n}\n\ntype Comment {\n  id: String\n  content: String\n}\n\ntype Subscription {\n  commentAdded(title: String!): Comment\n}\n"),e.k0s()(),e.j41(306,"p"),e.EFF(307,"With this, we've created a single "),e.j41(308,"code"),e.EFF(309,"commentAdded(title: String!): Comment"),e.k0s(),e.EFF(310," subscription. You can find a full sample implementation "),e.j41(311,"a",25),e.EFF(312,"here"),e.k0s(),e.EFF(313,"."),e.k0s(),e.j41(314,"h4",26)(315,"span"),e.EFF(316,"PubSub"),e.k0s()(),e.j41(317,"p"),e.EFF(318,"We instantiated a local "),e.j41(319,"code"),e.EFF(320,"PubSub"),e.k0s(),e.EFF(321," instance above. The preferred approach is to define "),e.j41(322,"code"),e.EFF(323,"PubSub"),e.k0s(),e.EFF(324," as a "),e.j41(325,"a",27),e.EFF(326,"provider"),e.k0s(),e.EFF(327," and inject it through the constructor (using the "),e.j41(328,"code"),e.EFF(329,"@Inject()"),e.k0s(),e.EFF(330," decorator). This allows us to re-use the instance across the whole application. For example, define a provider as follows, then inject "),e.j41(331,"code"),e.EFF(332,"'PUB_SUB'"),e.k0s(),e.EFF(333," where needed."),e.k0s(),e.j41(334,"pre")(335,"code",10),e.EFF(336,"\n{\n  provide: 'PUB_SUB',\n  useValue: new PubSub(),\n}\n"),e.k0s()(),e.j41(337,"h4",28)(338,"span"),e.EFF(339,"Customize subscriptions server"),e.k0s()(),e.j41(340,"p"),e.EFF(341,"To customize the subscriptions server (e.g., change the path), use the "),e.j41(342,"code"),e.EFF(343,"subscriptions"),e.k0s(),e.EFF(344," options property."),e.k0s(),e.j41(345,"pre")(346,"code",10),e.EFF(347,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'subscriptions-transport-ws': {\n      path: '/graphql'\n    },\n  }\n}),\n"),e.k0s()(),e.j41(348,"p"),e.EFF(349,"If you're using the "),e.j41(350,"code"),e.EFF(351,"graphql-ws"),e.k0s(),e.EFF(352," package for subscriptions, replace the "),e.j41(353,"code"),e.EFF(354,"subscriptions-transport-ws"),e.k0s(),e.EFF(355," key with "),e.j41(356,"code"),e.EFF(357,"graphql-ws"),e.k0s(),e.EFF(358,", as follows:"),e.k0s(),e.j41(359,"pre")(360,"code",10),e.EFF(361,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'graphql-ws': {\n      path: '/graphql'\n    },\n  }\n}),\n"),e.k0s()(),e.j41(362,"h4",29)(363,"span"),e.EFF(364,"Authentication over WebSockets"),e.k0s()(),e.j41(365,"p"),e.EFF(366,"Checking whether the user is authenticated can be done inside the "),e.j41(367,"code"),e.EFF(368,"onConnect"),e.k0s(),e.EFF(369," callback function that you can specify in the "),e.j41(370,"code"),e.EFF(371,"subscriptions"),e.k0s(),e.EFF(372," options."),e.k0s(),e.j41(373,"p"),e.EFF(374,"The "),e.j41(375,"code"),e.EFF(376,"onConnect"),e.k0s(),e.EFF(377," will receive as a first argument the "),e.j41(378,"code"),e.EFF(379,"connectionParams"),e.k0s(),e.EFF(380," passed to the "),e.j41(381,"code"),e.EFF(382,"SubscriptionClient"),e.k0s(),e.EFF(383," (read "),e.j41(384,"a",30),e.EFF(385,"more"),e.k0s(),e.EFF(386,")."),e.k0s(),e.j41(387,"pre")(388,"code",10),e.EFF(389,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'subscriptions-transport-ws': {\n      onConnect: (connectionParams) => {\n        const authToken = connectionParams.authToken;\n        if (!isValid(authToken)) {\n          throw new Error('Token is not valid');\n        }\n        // extract user information from token\n        const user = parseToken(authToken);\n        // return user info to add them to the context later\n        return { user };\n      },\n    }\n  },\n  context: ({ connection }) => {\n    // connection.context will be equal to what was returned by the \"onConnect\" callback\n  },\n}),\n"),e.k0s()(),e.j41(390,"p"),e.EFF(391,"The "),e.j41(392,"code"),e.EFF(393,"authToken"),e.k0s(),e.EFF(394," in this example is only sent once by the client, when the connection is first established.\nAll subscriptions made with this connection will have the same "),e.j41(395,"code"),e.EFF(396,"authToken"),e.k0s(),e.EFF(397,", and thus the same user info."),e.k0s(),e.j41(398,"blockquote",11)(399,"strong"),e.EFF(400,"Note"),e.k0s(),e.EFF(401," There is a bug in "),e.j41(402,"code"),e.EFF(403,"subscriptions-transport-ws"),e.k0s(),e.EFF(404," that allows connections to skip the "),e.j41(405,"code"),e.EFF(406,"onConnect"),e.k0s(),e.EFF(407," phase (read "),e.j41(408,"a",31),e.EFF(409,"more"),e.k0s(),e.EFF(410,"). You should not assume that "),e.j41(411,"code"),e.EFF(412,"onConnect"),e.k0s(),e.EFF(413," was called when the user starts a subscription, and always check that the "),e.j41(414,"code"),e.EFF(415,"context"),e.k0s(),e.EFF(416," is populated.\n"),e.k0s(),e.j41(417,"p"),e.EFF(418,"If you're using the "),e.j41(419,"code"),e.EFF(420,"graphql-ws"),e.k0s(),e.EFF(421," package, the signature of the "),e.j41(422,"code"),e.EFF(423,"onConnect"),e.k0s(),e.EFF(424," callback will be slightly different:"),e.k0s(),e.j41(425,"pre")(426,"code",10),e.EFF(427,"\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'graphql-ws': {\n      onConnect: (context: Context<any>) => {\n        const { connectionParams, extra } = context;\n        // user validation will remain the same as in the example above\n        // when using with graphql-ws, additional context value should be stored in the extra field\n        extra.user = { user: {} };\n      },\n    },\n  },\n  context: ({ extra }) => {\n    // you can now access your additional context value through the extra field\n  },\n});\n"),e.k0s()(),e.j41(428,"h4",32)(429,"span"),e.EFF(430,"Enable subscriptions with Mercurius driver"),e.k0s()(),e.j41(431,"p"),e.EFF(432,"To enable subscriptions, set the "),e.j41(433,"code"),e.EFF(434,"subscription"),e.k0s(),e.EFF(435," property to "),e.j41(436,"code"),e.EFF(437,"true"),e.k0s(),e.EFF(438,"."),e.k0s(),e.j41(439,"pre")(440,"code",10),e.EFF(441,"\nGraphQLModule.forRoot<MercuriusDriverConfig>({\n  driver: MercuriusDriver,\n  subscription: true,\n}),\n"),e.k0s()(),e.j41(442,"blockquote",14)(443,"strong"),e.EFF(444,"Hint"),e.k0s(),e.EFF(445," You can also pass the options object to set up a custom emitter, validate incoming connections, etc. Read more "),e.j41(446,"a",33),e.EFF(447,"here"),e.k0s(),e.EFF(448," (see "),e.j41(449,"code"),e.EFF(450,"subscription"),e.k0s(),e.EFF(451,").\n"),e.k0s(),e.j41(452,"h4",34)(453,"span"),e.EFF(454,"Code first"),e.k0s()(),e.j41(455,"p"),e.EFF(456,"To create a subscription using the code first approach, we use the "),e.j41(457,"code"),e.EFF(458,"@Subscription()"),e.k0s(),e.EFF(459," decorator (exported from the "),e.j41(460,"code"),e.EFF(461,"@nestjs/graphql"),e.k0s(),e.EFF(462," package) and the "),e.j41(463,"code"),e.EFF(464,"PubSub"),e.k0s(),e.EFF(465," class from the "),e.j41(466,"code"),e.EFF(467,"mercurius"),e.k0s(),e.EFF(468," package, which provides a simple "),e.j41(469,"strong"),e.EFF(470,"publish/subscribe API"),e.k0s(),e.EFF(471,"."),e.k0s(),e.j41(472,"p"),e.EFF(473,"The following subscription handler takes care of "),e.j41(474,"strong"),e.EFF(475,"subscribing"),e.k0s(),e.EFF(476," to an event by calling "),e.j41(477,"code"),e.EFF(478,"PubSub#asyncIterator"),e.k0s(),e.EFF(479,". This method takes a single argument, the "),e.j41(480,"code"),e.EFF(481,"triggerName"),e.k0s(),e.EFF(482,", which corresponds to an event topic name."),e.k0s(),e.j41(483,"pre")(484,"code",10),e.EFF(485,"\n@Resolver((of) => Author)\nexport class AuthorResolver {\n  // ...\n  @Subscription((returns) => Comment)\n  commentAdded(@Context('pubsub') pubSub: PubSub) {\n    return pubSub.subscribe('commentAdded');\n  }\n}\n"),e.k0s()(),e.j41(486,"blockquote",14)(487,"strong"),e.EFF(488,"Hint"),e.k0s(),e.EFF(489," All decorators used in the example above are exported from the "),e.j41(490,"code"),e.EFF(491,"@nestjs/graphql"),e.k0s(),e.EFF(492," package, while the "),e.j41(493,"code"),e.EFF(494,"PubSub"),e.k0s(),e.EFF(495," class is exported from the "),e.j41(496,"code"),e.EFF(497,"mercurius"),e.k0s(),e.EFF(498," package.\n"),e.k0s(),e.j41(499,"blockquote",11)(500,"strong"),e.EFF(501,"Note"),e.k0s(),e.j41(502,"code"),e.EFF(503,"PubSub"),e.k0s(),e.EFF(504," is a class that exposes a simple "),e.j41(505,"code"),e.EFF(506,"publish"),e.k0s(),e.EFF(507," and "),e.j41(508,"code"),e.EFF(509,"subscribe"),e.k0s(),e.EFF(510," API. Check out "),e.j41(511,"a",35),e.EFF(512,"this section"),e.k0s(),e.EFF(513," on how to register a custom "),e.j41(514,"code"),e.EFF(515,"PubSub"),e.k0s(),e.EFF(516," class.\n"),e.k0s(),e.j41(517,"p"),e.EFF(518,"This will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(519,"pre")(520,"code",19),e.EFF(521,"\ntype Subscription {\n  commentAdded(): Comment!\n}\n"),e.k0s()(),e.j41(522,"p"),e.EFF(523,"Note that subscriptions, by definition, return an object with a single top level property whose key is the name of the subscription. This name is either inherited from the name of the subscription handler method (i.e., "),e.j41(524,"code"),e.EFF(525,"commentAdded"),e.k0s(),e.EFF(526," above), or is provided explicitly by passing an option with the key "),e.j41(527,"code"),e.EFF(528,"name"),e.k0s(),e.EFF(529," as the second argument to the "),e.j41(530,"code"),e.EFF(531,"@Subscription()"),e.k0s(),e.EFF(532," decorator, as shown below."),e.k0s(),e.j41(533,"pre")(534,"code",10),e.EFF(535,"\n@Subscription(returns => Comment, {\n  name: 'commentAdded',\n})\nsubscribeToCommentAdded(@Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n"),e.k0s()(),e.j41(536,"p"),e.EFF(537,"This construct produces the same SDL as the previous code sample, but allows us to decouple the method name from the subscription."),e.k0s(),e.j41(538,"h4",36)(539,"span"),e.EFF(540,"Publishing"),e.k0s()(),e.j41(541,"p"),e.EFF(542,"Now, to publish the event, we use the "),e.j41(543,"code"),e.EFF(544,"PubSub#publish"),e.k0s(),e.EFF(545," method. This is often used within a mutation to trigger a client-side update when a part of the object graph has changed. For example:"),e.k0s(),e.j41(546,"span",21),e.EFF(547),e.nI1(548,"extension"),e.nrm(549,"app-tabs",null,2),e.k0s(),e.j41(551,"pre")(552,"code",10),e.EFF(553,"\n@Mutation(returns => Comment)\nasync addComment(\n  @Args('postId', { type: () => Int }) postId: number,\n  @Args('comment', { type: () => Comment }) comment: CommentInput,\n  @Context('pubsub') pubSub: PubSub,\n) {\n  const newComment = this.commentsService.addComment({ id: postId, comment });\n  await pubSub.publish({\n    topic: 'commentAdded',\n    payload: {\n      commentAdded: newComment\n    }\n  });\n  return newComment;\n}\n"),e.k0s()(),e.j41(554,"p"),e.EFF(555,"As mentioned, the subscription, by definition, returns a value and that value has a shape. Look again at the generated SDL for our "),e.j41(556,"code"),e.EFF(557,"commentAdded"),e.k0s(),e.EFF(558," subscription:"),e.k0s(),e.j41(559,"pre")(560,"code",19),e.EFF(561,"\ntype Subscription {\n  commentAdded(): Comment!\n}\n"),e.k0s()(),e.j41(562,"p"),e.EFF(563,"This tells us that the subscription must return an object with a top-level property name of "),e.j41(564,"code"),e.EFF(565,"commentAdded"),e.k0s(),e.EFF(566," that has a value which is a "),e.j41(567,"code"),e.EFF(568,"Comment"),e.k0s(),e.EFF(569," object. The important point to note is that the shape of the event payload emitted by the "),e.j41(570,"code"),e.EFF(571,"PubSub#publish"),e.k0s(),e.EFF(572," method must correspond to the shape of the value expected to return from the subscription. So, in our example above, the "),e.j41(573,"code"),e.EFF(574),e.k0s(),e.EFF(575," statement publishes a "),e.j41(576,"code"),e.EFF(577,"commentAdded"),e.k0s(),e.EFF(578," event with the appropriately shaped payload. If these shapes don't match, your subscription will fail during the GraphQL validation phase."),e.k0s(),e.j41(579,"h4",37)(580,"span"),e.EFF(581,"Filtering subscriptions"),e.k0s()(),e.j41(582,"p"),e.EFF(583,"To filter out specific events, set the "),e.j41(584,"code"),e.EFF(585,"filter"),e.k0s(),e.EFF(586," property to a filter function. This function acts similar to the function passed to an array "),e.j41(587,"code"),e.EFF(588,"filter"),e.k0s(),e.EFF(589,". It takes two arguments: "),e.j41(590,"code"),e.EFF(591,"payload"),e.k0s(),e.EFF(592," containing the event payload (as sent by the event publisher), and "),e.j41(593,"code"),e.EFF(594,"variables"),e.k0s(),e.EFF(595," taking any arguments passed in during the subscription request. It returns a boolean determining whether this event should be published to client listeners."),e.k0s(),e.j41(596,"pre")(597,"code",10),e.EFF(598,"\n@Subscription(returns => Comment, {\n  filter: (payload, variables) =>\n    payload.commentAdded.title === variables.title,\n})\ncommentAdded(@Args('title') title: string, @Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n"),e.k0s()(),e.j41(599,"p"),e.EFF(600,"If you need to access injected providers (e.g., use an external service to validate the data), use the following construction."),e.k0s(),e.j41(601,"pre")(602,"code",10),e.EFF(603,"\n@Subscription(returns => Comment, {\n  filter(this: AuthorResolver, payload, variables) {\n    // \"this\" refers to an instance of \"AuthorResolver\"\n    return payload.commentAdded.title === variables.title;\n  }\n})\ncommentAdded(@Args('title') title: string, @Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n"),e.k0s()(),e.j41(604,"h4",38)(605,"span"),e.EFF(606,"Schema first"),e.k0s()(),e.j41(607,"p"),e.EFF(608,"To create an equivalent subscription in Nest, we'll make use of the "),e.j41(609,"code"),e.EFF(610,"@Subscription()"),e.k0s(),e.EFF(611," decorator."),e.k0s(),e.j41(612,"pre")(613,"code",10),e.EFF(614,"\nconst pubSub = new PubSub();\n\n@Resolver('Author')\nexport class AuthorResolver {\n  // ...\n  @Subscription()\n  commentAdded(@Context('pubsub') pubSub: PubSub) {\n    return pubSub.subscribe('commentAdded');\n  }\n}\n"),e.k0s()(),e.j41(615,"p"),e.EFF(616,"To filter out specific events based on context and arguments, set the "),e.j41(617,"code"),e.EFF(618,"filter"),e.k0s(),e.EFF(619," property."),e.k0s(),e.j41(620,"pre")(621,"code",10),e.EFF(622,"\n@Subscription('commentAdded', {\n  filter: (payload, variables) =>\n    payload.commentAdded.title === variables.title,\n})\ncommentAdded(@Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n"),e.k0s()(),e.j41(623,"p"),e.EFF(624,"If you need to access injected providers (e.g., use an external service to validate the data), use the following construction:"),e.k0s(),e.j41(625,"pre")(626,"code",10),e.EFF(627,"\n@Subscription('commentAdded', {\n  filter(this: AuthorResolver, payload, variables) {\n    // \"this\" refers to an instance of \"AuthorResolver\"\n    return payload.commentAdded.title === variables.title;\n  }\n})\ncommentAdded(@Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n"),e.k0s()(),e.j41(628,"p"),e.EFF(629,"The last step is to update the type definitions file."),e.k0s(),e.j41(630,"pre")(631,"code",19),e.EFF(632,"\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String\n  votes: Int\n}\n\ntype Query {\n  author(id: Int!): Author\n}\n\ntype Comment {\n  id: String\n  content: String\n}\n\ntype Subscription {\n  commentAdded(title: String!): Comment\n}\n"),e.k0s()(),e.j41(633,"p"),e.EFF(634,"With this, we've created a single "),e.j41(635,"code"),e.EFF(636,"commentAdded(title: String!): Comment"),e.k0s(),e.EFF(637," subscription."),e.k0s(),e.j41(638,"h4",39)(639,"span"),e.EFF(640,"PubSub"),e.k0s()(),e.j41(641,"p"),e.EFF(642,"In the examples above, we used the default "),e.j41(643,"code"),e.EFF(644,"PubSub"),e.k0s(),e.EFF(645," emitter ("),e.j41(646,"a",40),e.EFF(647,"mqemitter"),e.k0s(),e.EFF(648,")\nThe preferred approach (for production) is to use "),e.j41(649,"code"),e.EFF(650,"mqemitter-redis"),e.k0s(),e.EFF(651,". Alternatively, a custom "),e.j41(652,"code"),e.EFF(653,"PubSub"),e.k0s(),e.EFF(654," implementation can be provided (read more "),e.j41(655,"a",41),e.EFF(656,"here"),e.k0s(),e.EFF(657,")"),e.k0s(),e.j41(658,"pre")(659,"code",10),e.EFF(660,"\nGraphQLModule.forRoot<MercuriusDriverConfig>({\n  driver: MercuriusDriver,\n  subscription: {\n    emitter: require('mqemitter-redis')({\n      port: 6579,\n      host: '127.0.0.1',\n    }),\n  },\n});\n"),e.k0s()(),e.j41(661,"h4",42)(662,"span"),e.EFF(663,"Authentication over WebSockets"),e.k0s()(),e.j41(664,"p"),e.EFF(665,"Checking whether the user is authenticated can be done inside the "),e.j41(666,"code"),e.EFF(667,"verifyClient"),e.k0s(),e.EFF(668," callback function that you can specify in the "),e.j41(669,"code"),e.EFF(670,"subscription"),e.k0s(),e.EFF(671," options."),e.k0s(),e.j41(672,"p"),e.EFF(673,"The "),e.j41(674,"code"),e.EFF(675,"verifyClient"),e.k0s(),e.EFF(676," will receive the "),e.j41(677,"code"),e.EFF(678,"info"),e.k0s(),e.EFF(679," object as a first argument which you can use to retrieve the request's headers."),e.k0s(),e.j41(680,"pre")(681,"code",10),e.EFF(682,"\nGraphQLModule.forRoot<MercuriusDriverConfig>({\n  driver: MercuriusDriver,\n  subscription: {\n    verifyClient: (info, next) => {\n      const authorization = info.req.headers?.authorization as string;\n      if (!authorization?.startsWith('Bearer ')) {\n        return next(false);\n      }\n      next(true);\n    },\n  }\n}),\n"),e.k0s()()()),2&o){const c=e.sdS(175),p=e.sdS(550);e.R7$(172),e.SpI(" ",e.i5U(173,10,"posts/posts.resolver",c.isJsActive),"\n"),e.R7$(33),e.Lme("pubSub.publish('commentAdded', ","{"," commentAdded: newComment ","}",")"),e.R7$(47),e.Lme("","{"," commentAdded: newComment ","}",""),e.R7$(295),e.SpI(" ",e.i5U(548,13,"posts/posts.resolver",p.isJsActive),"\n"),e.R7$(27),e.LHq("pubSub.publish(","{"," topic: 'commentAdded', payload: ","{"," commentAdded: newComment ","}"," ","}",")")}},dependencies:[l.O,a.a,F.Wk,d.M],encapsulation:2,changeDetection:0})}return t})(),data:{title:"GraphQL + TypeScript - Subscriptions"}},{path:"guards-interceptors",redirectTo:"other-features"},{path:"tooling",redirectTo:"other-features"},{path:"other-features",component:b,data:{title:"GraphQL + TypeScript - Other features"}},{path:"federation",component:y,data:{title:"GraphQL + TypeScript - Federation"}},{path:"directives",component:g,data:{title:"GraphQL + TypeScript - Directives"}},{path:"migration-guide",component:E,data:{title:"GraphQL + TypeScript - Migration guide"}},{path:"field-middleware",component:v,data:{title:"GraphQL + TypeScript - Field middleware"}},{path:"complexity",component:k,data:{title:"GraphQL + TypeScript - Complexity"}},{path:"extensions",component:j,data:{title:"GraphQL + TypeScript - Extensions"}},{path:"enums",redirectTo:"unions-and-enums"},{path:"unions",redirectTo:"unions-and-enums"},{path:"unions-and-enums",component:(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-unions-enums"]],features:[e.Vt3],decls:252,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/unions-and-enums.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","unions"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/schema/#union-types"],["appAnchor","","id","code-first"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/apollo-server/schema/unions-interfaces/#union-type"],[1,"language-typescript"],[1,"warning"],[1,"language-graphql"],["appAnchor","","id","schema-first"],["routerLink","/graphql/quick-start"],[1,"info"],["id","enums"],["rel","nofollow","target","_blank","href","https://graphql.org/learn/schema/#enumeration-types"],["appAnchor","","id","code-first-1"],["appAnchor","","id","schema-first-1"],["rel","nofollow","target","_blank","href","https://www.apollographql.com/docs/apollo-server/schema/scalars-enums/#internal-values"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Unions"),e.k0s(),e.j41(7,"p"),e.EFF(8,"Union types are very similar to interfaces, but they don't get to specify any common fields between the types (read more "),e.j41(9,"a",6),e.EFF(10,"here"),e.k0s(),e.EFF(11,"). Unions are useful for returning disjoint data types from a single field."),e.k0s(),e.j41(12,"h4",7)(13,"span"),e.EFF(14,"Code first"),e.k0s()(),e.j41(15,"p"),e.EFF(16,"To define a GraphQL union type, we must define classes that this union will be composed of. Following the "),e.j41(17,"a",8),e.EFF(18,"example"),e.k0s(),e.EFF(19," from the Apollo documentation, we'll create two classes. First, "),e.j41(20,"code"),e.EFF(21,"Book"),e.k0s(),e.EFF(22,":"),e.k0s(),e.j41(23,"pre")(24,"code",9),e.EFF(25,"\nimport { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Book {\n  @Field()\n  title: string;\n}\n"),e.k0s()(),e.j41(26,"p"),e.EFF(27,"And then "),e.j41(28,"code"),e.EFF(29,"Author"),e.k0s(),e.EFF(30,":"),e.k0s(),e.j41(31,"pre")(32,"code",9),e.EFF(33,"\nimport { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Author {\n  @Field()\n  name: string;\n}\n"),e.k0s()(),e.j41(34,"p"),e.EFF(35,"With this in place, register the "),e.j41(36,"code"),e.EFF(37,"ResultUnion"),e.k0s(),e.EFF(38," union using the "),e.j41(39,"code"),e.EFF(40,"createUnionType"),e.k0s(),e.EFF(41," function exported from the "),e.j41(42,"code"),e.EFF(43,"@nestjs/graphql"),e.k0s(),e.EFF(44," package:"),e.k0s(),e.j41(45,"pre")(46,"code",9),e.EFF(47,"\nexport const ResultUnion = createUnionType({\n  name: 'ResultUnion',\n  types: () => [Author, Book] as const,\n});\n"),e.k0s()(),e.j41(48,"blockquote",10)(49,"strong"),e.EFF(50,"Warning"),e.k0s(),e.EFF(51," The array returned by the "),e.j41(52,"code"),e.EFF(53,"types"),e.k0s(),e.EFF(54," property of the "),e.j41(55,"code"),e.EFF(56,"createUnionType"),e.k0s(),e.EFF(57," function should be given a const assertion. If the const assertion is not given, a wrong declaration file will be generated at compile time, and an error will occur when using it from another project.\n"),e.k0s(),e.j41(58,"p"),e.EFF(59,"Now, we can reference the "),e.j41(60,"code"),e.EFF(61,"ResultUnion"),e.k0s(),e.EFF(62," in our query:"),e.k0s(),e.j41(63,"pre")(64,"code",9),e.EFF(65,"\n@Query(returns => [ResultUnion])\nsearch(): Array<typeof ResultUnion> {\n  return [new Author(), new Book()];\n}\n"),e.k0s()(),e.j41(66,"p"),e.EFF(67,"This will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(68,"pre")(69,"code",11),e.EFF(70,"\ntype Author {\n  name: String!\n}\n\ntype Book {\n  title: String!\n}\n\nunion ResultUnion = Author | Book\n\ntype Query {\n  search: [ResultUnion!]!\n}\n"),e.k0s()(),e.j41(71,"p"),e.EFF(72,"The default "),e.j41(73,"code"),e.EFF(74,"resolveType()"),e.k0s(),e.EFF(75," function generated by the library will extract the type based on the value returned from the resolver method. That means returning class instances instead of literal JavaScript object is obligatory."),e.k0s(),e.j41(76,"p"),e.EFF(77,"To provide a customized "),e.j41(78,"code"),e.EFF(79,"resolveType()"),e.k0s(),e.EFF(80," function, pass the "),e.j41(81,"code"),e.EFF(82,"resolveType"),e.k0s(),e.EFF(83," property to the options object passed into the "),e.j41(84,"code"),e.EFF(85,"createUnionType()"),e.k0s(),e.EFF(86," function, as follows:"),e.k0s(),e.j41(87,"pre")(88,"code",9),e.EFF(89,"\nexport const ResultUnion = createUnionType({\n  name: 'ResultUnion',\n  types: () => [Author, Book] as const,\n  resolveType(value) {\n    if (value.name) {\n      return Author;\n    }\n    if (value.title) {\n      return Book;\n    }\n    return null;\n  },\n});\n"),e.k0s()(),e.j41(90,"h4",12)(91,"span"),e.EFF(92,"Schema first"),e.k0s()(),e.j41(93,"p"),e.EFF(94,"To define a union in the schema first approach, simply create a GraphQL union with SDL."),e.k0s(),e.j41(95,"pre")(96,"code",11),e.EFF(97,"\ntype Author {\n  name: String!\n}\n\ntype Book {\n  title: String!\n}\n\nunion ResultUnion = Author | Book\n"),e.k0s()(),e.j41(98,"p"),e.EFF(99,"Then, you can use the typings generation feature (as shown in the "),e.j41(100,"a",13),e.EFF(101,"quick start"),e.k0s(),e.EFF(102," chapter) to generate corresponding TypeScript definitions:"),e.k0s(),e.j41(103,"pre")(104,"code",9),e.EFF(105,"\nexport class Author {\n  name: string;\n}\n\nexport class Book {\n  title: string;\n}\n\nexport type ResultUnion = Author | Book;\n"),e.k0s()(),e.j41(106,"p"),e.EFF(107,"Unions require an extra "),e.j41(108,"code"),e.EFF(109,"__resolveType"),e.k0s(),e.EFF(110," field in the resolver map to determine which type the union should resolve to. Also, note that the "),e.j41(111,"code"),e.EFF(112,"ResultUnionResolver"),e.k0s(),e.EFF(113," class has to be registered as a provider in any module. Let's create a "),e.j41(114,"code"),e.EFF(115,"ResultUnionResolver"),e.k0s(),e.EFF(116," class and define the "),e.j41(117,"code"),e.EFF(118,"__resolveType"),e.k0s(),e.EFF(119," method."),e.k0s(),e.j41(120,"pre")(121,"code",9),e.EFF(122,"\n@Resolver('ResultUnion')\nexport class ResultUnionResolver {\n  @ResolveField()\n  __resolveType(value) {\n    if (value.name) {\n      return 'Author';\n    }\n    if (value.title) {\n      return 'Book';\n    }\n    return null;\n  }\n}\n"),e.k0s()(),e.j41(123,"blockquote",14)(124,"strong"),e.EFF(125,"Hint"),e.k0s(),e.EFF(126," All decorators are exported from the "),e.j41(127,"code"),e.EFF(128,"@nestjs/graphql"),e.k0s(),e.EFF(129," package.\n"),e.k0s(),e.j41(130,"h3",15),e.EFF(131,"Enums"),e.k0s(),e.j41(132,"p"),e.EFF(133,"Enumeration types are a special kind of scalar that is restricted to a particular set of allowed values (read more "),e.j41(134,"a",16),e.EFF(135,"here"),e.k0s(),e.EFF(136,"). This allows you to:"),e.k0s(),e.j41(137,"ul")(138,"li"),e.EFF(139,"validate that any arguments of this type are one of the allowed values"),e.k0s(),e.j41(140,"li"),e.EFF(141,"communicate through the type system that a field will always be one of a finite set of values"),e.k0s()(),e.j41(142,"h4",17)(143,"span"),e.EFF(144,"Code first"),e.k0s()(),e.j41(145,"p"),e.EFF(146,"When using the code first approach, you define a GraphQL enum type by simply creating a TypeScript enum."),e.k0s(),e.j41(147,"pre")(148,"code",9),e.EFF(149,"\nexport enum AllowedColor {\n  RED,\n  GREEN,\n  BLUE,\n}\n"),e.k0s()(),e.j41(150,"p"),e.EFF(151,"With this in place, register the "),e.j41(152,"code"),e.EFF(153,"AllowedColor"),e.k0s(),e.EFF(154," enum using the "),e.j41(155,"code"),e.EFF(156,"registerEnumType"),e.k0s(),e.EFF(157," function exported from the "),e.j41(158,"code"),e.EFF(159,"@nestjs/graphql"),e.k0s(),e.EFF(160," package:"),e.k0s(),e.j41(161,"pre")(162,"code",9),e.EFF(163,"\nregisterEnumType(AllowedColor, {\n  name: 'AllowedColor',\n});\n"),e.k0s()(),e.j41(164,"p"),e.EFF(165,"Now you can reference the "),e.j41(166,"code"),e.EFF(167,"AllowedColor"),e.k0s(),e.EFF(168," in our types:"),e.k0s(),e.j41(169,"pre")(170,"code",9),e.EFF(171,"\n@Field(type => AllowedColor)\nfavoriteColor: AllowedColor;\n"),e.k0s()(),e.j41(172,"p"),e.EFF(173,"This will result in generating the following part of the GraphQL schema in SDL:"),e.k0s(),e.j41(174,"pre")(175,"code",11),e.EFF(176,"\nenum AllowedColor {\n  RED\n  GREEN\n  BLUE\n}\n"),e.k0s()(),e.j41(177,"p"),e.EFF(178,"To provide a description for the enum, pass the "),e.j41(179,"code"),e.EFF(180,"description"),e.k0s(),e.EFF(181," property into the "),e.j41(182,"code"),e.EFF(183,"registerEnumType()"),e.k0s(),e.EFF(184," function."),e.k0s(),e.j41(185,"pre")(186,"code",9),e.EFF(187,"\nregisterEnumType(AllowedColor, {\n  name: 'AllowedColor',\n  description: 'The supported colors.',\n});\n"),e.k0s()(),e.j41(188,"p"),e.EFF(189,"To provide a description for the enum values, or to mark a value as deprecated, pass the "),e.j41(190,"code"),e.EFF(191,"valuesMap"),e.k0s(),e.EFF(192," property, as follows:"),e.k0s(),e.j41(193,"pre")(194,"code",9),e.EFF(195,"\nregisterEnumType(AllowedColor, {\n  name: 'AllowedColor',\n  description: 'The supported colors.',\n  valuesMap: {\n    RED: {\n      description: 'The default color.',\n    },\n    BLUE: {\n      deprecationReason: 'Too blue.',\n    },\n  },\n});\n"),e.k0s()(),e.j41(196,"p"),e.EFF(197,"This will generate the following GraphQL schema in SDL:"),e.k0s(),e.j41(198,"pre")(199,"code",11),e.EFF(200,'\n"""\nThe supported colors.\n"""\nenum AllowedColor {\n  """\n  The default color.\n  """\n  RED\n  GREEN\n  BLUE @deprecated(reason: "Too blue.")\n}\n'),e.k0s()(),e.j41(201,"h4",18)(202,"span"),e.EFF(203,"Schema first"),e.k0s()(),e.j41(204,"p"),e.EFF(205,"To define an enumerator in the schema first approach, simply create a GraphQL enum with SDL."),e.k0s(),e.j41(206,"pre")(207,"code",11),e.EFF(208,"\nenum AllowedColor {\n  RED\n  GREEN\n  BLUE\n}\n"),e.k0s()(),e.j41(209,"p"),e.EFF(210,"Then you can use the typings generation feature (as shown in the "),e.j41(211,"a",13),e.EFF(212,"quick start"),e.k0s(),e.EFF(213," chapter) to generate corresponding TypeScript definitions:"),e.k0s(),e.j41(214,"pre")(215,"code",9),e.EFF(216,"\nexport enum AllowedColor {\n  RED\n  GREEN\n  BLUE\n}\n"),e.k0s()(),e.j41(217,"p"),e.EFF(218,"Sometimes a backend forces a different value for an enum internally than in the public API. In this example the API contains "),e.j41(219,"code"),e.EFF(220,"RED"),e.k0s(),e.EFF(221,", however in resolvers we may use "),e.j41(222,"code"),e.EFF(223,"#f00"),e.k0s(),e.EFF(224," instead (read more "),e.j41(225,"a",19),e.EFF(226,"here"),e.k0s(),e.EFF(227,"). To accomplish this, declare a resolver object for the "),e.j41(228,"code"),e.EFF(229,"AllowedColor"),e.k0s(),e.EFF(230," enum:"),e.k0s(),e.j41(231,"pre")(232,"code",9),e.EFF(233,"\nexport const allowedColorResolver: Record<keyof typeof AllowedColor, any> = {\n  RED: '#f00',\n};\n"),e.k0s()(),e.j41(234,"blockquote",14)(235,"strong"),e.EFF(236,"Hint"),e.k0s(),e.EFF(237," All decorators are exported from the "),e.j41(238,"code"),e.EFF(239,"@nestjs/graphql"),e.k0s(),e.EFF(240," package.\n"),e.k0s(),e.j41(241,"p"),e.EFF(242,"Then use this resolver object together with the "),e.j41(243,"code"),e.EFF(244,"resolvers"),e.k0s(),e.EFF(245," property of the "),e.j41(246,"code"),e.EFF(247,"GraphQLModule#forRoot()"),e.k0s(),e.EFF(248," method, as follows:"),e.k0s(),e.j41(249,"pre")(250,"code",9),e.EFF(251,"\nGraphQLModule.forRoot({\n  resolvers: {\n    AllowedColor: allowedColorResolver,\n  },\n});\n"),e.k0s()()())},dependencies:[a.a,F.Wk],encapsulation:2,changeDetection:0})}return t})(),data:{title:"GraphQL + TypeScript - Unions and Enums"}},{path:"plugins",component:S,data:{title:"GraphQL + TypeScript - Plugins"}},{path:"interfaces",component:w,data:{title:"GraphQL + TypeScript - Interfaces"}},{path:"sharing-models",component:(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-sharing-models"]],features:[e.Vt3],decls:41,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/sharing-models.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","sharing-models"],[1,"warning"],["appAnchor","","id","using-the-model-shim"],[1,"language-typescript"],[1,"info"],["routerLink","/techniques/database"],["rel","nofollow","target","_blank","href","https://github.com/typeorm/typeorm/blob/master/extra/typeorm-model-shim.js"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Sharing models"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Warning"),e.k0s(),e.EFF(10," This chapter applies only to the code first approach.\n"),e.k0s(),e.j41(11,"p"),e.EFF(12,"One of the biggest advantages of using Typescript for the backend of your project is the ability to reuse the same models in a Typescript-based frontend application, by using a common Typescript package. "),e.k0s(),e.j41(13,"p"),e.EFF(14,"But there's a problem: the models created using the code first approach are heavily decorated with GraphQL related decorators. Those decorators are irrelevant in the frontend, negatively impacting performance."),e.k0s(),e.j41(15,"h4",7)(16,"span"),e.EFF(17,"Using the model shim"),e.k0s()(),e.j41(18,"p"),e.EFF(19,'To solve this issue, NestJS provides a "shim" which allows you to replace the original decorators with inert code by using a '),e.j41(20,"code"),e.EFF(21,"webpack"),e.k0s(),e.EFF(22," (or similar) configuration.\nTo use this shim, configure an alias between the "),e.j41(23,"code"),e.EFF(24,"@nestjs/graphql"),e.k0s(),e.EFF(25," package and the shim."),e.k0s(),e.j41(26,"p"),e.EFF(27,"For example, for webpack this is resolved this way:"),e.k0s(),e.j41(28,"pre")(29,"code",8),e.EFF(30,'\nresolve: { // see: https://webpack.js.org/configuration/resolve/\n  alias: {\n      "@nestjs/graphql": path.resolve(__dirname, "../node_modules/@nestjs/graphql/dist/extra/graphql-model-shim")\n  }\n}\n'),e.k0s()(),e.j41(31,"blockquote",9)(32,"strong"),e.EFF(33,"Hint"),e.k0s(),e.EFF(34," The "),e.j41(35,"a",10),e.EFF(36,"TypeORM"),e.k0s(),e.EFF(37," package has a similar shim that can be found "),e.j41(38,"a",11),e.EFF(39,"here"),e.k0s(),e.EFF(40,".\n"),e.k0s()())},dependencies:[a.a,F.Wk],encapsulation:2,changeDetection:0})}return t})(),data:{title:"GraphQL + TypeScript - Sharing models"}},{path:"mapped-types",component:A,data:{title:"GraphQL + TypeScript - Mapped types"}},{path:"cli-plugin",component:f,data:{title:"GraphQL + TypeScript - CLI Plugin"}},{path:"generating-sdl",component:(()=>{class t extends r.y{static \u0275fac=(()=>{let s;return function(n){return(s||(s=e.xGo(t)))(n||t)}})();static \u0275cmp=e.VBU({type:t,selectors:[["app-schema-generator"]],features:[e.Vt3],decls:70,vars:0,consts:[["contentReference",""],[1,"content"],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/schema-generator.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","generating-sdl"],[1,"warning"],[1,"language-typescript"],[1,"info"],["appAnchor","","id","usage"]],template:function(o,n){1&o&&(e.j41(0,"div",1,0)(2,"div",2)(3,"a",3),e.nrm(4,"i",4),e.k0s()(),e.j41(5,"h3",5),e.EFF(6,"Generating SDL"),e.k0s(),e.j41(7,"blockquote",6)(8,"strong"),e.EFF(9,"Warning"),e.k0s(),e.EFF(10," This chapter applies only to the code first approach.\n"),e.k0s(),e.j41(11,"p"),e.EFF(12,"To manually generate a GraphQL SDL schema (i.e., without running an application, connecting to the database, hooking up resolvers, etc.), use the "),e.j41(13,"code"),e.EFF(14,"GraphQLSchemaBuilderModule"),e.k0s(),e.EFF(15,"."),e.k0s(),e.j41(16,"pre")(17,"code",7),e.EFF(18,"\nasync function generateSchema() {\n  const app = await NestFactory.create(GraphQLSchemaBuilderModule);\n  await app.init();\n\n  const gqlSchemaFactory = app.get(GraphQLSchemaFactory);\n  const schema = await gqlSchemaFactory.create([RecipesResolver]);\n  console.log(printSchema(schema));\n}\n"),e.k0s()(),e.j41(19,"blockquote",8)(20,"strong"),e.EFF(21,"Hint"),e.k0s(),e.EFF(22," The "),e.j41(23,"code"),e.EFF(24,"GraphQLSchemaBuilderModule"),e.k0s(),e.EFF(25," and "),e.j41(26,"code"),e.EFF(27,"GraphQLSchemaFactory"),e.k0s(),e.EFF(28," are imported from the "),e.j41(29,"code"),e.EFF(30,"@nestjs/graphql"),e.k0s(),e.EFF(31," package. The "),e.j41(32,"code"),e.EFF(33,"printSchema"),e.k0s(),e.EFF(34," function is imported from the "),e.j41(35,"code"),e.EFF(36,"graphql"),e.k0s(),e.EFF(37," package.\n"),e.k0s(),e.j41(38,"h4",9)(39,"span"),e.EFF(40,"Usage"),e.k0s()(),e.j41(41,"p"),e.EFF(42,"The "),e.j41(43,"code"),e.EFF(44,"gqlSchemaFactory.create()"),e.k0s(),e.EFF(45," method takes an array of resolver class references. For example:"),e.k0s(),e.j41(46,"pre")(47,"code",7),e.EFF(48,"\nconst schema = await gqlSchemaFactory.create([\n  RecipesResolver,\n  AuthorsResolver,\n  PostsResolvers,\n]);\n"),e.k0s()(),e.j41(49,"p"),e.EFF(50,"It also takes a second optional argument with an array of scalar classes:"),e.k0s(),e.j41(51,"pre")(52,"code",7),e.EFF(53,"\nconst schema = await gqlSchemaFactory.create(\n  [RecipesResolver, AuthorsResolver, PostsResolvers],\n  [DurationScalar, DateScalar],\n);\n"),e.k0s()(),e.j41(54,"p"),e.EFF(55,"Lastly, you can pass an options object:"),e.k0s(),e.j41(56,"pre")(57,"code",7),e.EFF(58,"\nconst schema = await gqlSchemaFactory.create([RecipesResolver], {\n  skipCheck: true,\n  orphanedTypes: [],\n});\n"),e.k0s()(),e.j41(59,"ul")(60,"li")(61,"code"),e.EFF(62,"skipCheck"),e.k0s(),e.EFF(63,": ignore schema validation; boolean, defaults to "),e.j41(64,"code"),e.EFF(65,"false"),e.k0s()(),e.j41(66,"li")(67,"code"),e.EFF(68,"orphanedTypes"),e.k0s(),e.EFF(69,": list of classes that are not explicitly referenced (not part of the object graph) to be generated. Normally, if a class is declared but isn't otherwise referenced in the graph, it's omitted. The property value is an array of class references."),e.k0s()()())},dependencies:[a.a],encapsulation:2,changeDetection:0})}return t})(),data:{title:"GraphQL + TypeScript - Generating SDL"}}];let R=(()=>{class t{static \u0275fac=function(o){return new(o||t)};static \u0275mod=e.$C({type:t});static \u0275inj=e.G2t({imports:[u.MD,m.G,F.iI.forChild(L)]})}return t})()}}]);